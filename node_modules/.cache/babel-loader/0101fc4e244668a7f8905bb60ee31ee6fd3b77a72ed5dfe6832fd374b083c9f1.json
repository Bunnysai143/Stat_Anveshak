{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\FileUploader.js\";\nimport React from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUploader = ({\n  onFileUpload\n}) => {\n  const handleFileUpload = e => {\n    const file = e.target.files[0]; // Get the selected file\n\n    if (!file) {\n      // If no file is selected, display an alert or log a message\n      console.error(\"No file selected.\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        const workbook = XLSX.read(new Uint8Array(event.target.result), {\n          type: \"array\"\n        });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]]; // Get the first sheet\n        const rawData = XLSX.utils.sheet_to_json(sheet, {\n          header: 1\n        }); // Convert the sheet to JSON\n        const columnHeaders = rawData[0]; // First row is the column headers\n        const data = rawData.slice(1); // The rest is the actual data\n\n        // Call the parent function to update data and column headers\n        onFileUpload(data, columnHeaders);\n      } catch (error) {\n        console.error(\"Error reading the file:\", error);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"file-upload-link\",\n      children: [\"Upload File\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","XLSX","jsxDEV","_jsxDEV","FileUploader","onFileUpload","handleFileUpload","e","file","target","files","console","error","reader","FileReader","onload","event","workbook","read","Uint8Array","result","type","sheet","Sheets","SheetNames","rawData","utils","sheet_to_json","header","columnHeaders","data","slice","readAsArrayBuffer","children","className","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/FileUploader.js"],"sourcesContent":["import React from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst FileUploader = ({ onFileUpload }) => {\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];  // Get the selected file\r\n    \r\n    if (!file) {\r\n      // If no file is selected, display an alert or log a message\r\n      console.error(\"No file selected.\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (event) => {\r\n      try {\r\n        const workbook = XLSX.read(new Uint8Array(event.target.result), {\r\n          type: \"array\",\r\n        });\r\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];  // Get the first sheet\r\n        const rawData = XLSX.utils.sheet_to_json(sheet, { header: 1 });  // Convert the sheet to JSON\r\n        const columnHeaders = rawData[0];  // First row is the column headers\r\n        const data = rawData.slice(1);  // The rest is the actual data\r\n\r\n        // Call the parent function to update data and column headers\r\n        onFileUpload(data, columnHeaders);\r\n      } catch (error) {\r\n        console.error(\"Error reading the file:\", error);\r\n      }\r\n    };\r\n    \r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"file-upload-link\">\r\n        Upload File\r\n        <input type=\"file\" onChange={handleFileUpload} />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EACzC,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;;IAEjC,IAAI,CAACF,IAAI,EAAE;MACT;MACAG,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAC;MAClC;IACF;IAEA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MACzB,IAAI;QACF,MAAMC,QAAQ,GAAGhB,IAAI,CAACiB,IAAI,CAAC,IAAIC,UAAU,CAACH,KAAK,CAACP,MAAM,CAACW,MAAM,CAAC,EAAE;UAC9DC,IAAI,EAAE;QACR,CAAC,CAAC;QACF,MAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAM,CAACN,QAAQ,CAACO,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;QACxD,MAAMC,OAAO,GAAGxB,IAAI,CAACyB,KAAK,CAACC,aAAa,CAACL,KAAK,EAAE;UAAEM,MAAM,EAAE;QAAE,CAAC,CAAC,CAAC,CAAE;QACjE,MAAMC,aAAa,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAAE;QACnC,MAAMK,IAAI,GAAGL,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;;QAEhC;QACA1B,YAAY,CAACyB,IAAI,EAAED,aAAa,CAAC;MACnC,CAAC,CAAC,OAAOjB,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDC,MAAM,CAACmB,iBAAiB,CAACxB,IAAI,CAAC;EAChC,CAAC;EAED,oBACEL,OAAA;IAAA8B,QAAA,eACE9B,OAAA;MAAO+B,SAAS,EAAC,kBAAkB;MAAAD,QAAA,GAAC,aAElC,eAAA9B,OAAA;QAAOkB,IAAI,EAAC,MAAM;QAACc,QAAQ,EAAE7B;MAAiB;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACC,EAAA,GAxCIpC,YAAY;AA0ClB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}