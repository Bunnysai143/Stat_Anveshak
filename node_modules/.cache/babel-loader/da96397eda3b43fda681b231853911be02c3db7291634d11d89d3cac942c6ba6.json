{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = require('./is_number.js');\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble(token) {\n  var digits;\n  var out;\n  var f = parseFloat(token.arg);\n  if (!isFinite(f)) {\n    // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n    if (!isNumber(token.arg)) {\n      throw new Error('invalid floating-point number. Value: ' + out);\n    }\n    // Case: NaN, Infinity, or -Infinity\n    f = token.arg;\n  }\n  switch (token.specifier) {\n    case 'e':\n    case 'E':\n      out = f.toExponential(token.precision);\n      break;\n    case 'f':\n    case 'F':\n      out = f.toFixed(token.precision);\n      break;\n    case 'g':\n    case 'G':\n      if (abs(f) < 0.0001) {\n        digits = token.precision;\n        if (digits > 0) {\n          digits -= 1;\n        }\n        out = f.toExponential(digits);\n      } else {\n        out = f.toPrecision(token.precision);\n      }\n      if (!token.alternate) {\n        out = replace.call(out, RE_ZERO_BEFORE_EXP, '$1e');\n        out = replace.call(out, RE_PERIOD_ZERO_EXP, 'e');\n        out = replace.call(out, RE_TRAILING_PERIOD_ZERO, '');\n      }\n      break;\n    default:\n      throw new Error('invalid double notation. Value: ' + token.specifier);\n  }\n  out = replace.call(out, RE_EXP_POS_DIGITS, 'e+0$1');\n  out = replace.call(out, RE_EXP_NEG_DIGITS, 'e-0$1');\n  if (token.alternate) {\n    out = replace.call(out, RE_ONLY_DIGITS, '$1.');\n    out = replace.call(out, RE_DIGITS_BEFORE_EXP, '$1.e');\n  }\n  if (f >= 0 && token.sign) {\n    out = token.sign + out;\n  }\n  out = token.specifier === uppercase.call(token.specifier) ? uppercase.call(out) : lowercase.call(out);\n  return out;\n}\n\n// EXPORTS //\n\nmodule.exports = formatDouble;","map":{"version":3,"names":["isNumber","require","abs","Math","lowercase","String","prototype","toLowerCase","uppercase","toUpperCase","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","token","digits","out","f","parseFloat","arg","isFinite","Error","specifier","toExponential","precision","toFixed","toPrecision","alternate","call","sign","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( './is_number.js' );\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e' );\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = formatDouble;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}