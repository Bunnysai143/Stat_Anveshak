{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\nvar setHighWord = require('@stdlib/number-float64-base-set-high-word');\nvar PINF = require('@stdlib/constants-float64-pinf');\nvar NINF = require('@stdlib/constants-float64-ninf');\nvar FLOAT64_EXPONENT_BIAS = require('@stdlib/constants-float64-exponent-bias');\nvar polyval = require('./polyval_lp.js');\n\n// VARIABLES //\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76\n\n// sqrt(2)-1:\nvar SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34\n\n// sqrt(2)/2-1:\nvar SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866\n\n// 2**-29:\nvar SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000\n\n// 2**-54:\nvar TINY = 5.551115123125783e-17;\n\n// Max integer (unsafe) => 2**53:\nvar TWO53 = 9007199254740992;\n\n// 2/3:\nvar TWO_THIRDS = 6.666666666666666666e-01;\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of \\\\(1+x\\\\).\n*\n* ## Method\n*\n* 1.  Argument Reduction: find \\\\(k\\\\) and \\\\(f\\\\) such that\n*\n*     ```tex\n*     1+x = 2^k (1+f)\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\frac{\\sqrt{2}}{2} < 1+f < \\sqrt{2}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     If \\\\(k=0\\\\), then \\\\(f=x\\\\) is exact. However, if \\\\(k \\neq 0\\\\), then \\\\(f\\\\) may not be representable exactly. In that case, a correction term is needed. Let\n*\n*     ```tex\n*     u = \\operatorname{round}(1+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     c = (1+x) - u\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\ln (1+x) - \\ln u \\approx \\frac{c}{u}\n*     ```\n*\n*     We can thus proceed to compute \\\\(\\ln(u)\\\\), and add back the correction term \\\\(c/u\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     When \\\\(x > 2^{53}\\\\), one can simply return \\\\(\\ln(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  Approximation of \\\\(\\operatorname{log1p}(f)\\\\). Let\n*\n*     ```tex\n*     s = \\frac{f}{2+f}\n*     ```\n*\n*     based on\n*\n*     ```tex\n*     \\begin{align*}\n*     \\ln 1+f &= \\ln (1+s) - \\ln (1-s) \\\\\n*             &= 2s + \\frac{2}{3} s^3 + \\frac{2}{5} s^5 + ... \\\\\n*             &= 2s + sR \\\\\n*     \\end{align*}\n*     ```\n*\n*     We use a special Reme algorithm on \\\\(\\[0,0.1716\\]\\\\) to generate a polynomial of degree \\\\(14\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-58.45}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\approx \\mathrm{Lp}_1 s^2 + \\mathrm{Lp}_2 s^4 + \\mathrm{Lp}_3 s^6 + \\mathrm{Lp}_4 s^8 + \\mathrm{Lp}_5 s^{10} + \\mathrm{Lp}_6 s^{12} + \\mathrm{Lp}_7 s^{14}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     | \\mathrm{Lp}_1 s^2 + \\ldots + \\mathrm{Lp}_7 s^14 - R(z) | \\leq 2^{-58.45}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\(Lp1\\\\) to \\\\(Lp7\\\\) may be found in the source.\n*\n*     <!-- </note> -->\n*\n*     Note that\n*\n*     ```tex\n*     \\begin{align*}\n*     2s &= f - sf \\\\\n*        &= f - \\frac{f^2}{2} + s \\frac{f^2}{2} \\\\\n*     \\end{align*}\n*     ```\n*\n*     In order to guarantee error in \\\\(\\ln\\\\) below \\\\(1\\ \\mathrm{ulp}\\\\), we compute the log by\n*\n*     ```tex\n*     \\operatorname{log1p}(f) = f - \\biggl(\\frac{f^2}{2} - s\\biggl(\\frac{f^2}{2}+R\\biggr)\\biggr)\n*     ```\n*\n* 3.  Finally,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{log1p}(x) &= k \\cdot \\mathrm{ln2} + \\operatorname{log1p}(f) \\\\\n*     &= k \\cdot \\mathrm{ln2}_{hi}+\\biggl(f-\\biggl(\\frac{f^2}{2}-\\biggl(s\\biggl(\\frac{f^2}{2}+R\\biggr)+k \\cdot \\mathrm{ln2}_{lo}\\biggr)\\biggr)\\biggr) \\\\\n*     \\end{align*}\n*     ```\n*\n*     Here \\\\(\\mathrm{ln2}\\\\) is split into two floating point numbers:\n*\n*     ```tex\n*     \\mathrm{ln2}_{hi} + \\mathrm{ln2}_{lo}\n*     ```\n*\n*     where \\\\(n \\cdot \\mathrm{ln2}_{hi}\\\\) is always exact for \\\\(|n| < 2000\\\\).\n*\n* ## Special Cases\n*\n* -   \\\\(\\operatorname{log1p}(x) = \\mathrm{NaN}\\\\) with signal if \\\\(x < -1\\\\) (including \\\\(-\\infty\\\\))\n* -   \\\\(\\operatorname{log1p}(+\\infty) = +\\infty\\\\)\n* -   \\\\(\\operatorname{log1p}(-1) = -\\infty\\\\) with signal\n* -   \\\\(\\operatorname{log1p}(\\mathrm{NaN})= \\mathrm{NaN}\\\\) with no signal\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.\n*\n* -   Assuming \\\\(\\ln(x)\\\\) is accurate, the following algorithm can be used to evaluate \\\\(\\operatorname{log1p}(x)\\\\) to within a few ULP:\n*\n*     ```javascript\n*     var u = 1.0 + x;\n*     if ( u === 1.0 ) {\n*         return x;\n*     } else {\n*         return ln(u) * (x/(u-1.0));\n*     }\n*     ```\n*\n*     See HP-15C Advanced Functions Handbook, p.193.\n*\n* @param {number} x - input value\n* @returns {number} the natural logarithm of `1+x`\n*\n* @example\n* var v = log1p( 4.0 );\n* // returns ~1.609\n*\n* @example\n* var v = log1p( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log1p( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = log1p( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = log1p( -2.0 );\n* // returns NaN\n*\n* @example\n* var v = log1p( NaN );\n* // returns NaN\n*/\nfunction log1p(x) {\n  var hfsq;\n  var hu;\n  var y;\n  var f;\n  var c;\n  var s;\n  var z;\n  var R;\n  var u;\n  var k;\n  if (x < -1.0 || isnan(x)) {\n    return NaN;\n  }\n  if (x === -1.0) {\n    return NINF;\n  }\n  if (x === PINF) {\n    return x;\n  }\n  if (x === 0.0) {\n    return x; // handle +-0 (IEEE 754-2008 spec)\n  }\n  // Set y = |x|:\n  if (x < 0.0) {\n    y = -x;\n  } else {\n    y = x;\n  }\n  // Argument reduction...\n  k = 1;\n\n  // Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...\n  if (y < SQRT2M1) {\n    // if |x| < sqrt(2)-1 => ~0.41422\n    if (y < SMALL) {\n      // if |x| < 2**-29\n      if (y < TINY) {\n        // if |x| < 2**-54\n        return x;\n      }\n      // Use a simple two-term Taylor series...\n      return x - x * x * 0.5;\n    }\n    // Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...\n    if (x > SQRT2HALFM1) {\n      // if x > sqrt(2)/2-1 => ~-0.2929\n      // -0.2929 < x < 0.41422\n      k = 0;\n      f = x; // exact\n      hu = 1;\n    }\n  }\n  // Address case where `f` cannot be represented exactly...\n  if (k !== 0) {\n    if (y < TWO53) {\n      u = 1.0 + x;\n      hu = getHighWord(u);\n\n      // Bit shift to isolate the exponent and then subtract the bias:\n      k = (hu >> 20) - FLOAT64_EXPONENT_BIAS;\n\n      // Correction term...\n      if (k > 0) {\n        // positive unbiased exponent\n        c = 1.0 - (u - x);\n      } else {\n        // nonpositive unbiased exponent\n        c = x - (u - 1.0);\n      }\n      c /= u;\n    } else {\n      u = x;\n      hu = getHighWord(u);\n\n      // Bit shift to isolate the exponent and then subtract the bias:\n      k = (hu >> 20) - FLOAT64_EXPONENT_BIAS;\n\n      // Correction term is zero:\n      c = 0;\n    }\n    // Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:\n    hu &= 0x000fffff; // max value => 1048575\n\n    // Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110\n    if (hu < 434334) {\n      // Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000\n      u = setHighWord(u, hu | 0x3ff00000);\n    } else {\n      k += 1;\n\n      // Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000\n      u = setHighWord(u, hu | 0x3fe00000);\n\n      // Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576\n      hu = 1048576 - hu >> 2;\n    }\n    f = u - 1.0;\n  }\n  // Approximation of log1p(f)...\n  hfsq = 0.5 * f * f;\n  if (hu === 0) {\n    // if |f| < 2**-20\n    if (f === 0.0) {\n      c += k * LN2_LO;\n      return k * LN2_HI + c;\n    }\n    R = hfsq * (1.0 - TWO_THIRDS * f); // avoid division\n    return k * LN2_HI - (R - (k * LN2_LO + c) - f);\n  }\n  s = f / (2.0 + f);\n  z = s * s;\n  R = z * polyval(z);\n  if (k === 0) {\n    return f - (hfsq - s * (hfsq + R));\n  }\n  return k * LN2_HI - (hfsq - (s * (hfsq + R) + (k * LN2_LO + c)) - f);\n}\n\n// EXPORTS //\n\nmodule.exports = log1p;","map":{"version":3,"names":["isnan","require","getHighWord","setHighWord","PINF","NINF","FLOAT64_EXPONENT_BIAS","polyval","LN2_HI","LN2_LO","SQRT2M1","SQRT2HALFM1","SMALL","TINY","TWO53","TWO_THIRDS","log1p","x","hfsq","hu","y","f","c","s","z","R","u","k","NaN","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-log1p/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar polyval = require( './polyval_lp.js' );\n\n\n// VARIABLES //\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76\n\n// sqrt(2)-1:\nvar SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34\n\n// sqrt(2)/2-1:\nvar SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866\n\n// 2**-29:\nvar SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000\n\n// 2**-54:\nvar TINY = 5.551115123125783e-17;\n\n// Max integer (unsafe) => 2**53:\nvar TWO53 = 9007199254740992;\n\n// 2/3:\nvar TWO_THIRDS = 6.666666666666666666e-01;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of \\\\(1+x\\\\).\n*\n* ## Method\n*\n* 1.  Argument Reduction: find \\\\(k\\\\) and \\\\(f\\\\) such that\n*\n*     ```tex\n*     1+x = 2^k (1+f)\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\frac{\\sqrt{2}}{2} < 1+f < \\sqrt{2}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     If \\\\(k=0\\\\), then \\\\(f=x\\\\) is exact. However, if \\\\(k \\neq 0\\\\), then \\\\(f\\\\) may not be representable exactly. In that case, a correction term is needed. Let\n*\n*     ```tex\n*     u = \\operatorname{round}(1+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     c = (1+x) - u\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\ln (1+x) - \\ln u \\approx \\frac{c}{u}\n*     ```\n*\n*     We can thus proceed to compute \\\\(\\ln(u)\\\\), and add back the correction term \\\\(c/u\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     When \\\\(x > 2^{53}\\\\), one can simply return \\\\(\\ln(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  Approximation of \\\\(\\operatorname{log1p}(f)\\\\). Let\n*\n*     ```tex\n*     s = \\frac{f}{2+f}\n*     ```\n*\n*     based on\n*\n*     ```tex\n*     \\begin{align*}\n*     \\ln 1+f &= \\ln (1+s) - \\ln (1-s) \\\\\n*             &= 2s + \\frac{2}{3} s^3 + \\frac{2}{5} s^5 + ... \\\\\n*             &= 2s + sR \\\\\n*     \\end{align*}\n*     ```\n*\n*     We use a special Reme algorithm on \\\\(\\[0,0.1716\\]\\\\) to generate a polynomial of degree \\\\(14\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-58.45}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\approx \\mathrm{Lp}_1 s^2 + \\mathrm{Lp}_2 s^4 + \\mathrm{Lp}_3 s^6 + \\mathrm{Lp}_4 s^8 + \\mathrm{Lp}_5 s^{10} + \\mathrm{Lp}_6 s^{12} + \\mathrm{Lp}_7 s^{14}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     | \\mathrm{Lp}_1 s^2 + \\ldots + \\mathrm{Lp}_7 s^14 - R(z) | \\leq 2^{-58.45}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\(Lp1\\\\) to \\\\(Lp7\\\\) may be found in the source.\n*\n*     <!-- </note> -->\n*\n*     Note that\n*\n*     ```tex\n*     \\begin{align*}\n*     2s &= f - sf \\\\\n*        &= f - \\frac{f^2}{2} + s \\frac{f^2}{2} \\\\\n*     \\end{align*}\n*     ```\n*\n*     In order to guarantee error in \\\\(\\ln\\\\) below \\\\(1\\ \\mathrm{ulp}\\\\), we compute the log by\n*\n*     ```tex\n*     \\operatorname{log1p}(f) = f - \\biggl(\\frac{f^2}{2} - s\\biggl(\\frac{f^2}{2}+R\\biggr)\\biggr)\n*     ```\n*\n* 3.  Finally,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{log1p}(x) &= k \\cdot \\mathrm{ln2} + \\operatorname{log1p}(f) \\\\\n*     &= k \\cdot \\mathrm{ln2}_{hi}+\\biggl(f-\\biggl(\\frac{f^2}{2}-\\biggl(s\\biggl(\\frac{f^2}{2}+R\\biggr)+k \\cdot \\mathrm{ln2}_{lo}\\biggr)\\biggr)\\biggr) \\\\\n*     \\end{align*}\n*     ```\n*\n*     Here \\\\(\\mathrm{ln2}\\\\) is split into two floating point numbers:\n*\n*     ```tex\n*     \\mathrm{ln2}_{hi} + \\mathrm{ln2}_{lo}\n*     ```\n*\n*     where \\\\(n \\cdot \\mathrm{ln2}_{hi}\\\\) is always exact for \\\\(|n| < 2000\\\\).\n*\n* ## Special Cases\n*\n* -   \\\\(\\operatorname{log1p}(x) = \\mathrm{NaN}\\\\) with signal if \\\\(x < -1\\\\) (including \\\\(-\\infty\\\\))\n* -   \\\\(\\operatorname{log1p}(+\\infty) = +\\infty\\\\)\n* -   \\\\(\\operatorname{log1p}(-1) = -\\infty\\\\) with signal\n* -   \\\\(\\operatorname{log1p}(\\mathrm{NaN})= \\mathrm{NaN}\\\\) with no signal\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.\n*\n* -   Assuming \\\\(\\ln(x)\\\\) is accurate, the following algorithm can be used to evaluate \\\\(\\operatorname{log1p}(x)\\\\) to within a few ULP:\n*\n*     ```javascript\n*     var u = 1.0 + x;\n*     if ( u === 1.0 ) {\n*         return x;\n*     } else {\n*         return ln(u) * (x/(u-1.0));\n*     }\n*     ```\n*\n*     See HP-15C Advanced Functions Handbook, p.193.\n*\n* @param {number} x - input value\n* @returns {number} the natural logarithm of `1+x`\n*\n* @example\n* var v = log1p( 4.0 );\n* // returns ~1.609\n*\n* @example\n* var v = log1p( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log1p( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = log1p( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = log1p( -2.0 );\n* // returns NaN\n*\n* @example\n* var v = log1p( NaN );\n* // returns NaN\n*/\nfunction log1p( x ) {\n\tvar hfsq;\n\tvar hu;\n\tvar y;\n\tvar f;\n\tvar c;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar u;\n\tvar k;\n\n\tif ( x < -1.0 || isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn x; // handle +-0 (IEEE 754-2008 spec)\n\t}\n\t// Set y = |x|:\n\tif ( x < 0.0 ) {\n\t\ty = -x;\n\t} else {\n\t\ty = x;\n\t}\n\t// Argument reduction...\n\tk = 1;\n\n\t// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...\n\tif ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422\n\t\tif ( y < SMALL ) { // if |x| < 2**-29\n\t\t\tif ( y < TINY ) { // if |x| < 2**-54\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Use a simple two-term Taylor series...\n\t\t\treturn x - ( x*x*0.5 );\n\t\t}\n\t\t// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...\n\t\tif ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929\n\t\t\t// -0.2929 < x < 0.41422\n\t\t\tk = 0;\n\t\t\tf = x; // exact\n\t\t\thu = 1;\n\t\t}\n\t}\n\t// Address case where `f` cannot be represented exactly...\n\tif ( k !== 0 ) {\n\t\tif ( y < TWO53 ) {\n\t\t\tu = 1.0 + x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term...\n\t\t\tif ( k > 0 ) { // positive unbiased exponent\n\t\t\t\tc = 1.0 - (u-x);\n\t\t\t} else { // nonpositive unbiased exponent\n\t\t\t\tc = x - (u-1.0);\n\t\t\t}\n\t\t\tc /= u;\n\t\t} else {\n\t\t\tu = x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term is zero:\n\t\t\tc = 0;\n\t\t}\n\t\t// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:\n\t\thu &= 0x000fffff; // max value => 1048575\n\n\t\t// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110\n\t\tif ( hu < 434334 ) {\n\t\t\t// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3ff00000 );\n\t\t} else {\n\t\t\tk += 1;\n\n\t\t\t// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3fe00000 );\n\n\t\t\t// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576\n\t\t\thu = (1048576-hu)>>2;\n\t\t}\n\t\tf = u - 1.0;\n\t}\n\t// Approximation of log1p(f)...\n\thfsq = 0.5 * f * f;\n\tif ( hu === 0 ) { // if |f| < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tc += k * LN2_LO;\n\t\t\treturn ( k * LN2_HI ) + c;\n\t\t}\n\t\tR = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division\n\t\treturn ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\n\tR = z * polyval( z );\n\n\tif ( k === 0 ) {\n\t\treturn f - ( hfsq - ( s*(hfsq+R) ) );\n\t}\n\treturn ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = log1p;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}