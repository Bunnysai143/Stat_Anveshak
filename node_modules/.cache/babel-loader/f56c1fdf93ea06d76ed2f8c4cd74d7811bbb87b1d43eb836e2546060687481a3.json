{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\CoreStatistics.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoreStatistics = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const calculateStatistics = column => {\n    const colIndex = columnHeaders.indexOf(column);\n    const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n    if (columnData.length === 0) return {};\n    const min = Math.min(...columnData).toFixed(2);\n    const max = Math.max(...columnData).toFixed(2);\n    const range = (max - min).toFixed(2);\n    const sum = ss.sum(columnData).toFixed(2);\n    const count = columnData.length;\n    const q1 = ss.quantile(columnData, 0.25).toFixed(2);\n    const median = ss.median(columnData).toFixed(2);\n    const q3 = ss.quantile(columnData, 0.75).toFixed(2);\n    const iqr = (q3 - q1).toFixed(2);\n    return {\n      mean: ss.mean(columnData).toFixed(2),\n      median,\n      mode: ss.mode(columnData),\n      variance: ss.variance(columnData).toFixed(2),\n      stdDev: ss.standardDeviation(columnData).toFixed(2),\n      range,\n      min,\n      max,\n      sum,\n      count,\n      skewness: ss.sampleSkewness(columnData).toFixed(2),\n      kurtosis: ss.sampleKurtosis(columnData).toFixed(2),\n      q1,\n      q3,\n      iqr,\n      rms: Math.sqrt(ss.mean(columnData.map(val => val ** 2))).toFixed(2),\n      sumOfSquares: columnData.reduce((acc, val) => acc + (val - ss.mean(columnData)) ** 2, 0).toFixed(2)\n    };\n  };\n  const [selectedColumn, setSelectedColumn] = React.useState(\"\");\n  const stats = selectedColumn ? calculateStatistics(selectedColumn) : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedColumn(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: header\n      }, header, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 40\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), selectedColumn && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mean: \", stats.mean]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Median: \", stats.median]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mode: \", stats.mode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Variance: \", stats.variance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"StdDev: \", stats.stdDev]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Range: \", stats.range]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Minimum: \", stats.min]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Maximum: \", stats.max]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sum: \", stats.sum]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Count: \", stats.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Skewness: \", stats.skewness]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Kurtosis: \", stats.kurtosis]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Q1 (25th Percentile): \", stats.q1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Q3 (75th Percentile): \", stats.q3]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"IQR (Interquartile Range): \", stats.iqr]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"RMS (Root Mean Square): \", stats.rms]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sum of Squares: \", stats.sumOfSquares]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(CoreStatistics, \"J1hSsk4HE20Dez82ZZvrSTvTsKE=\");\n_c = CoreStatistics;\nexport default CoreStatistics;\nvar _c;\n$RefreshReg$(_c, \"CoreStatistics\");","map":{"version":3,"names":["React","ss","jsxDEV","_jsxDEV","CoreStatistics","data","columnHeaders","_s","calculateStatistics","column","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","min","Math","toFixed","max","range","sum","count","q1","quantile","median","q3","iqr","mean","mode","variance","stdDev","standardDeviation","skewness","sampleSkewness","kurtosis","sampleKurtosis","rms","sqrt","sumOfSquares","reduce","acc","selectedColumn","setSelectedColumn","useState","stats","children","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","header","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/CoreStatistics.js"],"sourcesContent":["import React from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\n\r\nconst CoreStatistics = ({ data, columnHeaders }) => {\r\n  const calculateStatistics = (column) => {\r\n    const colIndex = columnHeaders.indexOf(column);\r\n    const columnData = data.map((row) => parseFloat(row[colIndex])).filter((val) => !isNaN(val));\r\n    if (columnData.length === 0) return {};\r\n\r\n    const min = Math.min(...columnData).toFixed(2);\r\n    const max = Math.max(...columnData).toFixed(2);\r\n    const range = (max - min).toFixed(2);\r\n    const sum = ss.sum(columnData).toFixed(2);\r\n    const count = columnData.length;\r\n\r\n    const q1 = ss.quantile(columnData, 0.25).toFixed(2);\r\n    const median = ss.median(columnData).toFixed(2);\r\n    const q3 = ss.quantile(columnData, 0.75).toFixed(2);\r\n    const iqr = (q3 - q1).toFixed(2);\r\n\r\n    return {\r\n      mean: ss.mean(columnData).toFixed(2),\r\n      median,\r\n      mode: ss.mode(columnData),\r\n      variance: ss.variance(columnData).toFixed(2),\r\n      stdDev: ss.standardDeviation(columnData).toFixed(2),\r\n      range,\r\n      min,\r\n      max,\r\n      sum,\r\n      count,\r\n      skewness: ss.sampleSkewness(columnData).toFixed(2),\r\n      kurtosis: ss.sampleKurtosis(columnData).toFixed(2),\r\n      q1,\r\n      q3,\r\n      iqr,\r\n      rms: Math.sqrt(ss.mean(columnData.map(val => val ** 2))).toFixed(2),\r\n      sumOfSquares: columnData.reduce((acc, val) => acc + (val - ss.mean(columnData)) ** 2, 0).toFixed(2)\r\n    };\r\n  };\r\n\r\n  const [selectedColumn, setSelectedColumn] = React.useState(\"\");\r\n  const stats = selectedColumn ? calculateStatistics(selectedColumn) : {};\r\n\r\n  return (\r\n    <div>\r\n      <select onChange={(e) => setSelectedColumn(e.target.value)}>\r\n        <option value=\"\">Select a column</option>\r\n        {columnHeaders.map((header) => <option key={header}>{header}</option>)}\r\n      </select>\r\n      {selectedColumn && (\r\n        <div>\r\n          <p>Mean: {stats.mean}</p>\r\n          <p>Median: {stats.median}</p>\r\n          <p>Mode: {stats.mode}</p>\r\n          <p>Variance: {stats.variance}</p>\r\n          <p>StdDev: {stats.stdDev}</p>\r\n          <p>Range: {stats.range}</p>\r\n          <p>Minimum: {stats.min}</p>\r\n          <p>Maximum: {stats.max}</p>\r\n          <p>Sum: {stats.sum}</p>\r\n          <p>Count: {stats.count}</p>\r\n          <p>Skewness: {stats.skewness}</p>\r\n          <p>Kurtosis: {stats.kurtosis}</p>\r\n          <p>Q1 (25th Percentile): {stats.q1}</p>\r\n          <p>Q3 (75th Percentile): {stats.q3}</p>\r\n          <p>IQR (Interquartile Range): {stats.iqr}</p>\r\n          <p>RMS (Root Mean Square): {stats.rms}</p>\r\n          <p>Sum of Squares: {stats.sumOfSquares}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoreStatistics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}