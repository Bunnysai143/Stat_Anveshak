{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\"; // Import jstat for Beta and other distributions\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const [accuracy, setAccuracy] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    setAccuracy(null);\n    if (column) {\n      const colIndex = columnHeaders.indexOf(column);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n    }\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n    setAccuracy(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    setAccuracy(null);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      let calculatedAccuracy = 0;\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          distributionData = columnData.map(val => ss.zScore(val, mean, stddev));\n          calculatedAccuracy = 1 - stddev / mean;\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => lambda * Math.exp(-lambda * val));\n          calculatedAccuracy = lambda;\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          distributionData = columnData.map(() => 1 / (max - min));\n          calculatedAccuracy = max - min;\n          break;\n        case \"Binomial\":\n          const trials = 10;\n          const probability = 0.5; // Assume 50% success\n          distributionData = columnData.map(val => ss.binomialPMF(val, trials, probability));\n          calculatedAccuracy = trials * probability;\n          break;\n        case \"Poisson\":\n          const poissonLambda = ss.mean(columnData);\n          distributionData = columnData.map(val => ss.poissonPMF(val, poissonLambda));\n          calculatedAccuracy = poissonLambda;\n          break;\n        case \"Geometric\":\n          const p = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => ss.geometricPMF(val, p));\n          calculatedAccuracy = p;\n          break;\n        case \"Bernoulli\":\n          const bernoulliP = ss.mean(columnData) / Math.max(...columnData);\n          distributionData = columnData.map(val => val === 0 || val === 1 ? ss.bernoulliPMF(val, bernoulliP) : 0);\n          calculatedAccuracy = bernoulliP;\n          break;\n        case \"Negative Binomial\":\n          const r = 5; // Assume 5 failures\n          const negativeBinomialP = 0.5;\n          distributionData = columnData.map(val => ss.negativeBinomialPMF(val, r, negativeBinomialP));\n          calculatedAccuracy = r / negativeBinomialP;\n          break;\n        case \"Hypergeometric\":\n          const N = 50; // Total population size\n          const K = 20; // Number of successes in population\n          const n = 10; // Number of draws\n          distributionData = columnData.map(val => ss.hypergeometricPMF(val, N, K, n));\n          calculatedAccuracy = K / N * n;\n          break;\n        default:\n          break;\n      }\n      setAccuracy(calculatedAccuracy.toFixed(4));\n      setChartData({\n        labels,\n        datasets: [{\n          label: `${selectedDistribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleColumnChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Distribution Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Continuous\",\n              children: \"Continuous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Discrete\",\n              children: \"Discrete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Continuous Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Discrete Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 19\n            }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: `${selectedDistribution} Distribution for ${selectedColumn}`\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this), accuracy && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accuracy-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Accuracy: \", accuracy]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"6sIEs+CcwGtKrHkocZCkwPJzDNw=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","accuracy","setAccuracy","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","handleDistributionTypeChange","handleDistributionChange","distribution","labels","Array","from","_","index","distributionData","calculatedAccuracy","mean","stddev","standardDeviation","zScore","lambda","Math","exp","min","max","trials","probability","binomialPMF","poissonLambda","poissonPMF","p","geometricPMF","bernoulliP","bernoulliPMF","r","negativeBinomialP","negativeBinomialPMF","N","K","n","hypergeometricPMF","toFixed","datasets","label","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","dist","options","responsive","plugins","title","display","text","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\r\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport jStat from \"jstat\"; // Import jstat for Beta and other distributions\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n  const [accuracy, setAccuracy] = useState(null);\r\n\r\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\r\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n    setAccuracy(null);\r\n\r\n    if (column) {\r\n      const colIndex = columnHeaders.indexOf(column);\r\n      const columnData = data.map((row) => parseFloat(row[colIndex])).filter((val) => !isNaN(val));\r\n      if (columnData.length === 0) return;\r\n    }\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n    setAccuracy(null);\r\n\r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data.map((row) => parseFloat(row[colIndex])).filter((val) => !isNaN(val));\r\n      if (columnData.length === 0) return;\r\n\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n      let calculatedAccuracy = 0;\r\n\r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          distributionData = columnData.map((val) => ss.zScore(val, mean, stddev));\r\n          calculatedAccuracy = 1 - stddev / mean;\r\n          break;\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => lambda * Math.exp(-lambda * val));\r\n          calculatedAccuracy = lambda;\r\n          break;\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          calculatedAccuracy = max - min;\r\n          break;\r\n        case \"Binomial\":\r\n          const trials = 10;\r\n          const probability = 0.5; // Assume 50% success\r\n          distributionData = columnData.map((val) => ss.binomialPMF(val, trials, probability));\r\n          calculatedAccuracy = trials * probability;\r\n          break;\r\n        case \"Poisson\":\r\n          const poissonLambda = ss.mean(columnData);\r\n          distributionData = columnData.map((val) => ss.poissonPMF(val, poissonLambda));\r\n          calculatedAccuracy = poissonLambda;\r\n          break;\r\n        case \"Geometric\":\r\n          const p = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => ss.geometricPMF(val, p));\r\n          calculatedAccuracy = p;\r\n          break;\r\n        case \"Bernoulli\":\r\n          const bernoulliP = ss.mean(columnData) / Math.max(...columnData);\r\n          distributionData = columnData.map((val) => (val === 0 || val === 1 ? ss.bernoulliPMF(val, bernoulliP) : 0));\r\n          calculatedAccuracy = bernoulliP;\r\n          break;\r\n        case \"Negative Binomial\":\r\n          const r = 5; // Assume 5 failures\r\n          const negativeBinomialP = 0.5;\r\n          distributionData = columnData.map((val) => ss.negativeBinomialPMF(val, r, negativeBinomialP));\r\n          calculatedAccuracy = r / negativeBinomialP;\r\n          break;\r\n        case \"Hypergeometric\":\r\n          const N = 50; // Total population size\r\n          const K = 20; // Number of successes in population\r\n          const n = 10; // Number of draws\r\n          distributionData = columnData.map((val) => ss.hypergeometricPMF(val, N, K, n));\r\n          calculatedAccuracy = (K / N) * n;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      setAccuracy(calculatedAccuracy.toFixed(4));\r\n      setChartData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: `${selectedDistribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <div className=\"select-group\">\r\n          <label>Select Column:</label>\r\n          <select onChange={handleColumnChange}>\r\n            <option value=\"\">Select a column</option>\r\n            {columnHeaders.map((header) => (\r\n              <option key={header} value={header}>\r\n                {header}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <div className=\"select-group\">\r\n              <label>Select Distribution Type:</label>\r\n              <select onChange={handleDistributionTypeChange}>\r\n                <option value=\"\">Select Type</option>\r\n                <option value=\"Continuous\">Continuous</option>\r\n                <option value=\"Discrete\">Discrete</option>\r\n              </select>\r\n            </div>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Continuous Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {continuousDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Discrete Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {discreteDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {chartData && (\r\n        <div className=\"chart-container\">\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              plugins: { title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` } },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {accuracy && (\r\n        <div className=\"accuracy-container\">\r\n          <h4>Accuracy: {accuracy}</h4>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}