{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\nimport { KolmogorovSmirnov } from \"jstat\"; // For KS-Test\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"];\n  const calculateAccuracy = (observed, expected, type) => {\n    if (type === \"Discrete\") {\n      // Chi-Square Test\n      const chiSquare = observed.reduce((sum, obs, i) => {\n        const exp = expected[i] || 0; // Handle missing values\n        return exp > 0 ? sum + Math.pow(obs - exp, 2) / exp : sum;\n      }, 0);\n      const pValue = 1 - jStat.chisquare.cdf(chiSquare, observed.length - 1);\n      return pValue; // Higher p-value means better fit\n    } else if (type === \"Continuous\") {\n      // KS-Test\n      const {\n        pValue\n      } = KolmogorovSmirnov(observed, expected);\n      return pValue; // Higher p-value means better fit\n    }\n    return 0;\n  };\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    if (column) {\n      const colIndex = columnHeaders.indexOf(column);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n    }\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n\n      // Generate chart data for the selected distribution\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          distributionData = columnData.map(val => ss.zScore(val, mean, stddev));\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => lambda * Math.exp(-lambda * val));\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          distributionData = columnData.map(() => 1 / (max - min));\n          break;\n        case \"Gamma\":\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStddev = Math.log(ss.standardDeviation(columnData));\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\n          break;\n        case \"Beta\":\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\n          break;\n        case \"Binomial\":\n          const n = Math.max(...columnData); // Sample size - Using the maximum value from columnData (it can be dynamic)\n          const p = 0.5; // Probability of success\n          distributionData = columnData.map(val => jStat.binomial.pdf(val, n, p)); // Apply binomial distribution\n          break;\n        case \"Poisson\":\n          const lambda1 = ss.mean(columnData); // Average rate (mean) - Calculating mean dynamically from columnData\n          distributionData = columnData.map(val => jStat.poisson.pdf(val, lambda1)); // Apply Poisson distribution\n          break;\n        case \"Geometric\":\n          const pGeo = 0.5; // Probability of success\n          distributionData = columnData.map(val => {\n            // Geometric distribution PMF formula: (1 - p)^(k-1) * p\n            if (val > 0) {\n              return Math.pow(1 - pGeo, val - 1) * pGeo;\n            } else {\n              return 0; // Return 0 for invalid values\n            }\n          }); // Apply Geometric distribution\n          break;\n        case \"Bernoulli\":\n          const pBernoulli = 0.5; // Probability of success\n          distributionData = columnData.map(val => {\n            // Manual calculation of PMF for Bernoulli: p^x * (1-p)^(1-x)\n            return val === 1 ? pBernoulli : 1 - pBernoulli;\n          }); // Apply Bernoulli distribution manually\n          break;\n        case \"Negative Binomial\":\n          // Binomial Coefficient function\n          function binomialCoefficient(n, k) {\n            if (k > n) return 0;\n            let coeff = 1;\n            for (let i = 1; i <= k; i++) {\n              coeff = coeff * (n - (k - i)) / i;\n            }\n            return coeff;\n          }\n          const r = 10; // Number of successes (you can adjust this dynamically)\n          const pNegBin = 0.5; // Probability of success\n\n          // Using the Negative Binomial distribution formula:\n          distributionData = columnData.map(val => {\n            if (val >= r) {\n              const binomCoeff = binomialCoefficient(val - 1, r - 1); // Binomial coefficient part\n              const prob = binomCoeff * Math.pow(pNegBin, r) * Math.pow(1 - pNegBin, val - r);\n              return prob; // Applying the Negative Binomial PMF\n            } else {\n              return 0; // If val is less than the required number of successes, return 0\n            }\n          });\n          break;\n        case \"Hypergeometric\":\n          const M = columnData.length; // Total population size - dynamically based on the dataset\n          const N = columnData.filter(val => val === 1).length; // Number of successes in the population (assuming '1' represents success)\n          const n2 = Math.floor(M / 2); // Number of draws - dynamically chosen based on dataset, here it's half the population\n          distributionData = columnData.map(val => {\n            // Dynamic Hypergeometric distribution calculation using values derived from columnData\n            return hypergeometricPDF(val, M, N, n2); // Apply Hypergeometric distribution\n          });\n          break;\n\n          // Hypergeometric distribution function\n          function hypergeometricPDF(k, M, N, n2) {\n            if (k < 0 || k > n2) return 0; // Return 0 if k is out of valid range\n\n            // Binomial coefficient function\n            const binomialCoefficient1 = (n, k) => {\n              if (k > n) return 0;\n              let res = 1;\n              for (let i = 0; i < k; i++) {\n                res *= (n - i) / (i + 1);\n              }\n              return res;\n            };\n\n            // Compute the three binomial coefficients for the Hypergeometric distribution\n            const coeff1 = binomialCoefficient1(N, k); // Ways to choose k successes from N successes\n            const coeff2 = binomialCoefficient1(M - N, n2 - k); // Ways to choose (n2 - k) failures from (M - N) failures\n            const coeff3 = binomialCoefficient1(M, n2); // Ways to choose n2 draws from M total population\n\n            // Apply the Hypergeometric distribution formula\n            return coeff1 * coeff2 / coeff3;\n          }\n        case \"Multinomial\":\n          // Dynamically calculate the counts (frequencies) for each outcome in the column data\n          const outcomeCounts = {};\n          columnData.forEach(val => {\n            // Assuming `val` corresponds to one of the outcome categories\n            outcomeCounts[val] = (outcomeCounts[val] || 0) + 1;\n          });\n\n          // Get the unique outcomes from columnData (e.g., [0, 1, 2] for three categories)\n          const uniqueOutcomes = Object.keys(outcomeCounts);\n\n          // Dynamically calculate the probabilities based on frequency of occurrences in columnData\n          const totalCount = columnData.length;\n          const probabilities = uniqueOutcomes.map(outcome => outcomeCounts[outcome] / totalCount);\n\n          // Dynamically set the number of trials, e.g., total number of observations (can be adjusted based on dataset)\n          const trials = totalCount;\n\n          // Calculate the PMF for each combination of counts and probabilities\n          distributionData = columnData.map(() => {\n            // Example: counts for each outcome in multinomial trials\n            const counts = uniqueOutcomes.map(outcome => outcomeCounts[outcome] || 0);\n\n            // Compute the Multinomial PMF using the dynamically calculated values\n            const pmf = multinomialPMF(counts, probabilities, trials);\n            return pmf;\n          });\n          break;\n\n          // Multinomial PMF function\n          function multinomialPMF(counts, probabilities, trials) {\n            // Ensure that counts sum up to trials\n            const total = counts.reduce((acc, count) => acc + count, 0);\n            if (total !== trials) {\n              console.error(\"Counts do not sum up to the number of trials.\");\n              return 0;\n            }\n\n            // Calculate the factorials of counts\n            const factorial = n => n === 0 || n === 1 ? 1 : n * factorial(n - 1);\n\n            // Compute the multinomial coefficient\n            const numerator = factorial(trials); // n!\n            let denominator = 1;\n            for (let i = 0; i < counts.length; i++) {\n              denominator *= factorial(counts[i]); // x1!, x2!, ..., xk!\n            }\n\n            // Compute the probability for the outcome\n            let probability = 1;\n            for (let i = 0; i < counts.length; i++) {\n              probability *= Math.pow(probabilities[i], counts[i]);\n            }\n\n            // Return the final PMF\n            return numerator / denominator * probability;\n          }\n        default:\n          break;\n      }\n      setChartData({\n        labels,\n        datasets: [{\n          label: `${selectedDistribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleColumnChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Distribution Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Continuous\",\n              children: \"Continuous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Discrete\",\n              children: \"Discrete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Continuous Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Discrete Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 19\n            }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Accuracy: \", (accuracy * 100).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 5\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: `${selectedDistribution} Distribution for ${selectedColumn}`\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"jdovsKa6abRc0szuR0ZX9WfUeC0=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","KolmogorovSmirnov","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","continuousDistributions","discreteDistributions","calculateAccuracy","observed","expected","type","chiSquare","reduce","sum","obs","i","exp","Math","pow","pValue","chisquare","cdf","length","handleColumnChange","event","column","target","value","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","handleDistributionTypeChange","handleDistributionChange","distribution","labels","Array","from","_","index","distributionData","mean","stddev","standardDeviation","zScore","lambda","min","max","alphaGamma","betaGamma","gamma","sample","logMean","log","logStddev","random","alphaBeta","betaBeta","beta","n","p","binomial","pdf","lambda1","poisson","pGeo","pBernoulli","binomialCoefficient","k","coeff","r","pNegBin","binomCoeff","prob","M","N","n2","floor","hypergeometricPDF","binomialCoefficient1","res","coeff1","coeff2","coeff3","outcomeCounts","forEach","uniqueOutcomes","Object","keys","totalCount","probabilities","outcome","trials","counts","pmf","multinomialPMF","total","acc","count","console","error","factorial","numerator","denominator","probability","datasets","label","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","dist","accuracy","toFixed","options","responsive","plugins","title","display","text","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\r\nimport { KolmogorovSmirnov } from \"jstat\"; // For KS-Test\r\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"\r\n  ];\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"\r\n  ];\r\n\r\n\r\n  const calculateAccuracy = (observed, expected, type) => {\r\n    if (type === \"Discrete\") {\r\n      // Chi-Square Test\r\n      const chiSquare = observed.reduce((sum, obs, i) => {\r\n        const exp = expected[i] || 0; // Handle missing values\r\n        return exp > 0 ? sum + Math.pow(obs - exp, 2) / exp : sum;\r\n      }, 0);\r\n      const pValue = 1 - jStat.chisquare.cdf(chiSquare, observed.length - 1);\r\n      return pValue; // Higher p-value means better fit\r\n    } else if (type === \"Continuous\") {\r\n      // KS-Test\r\n      const { pValue } = KolmogorovSmirnov(observed, expected);\r\n      return pValue; // Higher p-value means better fit\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  \r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n\r\n    if (column) {\r\n      const colIndex = columnHeaders.indexOf(column);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n\r\n      if (columnData.length === 0) return;\r\n    }\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n  \r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n  \r\n      if (columnData.length === 0) return;\r\n  \r\n      // Generate chart data for the selected distribution\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n  \r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          distributionData = columnData.map((val) => ss.zScore(val, mean, stddev));\r\n          break;\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => lambda * Math.exp(-lambda * val));\r\n          break;\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          break;\r\n        case \"Gamma\":\r\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\r\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\r\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\r\n          break;\r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStddev = Math.log(ss.standardDeviation(columnData));\r\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\r\n          break;\r\n        case \"Beta\":\r\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\r\n          break;\r\n          case \"Binomial\":\r\n  const n = Math.max(...columnData);  // Sample size - Using the maximum value from columnData (it can be dynamic)\r\n  const p = 0.5;  // Probability of success\r\n  distributionData = columnData.map((val) => jStat.binomial.pdf(val, n, p));  // Apply binomial distribution\r\n  break;          \r\n\r\ncase \"Poisson\":\r\n  const lambda1 = ss.mean(columnData);  // Average rate (mean) - Calculating mean dynamically from columnData\r\n  distributionData = columnData.map((val) => jStat.poisson.pdf(val, lambda1));  // Apply Poisson distribution\r\n  break;\r\n\r\ncase \"Geometric\":\r\n  const pGeo = 0.5;  // Probability of success\r\n  distributionData = columnData.map((val) => {\r\n    // Geometric distribution PMF formula: (1 - p)^(k-1) * p\r\n    if (val > 0) {\r\n      return Math.pow(1 - pGeo, val - 1) * pGeo;\r\n    } else {\r\n      return 0;  // Return 0 for invalid values\r\n    }\r\n  });  // Apply Geometric distribution\r\n  break;\r\n\r\ncase \"Bernoulli\":\r\n  const pBernoulli = 0.5;  // Probability of success\r\n  distributionData = columnData.map((val) => {\r\n    // Manual calculation of PMF for Bernoulli: p^x * (1-p)^(1-x)\r\n    return val === 1 ? pBernoulli : 1 - pBernoulli;\r\n  });  // Apply Bernoulli distribution manually\r\n  break;\r\n\r\n  case \"Negative Binomial\":\r\n  // Binomial Coefficient function\r\n  function binomialCoefficient(n, k) {\r\n    if (k > n) return 0;\r\n    let coeff = 1;\r\n    for (let i = 1; i <= k; i++) {\r\n      coeff = coeff * (n - (k - i)) / i;\r\n    }\r\n    return coeff;\r\n  }\r\n\r\n  const r = 10;  // Number of successes (you can adjust this dynamically)\r\n  const pNegBin = 0.5;  // Probability of success\r\n  \r\n  // Using the Negative Binomial distribution formula:\r\n  distributionData = columnData.map((val) => {\r\n    if (val >= r) {\r\n      const binomCoeff = binomialCoefficient(val - 1, r - 1); // Binomial coefficient part\r\n      const prob = binomCoeff * Math.pow(pNegBin, r) * Math.pow(1 - pNegBin, val - r);\r\n      return prob;  // Applying the Negative Binomial PMF\r\n    } else {\r\n      return 0;  // If val is less than the required number of successes, return 0\r\n    }\r\n  });\r\n  break;\r\n\r\n  \r\n\r\n  case \"Hypergeometric\":\r\n  const M = columnData.length;  // Total population size - dynamically based on the dataset\r\n  const N = columnData.filter(val => val === 1).length;  // Number of successes in the population (assuming '1' represents success)\r\n  const n2 = Math.floor(M / 2);  // Number of draws - dynamically chosen based on dataset, here it's half the population\r\n  distributionData = columnData.map((val) => {\r\n    // Dynamic Hypergeometric distribution calculation using values derived from columnData\r\n    return hypergeometricPDF(val, M, N, n2);  // Apply Hypergeometric distribution\r\n  });\r\n  break;\r\n\r\n// Hypergeometric distribution function\r\nfunction hypergeometricPDF(k, M, N, n2) {\r\n  if (k < 0 || k > n2) return 0; // Return 0 if k is out of valid range\r\n\r\n  // Binomial coefficient function\r\n  const binomialCoefficient1 = (n, k) => {\r\n    if (k > n) return 0;\r\n    let res = 1;\r\n    for (let i = 0; i < k; i++) {\r\n      res *= (n - i) / (i + 1);\r\n    }\r\n    return res;\r\n  };\r\n\r\n  // Compute the three binomial coefficients for the Hypergeometric distribution\r\n  const coeff1 = binomialCoefficient1(N, k);  // Ways to choose k successes from N successes\r\n  const coeff2 = binomialCoefficient1(M - N, n2 - k);  // Ways to choose (n2 - k) failures from (M - N) failures\r\n  const coeff3 = binomialCoefficient1(M, n2);  // Ways to choose n2 draws from M total population\r\n\r\n  // Apply the Hypergeometric distribution formula\r\n  return (coeff1 * coeff2) / coeff3;\r\n}\r\n\r\n\r\ncase \"Multinomial\":\r\n  // Dynamically calculate the counts (frequencies) for each outcome in the column data\r\n  const outcomeCounts = {};\r\n  columnData.forEach((val) => {\r\n    // Assuming `val` corresponds to one of the outcome categories\r\n    outcomeCounts[val] = (outcomeCounts[val] || 0) + 1;\r\n  });\r\n  \r\n  // Get the unique outcomes from columnData (e.g., [0, 1, 2] for three categories)\r\n  const uniqueOutcomes = Object.keys(outcomeCounts);\r\n\r\n  // Dynamically calculate the probabilities based on frequency of occurrences in columnData\r\n  const totalCount = columnData.length;\r\n  const probabilities = uniqueOutcomes.map((outcome) => outcomeCounts[outcome] / totalCount);\r\n\r\n  // Dynamically set the number of trials, e.g., total number of observations (can be adjusted based on dataset)\r\n  const trials = totalCount;\r\n\r\n  // Calculate the PMF for each combination of counts and probabilities\r\n  distributionData = columnData.map(() => {\r\n    // Example: counts for each outcome in multinomial trials\r\n    const counts = uniqueOutcomes.map((outcome) => outcomeCounts[outcome] || 0);\r\n    \r\n    // Compute the Multinomial PMF using the dynamically calculated values\r\n    const pmf = multinomialPMF(counts, probabilities, trials);\r\n    return pmf;\r\n  });\r\n  break;\r\n\r\n// Multinomial PMF function\r\nfunction multinomialPMF(counts, probabilities, trials) {\r\n  // Ensure that counts sum up to trials\r\n  const total = counts.reduce((acc, count) => acc + count, 0);\r\n  if (total !== trials) {\r\n    console.error(\"Counts do not sum up to the number of trials.\");\r\n    return 0;\r\n  }\r\n\r\n  // Calculate the factorials of counts\r\n  const factorial = (n) => (n === 0 || n === 1) ? 1 : n * factorial(n - 1);\r\n  \r\n  // Compute the multinomial coefficient\r\n  const numerator = factorial(trials);  // n!\r\n  let denominator = 1;\r\n  for (let i = 0; i < counts.length; i++) {\r\n    denominator *= factorial(counts[i]);  // x1!, x2!, ..., xk!\r\n  }\r\n\r\n  // Compute the probability for the outcome\r\n  let probability = 1;\r\n  for (let i = 0; i < counts.length; i++) {\r\n    probability *= Math.pow(probabilities[i], counts[i]);\r\n  }\r\n\r\n  // Return the final PMF\r\n  return (numerator / denominator) * probability;\r\n}\r\n\r\n                       \r\n        default:\r\n          break;\r\n      }\r\n  \r\n      setChartData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: `${selectedDistribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <div className=\"select-group\">\r\n          <label>Select Column:</label>\r\n          <select onChange={handleColumnChange}>\r\n            <option value=\"\">Select a column</option>\r\n            {columnHeaders.map((header) => (\r\n              <option key={header} value={header}>\r\n                {header}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <div className=\"select-group\">\r\n              <label>Select Distribution Type:</label>\r\n              <select onChange={handleDistributionTypeChange}>\r\n                <option value=\"\">Select Type</option>\r\n                <option value=\"Continuous\">Continuous</option>\r\n                <option value=\"Discrete\">Discrete</option>\r\n              </select>\r\n            </div>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Continuous Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {continuousDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Discrete Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {discreteDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {chartData && (\r\n  <div>\r\n    <h4>Accuracy: {(accuracy * 100).toFixed(2)}%</h4> {/* Display accuracy */}\r\n    <div className=\"chart-container\">\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          responsive: true,\r\n          plugins: { title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` } },\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}