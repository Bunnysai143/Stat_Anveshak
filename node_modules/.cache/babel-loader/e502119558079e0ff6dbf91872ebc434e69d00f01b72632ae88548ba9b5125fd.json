{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar SQRT_TWO_PI = require('@stdlib/constants-float64-sqrt-two-pi');\nvar pow = require('@stdlib/math-base-special-pow');\nvar exp = require('@stdlib/math-base-special-exp');\nvar polyval = require('./polyval_s.js');\n\n// VARIABLES //\n\nvar MAX_STIRLING = 143.01608;\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\\\(33 \\leq x \\leq 172\\\\).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamma(x) {\n  var w;\n  var y;\n  var v;\n  w = 1.0 / x;\n  w = 1.0 + w * polyval(w);\n  y = exp(x);\n\n  // Check `x` to avoid `pow()` overflow...\n  if (x > MAX_STIRLING) {\n    v = pow(x, 0.5 * x - 0.25);\n    y = v * (v / y);\n  } else {\n    y = pow(x, x - 0.5) / y;\n  }\n  return SQRT_TWO_PI * y * w;\n}\n\n// EXPORTS //\n\nmodule.exports = gamma;","map":{"version":3,"names":["SQRT_TWO_PI","require","pow","exp","polyval","MAX_STIRLING","gamma","x","w","y","v","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-gamma/lib/stirling_approximation.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar polyval = require( './polyval_s.js' );\n\n\n// VARIABLES //\n\nvar MAX_STIRLING = 143.01608;\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\\\(33 \\leq x \\leq 172\\\\).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamma( x ) {\n\tvar w;\n\tvar y;\n\tvar v;\n\n\tw = 1.0 / x;\n\tw = 1.0 + ( w * polyval( w ) );\n\ty = exp( x );\n\n\t// Check `x` to avoid `pow()` overflow...\n\tif ( x > MAX_STIRLING ) {\n\t\tv = pow( x, ( 0.5*x ) - 0.25 );\n\t\ty = v * (v/y);\n\t} else {\n\t\ty = pow( x, x-0.5 ) / y;\n\t}\n\treturn SQRT_TWO_PI * y * w;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAE,uCAAwC,CAAC;AACpE,IAAIC,GAAG,GAAGD,OAAO,CAAE,+BAAgC,CAAC;AACpD,IAAIE,GAAG,GAAGF,OAAO,CAAE,+BAAgC,CAAC;AACpD,IAAIG,OAAO,GAAGH,OAAO,CAAE,gBAAiB,CAAC;;AAGzC;;AAEA,IAAII,YAAY,GAAG,SAAS;;AAG5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAAEC,CAAC,EAAG;EACnB,IAAIC,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EAELF,CAAC,GAAG,GAAG,GAAGD,CAAC;EACXC,CAAC,GAAG,GAAG,GAAKA,CAAC,GAAGJ,OAAO,CAAEI,CAAE,CAAG;EAC9BC,CAAC,GAAGN,GAAG,CAAEI,CAAE,CAAC;;EAEZ;EACA,IAAKA,CAAC,GAAGF,YAAY,EAAG;IACvBK,CAAC,GAAGR,GAAG,CAAEK,CAAC,EAAI,GAAG,GAACA,CAAC,GAAK,IAAK,CAAC;IAC9BE,CAAC,GAAGC,CAAC,IAAIA,CAAC,GAACD,CAAC,CAAC;EACd,CAAC,MAAM;IACNA,CAAC,GAAGP,GAAG,CAAEK,CAAC,EAAEA,CAAC,GAAC,GAAI,CAAC,GAAGE,CAAC;EACxB;EACA,OAAOT,WAAW,GAAGS,CAAC,GAAGD,CAAC;AAC3B;;AAGA;;AAEAG,MAAM,CAACC,OAAO,GAAGN,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}