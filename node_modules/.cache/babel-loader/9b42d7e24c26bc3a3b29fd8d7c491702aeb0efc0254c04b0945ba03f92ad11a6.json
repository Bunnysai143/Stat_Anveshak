{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  //const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const [accuracy, setAccuracy] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    setAccuracy(null);\n    if (column) {\n      const colIndex = columnHeaders.indexOf(column);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n    }\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n    setAccuracy(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n\n      // Generate chart data for the selected distribution\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      let calcAccuracy = null;\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          distributionData = columnData.map(val => ss.zScore(val, mean, stddev));\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => lambda * Math.exp(-lambda * val));\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          distributionData = columnData.map(() => 1 / (max - min));\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\n          break;\n        case \"Gamma\":\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStddev = Math.log(ss.standardDeviation(columnData));\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\n          break;\n        case \"Beta\":\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\n          break;\n        case \"Binomial\":\n          const n = Math.max(...columnData); // Sample size - Using the maximum value from columnData (it can be dynamic)\n          const p = 0.5; // Probability of success\n          distributionData = columnData.map(val => jStat.binomial.pdf(val, n, p)); // Apply binomial distribution\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\n          break;\n        case \"Poisson\":\n          const lambda1 = ss.mean(columnData); // Average rate (mean) - Calculating mean dynamically from columnData\n          distributionData = columnData.map(val => jStat.poisson.pdf(val, lambda1)); // Apply Poisson distribution\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\n          break;\n        case \"Geometric\":\n          const pGeo = 0.5; // Probability of success\n          distributionData = columnData.map(val => {\n            // Geometric distribution PMF formula: (1 - p)^(k-1) * p\n            if (val > 0) {\n              return Math.pow(1 - pGeo, val - 1) * pGeo;\n            } else {\n              return 0; // Return 0 for invalid values\n            }\n          }); // Apply Geometric distribution\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\n          break;\n        case \"Bernoulli\":\n          const pBernoulli = 0.5; // Probability of success\n          distributionData = columnData.map(val => {\n            // Manual calculation of PMF for Bernoulli: p^x * (1-p)^(1-x)\n            return val === 1 ? pBernoulli : 1 - pBernoulli;\n          }); // Apply Bernoulli distribution manually\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\n          break;\n        case \"Negative Binomial\":\n          // Binomial Coefficient function\n          function binomialCoefficient(n, k) {\n            if (k > n) return 0;\n            let coeff = 1;\n            for (let i = 1; i <= k; i++) {\n              coeff = coeff * (n - (k - i)) / i;\n            }\n            return coeff;\n          }\n          const r = 10; // Number of successes (you can adjust this dynamically)\n          const pNegBin = 0.5; // Probability of success\n\n          // Using the Negative Binomial distribution formula:\n          distributionData = columnData.map(val => {\n            if (val >= r) {\n              const binomCoeff = binomialCoefficient(val - 1, r - 1); // Binomial coefficient part\n              const prob = binomCoeff * Math.pow(pNegBin, r) * Math.pow(1 - pNegBin, val - r);\n              return prob; // Applying the Negative Binomial PMF\n            } else {\n              return 0; // If val is less than the required number of successes, return 0\n            }\n          });\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\n          break;\n        case \"Hypergeometric\":\n          const M = columnData.length; // Total population size - dynamically based on the dataset\n          const N = columnData.filter(val => val === 1).length; // Number of successes in the population (assuming '1' represents success)\n          const n2 = Math.floor(M / 2); // Number of draws - dynamically chosen based on dataset, here it's half the population\n          distributionData = columnData.map(val => {\n            // Dynamic Hypergeometric distribution calculation using values derived from columnData\n            return hypergeometricPDF(val, M, N, n2); // Apply Hypergeometric distribution\n          });\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\n          break;\n\n          // Hypergeometric distribution function\n          function hypergeometricPDF(k, M, N, n2) {\n            if (k < 0 || k > n2) return 0; // Return 0 if k is out of valid range\n\n            // Binomial coefficient function\n            const binomialCoefficient1 = (n, k) => {\n              if (k > n) return 0;\n              let res = 1;\n              for (let i = 0; i < k; i++) {\n                res *= (n - i) / (i + 1);\n              }\n              return res;\n            };\n\n            // Compute the three binomial coefficients for the Hypergeometric distribution\n            const coeff1 = binomialCoefficient1(N, k); // Ways to choose k successes from N successes\n            const coeff2 = binomialCoefficient1(M - N, n2 - k); // Ways to choose (n2 - k) failures from (M - N) failures\n            const coeff3 = binomialCoefficient1(M, n2); // Ways to choose n2 draws from M total population\n\n            // Apply the Hypergeometric distribution formula\n            return coeff1 * coeff2 / coeff3;\n          }\n        case \"Multinomial\":\n          // Dynamically calculate the counts (frequencies) for each outcome in the column data\n          const outcomeCounts = {};\n          columnData.forEach(val => {\n            // Assuming `val` corresponds to one of the outcome categories\n            outcomeCounts[val] = (outcomeCounts[val] || 0) + 1;\n          });\n\n          // Get the unique outcomes from columnData (e.g., [0, 1, 2] for three categories)\n          const uniqueOutcomes = Object.keys(outcomeCounts);\n\n          // Dynamically calculate the probabilities based on frequency of occurrences in columnData\n          const totalCount = columnData.length;\n          const probabilities = uniqueOutcomes.map(outcome => outcomeCounts[outcome] / totalCount);\n\n          // Dynamically set the number of trials, e.g., total number of observations (can be adjusted based on dataset)\n          const trials = totalCount;\n\n          // Calculate the PMF for each combination of counts and probabilities\n          distributionData = columnData.map(() => {\n            // Example: counts for each outcome in multinomial trials\n            const counts = uniqueOutcomes.map(outcome => outcomeCounts[outcome] || 0);\n\n            // Compute the Multinomial PMF using the dynamically calculated values\n            const pmf = multinomialPMF(counts, probabilities, trials);\n            return pmf;\n          });\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\n          break;\n\n          // Multinomial PMF function\n          function multinomialPMF(counts, probabilities, trials) {\n            // Ensure that counts sum up to trials\n            const total = counts.reduce((acc, count) => acc + count, 0);\n            if (total !== trials) {\n              console.error(\"Counts do not sum up to the number of trials.\");\n              return 0;\n            }\n\n            // Calculate the factorials of counts\n            const factorial = n => n === 0 || n === 1 ? 1 : n * factorial(n - 1);\n\n            // Compute the multinomial coefficient\n            const numerator = factorial(trials); // n!\n            let denominator = 1;\n            for (let i = 0; i < counts.length; i++) {\n              denominator *= factorial(counts[i]); // x1!, x2!, ..., xk!\n            }\n\n            // Compute the probability for the outcome\n            let probability = 1;\n            for (let i = 0; i < counts.length; i++) {\n              probability *= Math.pow(probabilities[i], counts[i]); // (p1^x1) * (p2^x2) * ...\n            }\n            return numerator / denominator * probability;\n          }\n        default:\n          break;\n      }\n      setAccuracy(calcAccuracy);\n      setChartData({\n        labels,\n        datasets: [{\n          label: `${distribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  const calculateRSquared = (observedData, predictedData) => {\n    const meanObserved = ss.mean(observedData);\n    const totalSumOfSquares = observedData.reduce((acc, val) => acc + Math.pow(val - meanObserved, 2), 0);\n    const residualSumOfSquares = observedData.reduce((acc, val, idx) => acc + Math.pow(val - predictedData[idx], 2), 0);\n    return 1 - residualSumOfSquares / totalSumOfSquares;\n  };\n\n  // Function to calculate accuracy (goodness of fit)\n  const calculateAccuracy = (observedData, predictedData, type) => {\n    if (type === \"continuous\") {\n      const rmsValue = ss.rms(observedData, predictedData); // Root Mean Square (RMS)\n      const mse = rmsValue * rmsValue; // Mean Squared Error\n      const rSquared = ss.rSquared(observedData, predictedData); // R² Value\n      return `MSE: ${mse.toFixed(4)}, R²: ${rSquared.toFixed(4)}`;\n    } else if (type === \"discrete\") {\n      const chiSquare = ss.chiSquaredGoodnessOfFit(observedData, predictedData);\n      return `Chi-square: ${chiSquare.toFixed(4)}`;\n    }\n    return \"Accuracy could not be calculated.\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Column:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleColumnChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: header,\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Distribution Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleDistributionTypeChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Continuous\",\n          children: \"Continuous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Discrete\",\n          children: \"Discrete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), selectedDistributionType && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Distribution:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleDistributionChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), (selectedDistributionType === \"Continuous\" ? continuousDistributions : discreteDistributions).map(distribution => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: distribution,\n          children: distribution\n        }, distribution, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this), accuracy && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Accuracy: \", accuracy]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 20\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"XxH283C59NbGO0sAhw5o+Y2biLE=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","chartData","setChartData","accuracy","setAccuracy","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","setSelectedDistribution","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","handleDistributionTypeChange","handleDistributionChange","distribution","labels","Array","from","_","index","distributionData","calcAccuracy","mean","stddev","standardDeviation","zScore","calculateAccuracy","lambda","Math","exp","min","max","alphaGamma","pow","betaGamma","gamma","sample","logMean","log","logStddev","random","alphaBeta","betaBeta","beta","n","p","binomial","pdf","lambda1","poisson","pGeo","pBernoulli","binomialCoefficient","k","coeff","i","r","pNegBin","binomCoeff","prob","M","N","n2","floor","hypergeometricPDF","binomialCoefficient1","res","coeff1","coeff2","coeff3","outcomeCounts","forEach","uniqueOutcomes","Object","keys","totalCount","probabilities","outcome","trials","counts","pmf","multinomialPMF","total","reduce","acc","count","console","error","factorial","numerator","denominator","probability","datasets","label","fill","borderColor","tension","calculateRSquared","observedData","predictedData","meanObserved","totalSumOfSquares","residualSumOfSquares","idx","type","rmsValue","rms","mse","rSquared","toFixed","chiSquare","chiSquaredGoodnessOfFit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\r\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  //const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n  const [accuracy, setAccuracy] = useState(null);\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"\r\n  ];\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n    setAccuracy(null);\r\n\r\n    if (column) {\r\n      const colIndex = columnHeaders.indexOf(column);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n\r\n      if (columnData.length === 0) return;\r\n    }\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n  \r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n  \r\n      if (columnData.length === 0) return;\r\n  \r\n      // Generate chart data for the selected distribution\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n      let calcAccuracy = null;\r\n  \r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          distributionData = columnData.map((val) => ss.zScore(val, mean, stddev));\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\r\n          break;\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => lambda * Math.exp(-lambda * val));\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\r\n          break;\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\r\n          break;\r\n        case \"Gamma\":\r\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\r\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\r\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\r\n          break;\r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStddev = Math.log(ss.standardDeviation(columnData));\r\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\r\n          break;\r\n        case \"Beta\":\r\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"continuous\");\r\n          break;\r\n        case \"Binomial\":\r\n          const n = Math.max(...columnData);  // Sample size - Using the maximum value from columnData (it can be dynamic)\r\n          const p = 0.5;  // Probability of success\r\n          distributionData = columnData.map((val) => jStat.binomial.pdf(val, n, p));  // Apply binomial distribution\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\r\n          break;          \r\n\r\n        case \"Poisson\":\r\n          const lambda1 = ss.mean(columnData);  // Average rate (mean) - Calculating mean dynamically from columnData\r\n          distributionData = columnData.map((val) => jStat.poisson.pdf(val, lambda1));  // Apply Poisson distribution\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\r\n          break;\r\n\r\n        case \"Geometric\":\r\n          const pGeo = 0.5;  // Probability of success\r\n          distributionData = columnData.map((val) => {\r\n            // Geometric distribution PMF formula: (1 - p)^(k-1) * p\r\n            if (val > 0) {\r\n              return Math.pow(1 - pGeo, val - 1) * pGeo;\r\n            } else {\r\n              return 0;  // Return 0 for invalid values\r\n            }\r\n          });  // Apply Geometric distribution\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\r\n          break;\r\n\r\n        case \"Bernoulli\":\r\n          const pBernoulli = 0.5;  // Probability of success\r\n          distributionData = columnData.map((val) => {\r\n            // Manual calculation of PMF for Bernoulli: p^x * (1-p)^(1-x)\r\n            return val === 1 ? pBernoulli : 1 - pBernoulli;\r\n          });  // Apply Bernoulli distribution manually\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\r\n          break;\r\n\r\n        case \"Negative Binomial\":\r\n          // Binomial Coefficient function\r\n          function binomialCoefficient(n, k) {\r\n            if (k > n) return 0;\r\n            let coeff = 1;\r\n            for (let i = 1; i <= k; i++) {\r\n              coeff = coeff * (n - (k - i)) / i;\r\n            }\r\n            return coeff;\r\n          }\r\n\r\n          const r = 10;  // Number of successes (you can adjust this dynamically)\r\n          const pNegBin = 0.5;  // Probability of success\r\n          \r\n          // Using the Negative Binomial distribution formula:\r\n          distributionData = columnData.map((val) => {\r\n            if (val >= r) {\r\n              const binomCoeff = binomialCoefficient(val - 1, r - 1); // Binomial coefficient part\r\n              const prob = binomCoeff * Math.pow(pNegBin, r) * Math.pow(1 - pNegBin, val - r);\r\n              return prob;  // Applying the Negative Binomial PMF\r\n            } else {\r\n              return 0;  // If val is less than the required number of successes, return 0\r\n            }\r\n          });\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\r\n          break;\r\n\r\n        case \"Hypergeometric\":\r\n          const M = columnData.length;  // Total population size - dynamically based on the dataset\r\n          const N = columnData.filter(val => val === 1).length;  // Number of successes in the population (assuming '1' represents success)\r\n          const n2 = Math.floor(M / 2);  // Number of draws - dynamically chosen based on dataset, here it's half the population\r\n          distributionData = columnData.map((val) => {\r\n            // Dynamic Hypergeometric distribution calculation using values derived from columnData\r\n            return hypergeometricPDF(val, M, N, n2);  // Apply Hypergeometric distribution\r\n          });\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\r\n          break;\r\n\r\n        // Hypergeometric distribution function\r\n        function hypergeometricPDF(k, M, N, n2) {\r\n          if (k < 0 || k > n2) return 0; // Return 0 if k is out of valid range\r\n\r\n          // Binomial coefficient function\r\n          const binomialCoefficient1 = (n, k) => {\r\n            if (k > n) return 0;\r\n            let res = 1;\r\n            for (let i = 0; i < k; i++) {\r\n              res *= (n - i) / (i + 1);\r\n            }\r\n            return res;\r\n          };\r\n\r\n          // Compute the three binomial coefficients for the Hypergeometric distribution\r\n          const coeff1 = binomialCoefficient1(N, k);  // Ways to choose k successes from N successes\r\n          const coeff2 = binomialCoefficient1(M - N, n2 - k);  // Ways to choose (n2 - k) failures from (M - N) failures\r\n          const coeff3 = binomialCoefficient1(M, n2);  // Ways to choose n2 draws from M total population\r\n\r\n          // Apply the Hypergeometric distribution formula\r\n          return (coeff1 * coeff2) / coeff3;\r\n        }\r\n\r\n        case \"Multinomial\":\r\n          // Dynamically calculate the counts (frequencies) for each outcome in the column data\r\n          const outcomeCounts = {};\r\n          columnData.forEach((val) => {\r\n            // Assuming `val` corresponds to one of the outcome categories\r\n            outcomeCounts[val] = (outcomeCounts[val] || 0) + 1;\r\n          });\r\n          \r\n          // Get the unique outcomes from columnData (e.g., [0, 1, 2] for three categories)\r\n          const uniqueOutcomes = Object.keys(outcomeCounts);\r\n\r\n          // Dynamically calculate the probabilities based on frequency of occurrences in columnData\r\n          const totalCount = columnData.length;\r\n          const probabilities = uniqueOutcomes.map((outcome) => outcomeCounts[outcome] / totalCount);\r\n\r\n          // Dynamically set the number of trials, e.g., total number of observations (can be adjusted based on dataset)\r\n          const trials = totalCount;\r\n\r\n          // Calculate the PMF for each combination of counts and probabilities\r\n          distributionData = columnData.map(() => {\r\n            // Example: counts for each outcome in multinomial trials\r\n            const counts = uniqueOutcomes.map((outcome) => outcomeCounts[outcome] || 0);\r\n            \r\n            // Compute the Multinomial PMF using the dynamically calculated values\r\n            const pmf = multinomialPMF(counts, probabilities, trials);\r\n            return pmf;\r\n          });\r\n          calcAccuracy = calculateAccuracy(columnData, distributionData, \"discrete\");\r\n          break;\r\n\r\n        // Multinomial PMF function\r\n        function multinomialPMF(counts, probabilities, trials) {\r\n          // Ensure that counts sum up to trials\r\n          const total = counts.reduce((acc, count) => acc + count, 0);\r\n          if (total !== trials) {\r\n            console.error(\"Counts do not sum up to the number of trials.\");\r\n            return 0;\r\n          }\r\n\r\n          // Calculate the factorials of counts\r\n          const factorial = (n) => (n === 0 || n === 1) ? 1 : n * factorial(n - 1);\r\n          \r\n          // Compute the multinomial coefficient\r\n          const numerator = factorial(trials);  // n!\r\n          let denominator = 1;\r\n          for (let i = 0; i < counts.length; i++) {\r\n            denominator *= factorial(counts[i]);  // x1!, x2!, ..., xk!\r\n          }\r\n\r\n          // Compute the probability for the outcome\r\n          let probability = 1;\r\n          for (let i = 0; i < counts.length; i++) {\r\n            probability *= Math.pow(probabilities[i], counts[i]);  // (p1^x1) * (p2^x2) * ...\r\n          }\r\n\r\n          return (numerator / denominator) * probability;\r\n        }\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      setAccuracy(calcAccuracy);\r\n      setChartData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: `${distribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n  \r\n  const calculateRSquared = (observedData, predictedData) => {\r\n    const meanObserved = ss.mean(observedData);\r\n    const totalSumOfSquares = observedData.reduce((acc, val) => acc + Math.pow(val - meanObserved, 2), 0);\r\n    const residualSumOfSquares = observedData.reduce((acc, val, idx) => acc + Math.pow(val - predictedData[idx], 2), 0);\r\n    return 1 - (residualSumOfSquares / totalSumOfSquares);\r\n  };\r\n  \r\n  // Function to calculate accuracy (goodness of fit)\r\n  const calculateAccuracy = (observedData, predictedData, type) => {\r\n    if (type === \"continuous\") {\r\n      const rmsValue = ss.rms(observedData, predictedData);  // Root Mean Square (RMS)\r\n      const mse = rmsValue * rmsValue;  // Mean Squared Error\r\n      const rSquared = ss.rSquared(observedData, predictedData);  // R² Value\r\n      return `MSE: ${mse.toFixed(4)}, R²: ${rSquared.toFixed(4)}`;\r\n    } else if (type === \"discrete\") {\r\n      const chiSquare = ss.chiSquaredGoodnessOfFit(observedData, predictedData);\r\n      return `Chi-square: ${chiSquare.toFixed(4)}`;\r\n    }\r\n    return \"Accuracy could not be calculated.\";\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"distribution-analysis-container\">\r\n      <h1>Distribution Analysis</h1>\r\n      <div className=\"form-group\">\r\n        <label>Select Column:</label>\r\n        <select onChange={handleColumnChange}>\r\n          <option value=\"\">Select a column</option>\r\n          {columnHeaders.map((header, index) => (\r\n            <option key={index} value={header}>\r\n              {header}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Select Distribution Type:</label>\r\n        <select onChange={handleDistributionTypeChange}>\r\n          <option value=\"\">Select Type</option>\r\n          <option value=\"Continuous\">Continuous</option>\r\n          <option value=\"Discrete\">Discrete</option>\r\n        </select>\r\n      </div>\r\n      {selectedDistributionType && (\r\n        <div className=\"form-group\">\r\n          <label>Select Distribution:</label>\r\n          <select onChange={handleDistributionChange}>\r\n            <option value=\"\">Select Distribution</option>\r\n            {(selectedDistributionType === \"Continuous\"\r\n              ? continuousDistributions\r\n              : discreteDistributions\r\n            ).map((distribution) => (\r\n              <option key={distribution} value={distribution}>\r\n                {distribution}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {accuracy && <p>Accuracy: {accuracy}</p>}\r\n\r\n      {chartData && (\r\n        <div className=\"chart-container\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}