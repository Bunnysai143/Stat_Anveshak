{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\nimport { KolmogorovSmirnov } from \"jstat\"; // For KS-Test\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    if (column) {\n      const colIndex = columnHeaders.indexOf(column);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n    }\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n    setAccuracy(null); // Reset accuracy when distribution type changes\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n\n      // Generate chart data for the selected distribution\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      let calculatedAccuracy = 0;\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          distributionData = columnData.map(val => ss.zScore(val, mean, stddev));\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => lambda * Math.exp(-lambda * val));\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          distributionData = columnData.map(() => 1 / (max - min));\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\n          break;\n        case \"Gamma\":\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStddev = Math.log(ss.standardDeviation(columnData));\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\n          break;\n        case \"Beta\":\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\n          break;\n\n        // Add other cases with accuracy calculation\n        // Example: Binomial, Poisson, Geometric, etc\n\n        default:\n          break;\n      }\n\n      // Update state with calculated accuracy\n      setAccuracy(calculatedAccuracy);\n      setChartData({\n        labels,\n        datasets: [{\n          label: `${selectedDistribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleColumnChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Distribution Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Continuous\",\n              children: \"Continuous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Discrete\",\n              children: \"Discrete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Continuous Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 19\n            }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Discrete Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Accuracy: \", (accuracy * 100).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 5\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: `${selectedDistribution} Distribution for ${selectedColumn}`\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"jdovsKa6abRc0szuR0ZX9WfUeC0=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","KolmogorovSmirnov","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","handleDistributionTypeChange","setAccuracy","handleDistributionChange","distribution","labels","Array","from","_","index","distributionData","calculatedAccuracy","mean","stddev","standardDeviation","zScore","calculateAccuracy","lambda","Math","exp","min","max","alphaGamma","pow","betaGamma","gamma","sample","logMean","log","logStddev","random","alphaBeta","betaBeta","beta","datasets","label","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","dist","accuracy","toFixed","options","responsive","plugins","title","display","text","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\r\nimport { KolmogorovSmirnov } from \"jstat\"; // For KS-Test\r\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"\r\n  ];\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n\r\n    if (column) {\r\n      const colIndex = columnHeaders.indexOf(column);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n\r\n      if (columnData.length === 0) return;\r\n    }\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n    setAccuracy(null); // Reset accuracy when distribution type changes\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n  \r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n  \r\n      if (columnData.length === 0) return;\r\n  \r\n      // Generate chart data for the selected distribution\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n      let calculatedAccuracy = 0;\r\n  \r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          distributionData = columnData.map((val) => ss.zScore(val, mean, stddev));\r\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\r\n          break;\r\n  \r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => lambda * Math.exp(-lambda * val));\r\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\r\n          break;\r\n  \r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\r\n          break;\r\n  \r\n        case \"Gamma\":\r\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\r\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\r\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\r\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\r\n          break;\r\n  \r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStddev = Math.log(ss.standardDeviation(columnData));\r\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\r\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\r\n          break;\r\n  \r\n        case \"Beta\":\r\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\r\n          calculatedAccuracy = calculateAccuracy(columnData, distributionData);\r\n          break;\r\n  \r\n        // Add other cases with accuracy calculation\r\n        // Example: Binomial, Poisson, Geometric, etc\r\n        \r\n        default:\r\n          break;\r\n      }\r\n  \r\n      // Update state with calculated accuracy\r\n      setAccuracy(calculatedAccuracy);\r\n  \r\n      setChartData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: `${selectedDistribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <div className=\"select-group\">\r\n          <label>Select Column:</label>\r\n          <select onChange={handleColumnChange}>\r\n            <option value=\"\">Select a column</option>\r\n            {columnHeaders.map((header) => (\r\n              <option key={header} value={header}>\r\n                {header}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <div className=\"select-group\">\r\n              <label>Select Distribution Type:</label>\r\n              <select onChange={handleDistributionTypeChange}>\r\n                <option value=\"\">Select Type</option>\r\n                <option value=\"Continuous\">Continuous</option>\r\n                <option value=\"Discrete\">Discrete</option>\r\n              </select>\r\n            </div>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Continuous Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {continuousDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Discrete Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {discreteDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {chartData && (\r\n  <div>\r\n    <h4>Accuracy: {(accuracy * 100).toFixed(2)}%</h4> {/* Display accuracy */}\r\n    <div className=\"chart-container\">\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          responsive: true,\r\n          plugins: { title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` } },\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}