{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = require('@stdlib/math-base-assert-is-nonnegative-integer');\nvar binomcoefln = require('@stdlib/math-base-special-binomcoefln');\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar log1p = require('@stdlib/math-base-special-log1p');\nvar exp = require('@stdlib/math-base-special-exp');\nvar ln = require('@stdlib/math-base-special-ln');\nvar PINF = require('@stdlib/constants-float64-pinf');\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* @example\n* var y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* @example\n* var y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = pmf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction pmf(x, n, p) {\n  var lnl;\n  if (isnan(x) || isnan(n) || isnan(p) || p < 0.0 || p > 1.0 || !isNonNegativeInteger(n) || n === PINF) {\n    return NaN;\n  }\n  if (isNonNegativeInteger(x)) {\n    if (x > n) {\n      return 0.0;\n    }\n    if (p === 0.0) {\n      return x === 0 ? 1.0 : 0.0;\n    }\n    if (p === 1.0) {\n      return x === n ? 1.0 : 0.0;\n    }\n    lnl = binomcoefln(n, x);\n    lnl += x * ln(p) + (n - x) * log1p(-p);\n    return exp(lnl);\n  }\n  return 0.0;\n}\n\n// EXPORTS //\n\nmodule.exports = pmf;","map":{"version":3,"names":["isNonNegativeInteger","require","binomcoefln","isnan","log1p","exp","ln","PINF","pmf","x","n","p","lnl","NaN","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/stats-base-dists-binomial-pmf/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar binomcoefln = require( '@stdlib/math-base-special-binomcoefln' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* @example\n* var y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* @example\n* var y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = pmf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, n, p ) {\n\tvar lnl;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tif ( x > n ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn ( x === 0 ) ? 1.0 : 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn ( x === n ) ? 1.0 : 0.0;\n\t\t}\n\t\tlnl = binomcoefln( n, x );\n\t\tlnl += (x * ln( p )) + (( n - x ) * log1p( -p ));\n\t\treturn exp( lnl );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAE,iDAAkD,CAAC;AACvF,IAAIC,WAAW,GAAGD,OAAO,CAAE,uCAAwC,CAAC;AACpE,IAAIE,KAAK,GAAGF,OAAO,CAAE,iCAAkC,CAAC;AACxD,IAAIG,KAAK,GAAGH,OAAO,CAAE,iCAAkC,CAAC;AACxD,IAAII,GAAG,GAAGJ,OAAO,CAAE,+BAAgC,CAAC;AACpD,IAAIK,EAAE,GAAGL,OAAO,CAAE,8BAA+B,CAAC;AAClD,IAAIM,IAAI,GAAGN,OAAO,CAAE,gCAAiC,CAAC;;AAGtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,GAAGA,CAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAG;EACvB,IAAIC,GAAG;EACP,IACCT,KAAK,CAAEM,CAAE,CAAC,IACVN,KAAK,CAAEO,CAAE,CAAC,IACVP,KAAK,CAAEQ,CAAE,CAAC,IACVA,CAAC,GAAG,GAAG,IACPA,CAAC,GAAG,GAAG,IACP,CAACX,oBAAoB,CAAEU,CAAE,CAAC,IAC1BA,CAAC,KAAKH,IAAI,EACT;IACD,OAAOM,GAAG;EACX;EACA,IAAKb,oBAAoB,CAAES,CAAE,CAAC,EAAG;IAChC,IAAKA,CAAC,GAAGC,CAAC,EAAG;MACZ,OAAO,GAAG;IACX;IACA,IAAKC,CAAC,KAAK,GAAG,EAAG;MAChB,OAASF,CAAC,KAAK,CAAC,GAAK,GAAG,GAAG,GAAG;IAC/B;IACA,IAAKE,CAAC,KAAK,GAAG,EAAG;MAChB,OAASF,CAAC,KAAKC,CAAC,GAAK,GAAG,GAAG,GAAG;IAC/B;IACAE,GAAG,GAAGV,WAAW,CAAEQ,CAAC,EAAED,CAAE,CAAC;IACzBG,GAAG,IAAKH,CAAC,GAAGH,EAAE,CAAEK,CAAE,CAAC,GAAK,CAAED,CAAC,GAAGD,CAAC,IAAKL,KAAK,CAAE,CAACO,CAAE,CAAE;IAChD,OAAON,GAAG,CAAEO,GAAI,CAAC;EAClB;EACA,OAAO,GAAG;AACX;;AAGA;;AAEAE,MAAM,CAACC,OAAO,GAAGP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}