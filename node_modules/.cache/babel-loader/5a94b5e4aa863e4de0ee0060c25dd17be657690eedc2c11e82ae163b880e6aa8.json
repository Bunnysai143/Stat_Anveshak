{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n// Importing PMFs from stdlib\nimport binomialPMF from \"@stdlib/stats-base-dists-binomial-pmf\";\nimport poissonPMF from \"@stdlib/stats-base-dists-poisson-pmf\";\nimport geometricPMF from \"@stdlib/stats-base-dists-geometric-pmf\";\nimport hypergeometricPMF from \"@stdlib/stats-base-dists-hypergeometric-pmf\";\nimport negativeBinomialPMF from \"@stdlib/stats-base-dists-negative-binomial-pmf\";\nimport bernoulliPMF from \"@stdlib/stats-base-dists-bernoulli-pmf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DistributionAnalysis = () => {\n  _s();\n  const [selectedDistribution, setSelectedDistribution] = useState(\"binomial\");\n  const [parameters, setParameters] = useState({}); // To handle parameters dynamically\n  const [chartData, setChartData] = useState([]);\n  const distributions = {\n    binomial: {\n      label: \"Binomial\",\n      pmf: binomialPMF,\n      parameters: [\"n (trials)\", \"p (success probability)\"],\n      defaultValues: {\n        n: 10,\n        p: 0.5\n      }\n    },\n    poisson: {\n      label: \"Poisson\",\n      pmf: poissonPMF,\n      parameters: [\"λ (rate)\"],\n      defaultValues: {\n        lambda: 3\n      }\n    },\n    geometric: {\n      label: \"Geometric\",\n      pmf: geometricPMF,\n      parameters: [\"p (success probability)\"],\n      defaultValues: {\n        p: 0.5\n      }\n    },\n    hypergeometric: {\n      label: \"Hypergeometric\",\n      pmf: hypergeometricPMF,\n      parameters: [\"N (population size)\", \"K (successes in population)\", \"n (draws)\"],\n      defaultValues: {\n        N: 20,\n        K: 5,\n        n: 10\n      }\n    },\n    negativeBinomial: {\n      label: \"Negative Binomial\",\n      pmf: negativeBinomialPMF,\n      parameters: [\"r (successes)\", \"p (success probability)\"],\n      defaultValues: {\n        r: 5,\n        p: 0.5\n      }\n    },\n    bernoulli: {\n      label: \"Bernoulli\",\n      pmf: bernoulliPMF,\n      parameters: [\"p (success probability)\"],\n      defaultValues: {\n        p: 0.5\n      }\n    }\n  };\n  const handleDistributionChange = event => {\n    const dist = event.target.value;\n    setSelectedDistribution(dist);\n    setParameters(distributions[dist].defaultValues);\n    updateChartData(dist, distributions[dist].defaultValues);\n  };\n  const handleParameterChange = (param, value) => {\n    const updatedParams = {\n      ...parameters,\n      [param]: Number(value)\n    };\n    setParameters(updatedParams);\n    updateChartData(selectedDistribution, updatedParams);\n  };\n  const updateChartData = (dist, params) => {\n    const pmf = distributions[dist].pmf;\n    const data = [[\"x\", \"P(x)\"]];\n    if (dist === \"binomial\") {\n      for (let k = 0; k <= params.n; k++) {\n        data.push([k, pmf(k, params.n, params.p)]);\n      }\n    } else if (dist === \"poisson\") {\n      for (let k = 0; k <= 20; k++) {\n        data.push([k, pmf(k, params.lambda)]);\n      }\n    } else if (dist === \"geometric\") {\n      for (let k = 0; k <= 20; k++) {\n        data.push([k, pmf(k, params.p)]);\n      }\n    } else if (dist === \"hypergeometric\") {\n      for (let k = 0; k <= params.n; k++) {\n        data.push([k, pmf(k, params.N, params.K, params.n)]);\n      }\n    } else if (dist === \"negativeBinomial\") {\n      for (let k = 0; k <= 20; k++) {\n        data.push([k, pmf(k, params.r, params.p)]);\n      }\n    } else if (dist === \"bernoulli\") {\n      for (let k = 0; k <= 1; k++) {\n        data.push([k, pmf(k, params.p)]);\n      }\n    }\n    setChartData(data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"distribution\",\n        children: \"Choose a distribution:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"distribution\",\n        value: selectedDistribution,\n        onChange: handleDistributionChange,\n        children: Object.keys(distributions).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: distributions[key].label\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Parameters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), distributions[selectedDistribution].parameters.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [param, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: parameters[param.split(\" \")[0]] || \"\",\n          onChange: e => handleParameterChange(param.split(\" \")[0], e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Probability Mass Function (PMF) Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), chartData.length > 1 && /*#__PURE__*/_jsxDEV(Chart, {\n        chartType: \"BarChart\",\n        width: \"100%\",\n        height: \"400px\",\n        data: chartData,\n        options: {\n          title: \"PMF Chart\",\n          legend: {\n            position: \"none\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"PHCKZI5VuWh3AleTta0jeLRZp00=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","Chart","binomialPMF","poissonPMF","geometricPMF","hypergeometricPMF","negativeBinomialPMF","bernoulliPMF","jsxDEV","_jsxDEV","DistributionAnalysis","_s","selectedDistribution","setSelectedDistribution","parameters","setParameters","chartData","setChartData","distributions","binomial","label","pmf","defaultValues","n","p","poisson","lambda","geometric","hypergeometric","N","K","negativeBinomial","r","bernoulli","handleDistributionChange","event","dist","target","value","updateChartData","handleParameterChange","param","updatedParams","Number","params","data","k","push","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","Object","keys","map","key","index","type","split","e","length","chartType","width","height","options","title","legend","position","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n// Importing PMFs from stdlib\r\nimport binomialPMF from \"@stdlib/stats-base-dists-binomial-pmf\";\r\nimport poissonPMF from \"@stdlib/stats-base-dists-poisson-pmf\";\r\nimport geometricPMF from \"@stdlib/stats-base-dists-geometric-pmf\";\r\nimport hypergeometricPMF from \"@stdlib/stats-base-dists-hypergeometric-pmf\";\r\nimport negativeBinomialPMF from \"@stdlib/stats-base-dists-negative-binomial-pmf\";\r\nimport bernoulliPMF from \"@stdlib/stats-base-dists-bernoulli-pmf\";\r\n\r\nconst DistributionAnalysis = () => {\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"binomial\");\r\n  const [parameters, setParameters] = useState({}); // To handle parameters dynamically\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  const distributions = {\r\n    binomial: {\r\n      label: \"Binomial\",\r\n      pmf: binomialPMF,\r\n      parameters: [\"n (trials)\", \"p (success probability)\"],\r\n      defaultValues: { n: 10, p: 0.5 },\r\n    },\r\n    poisson: {\r\n      label: \"Poisson\",\r\n      pmf: poissonPMF,\r\n      parameters: [\"λ (rate)\"],\r\n      defaultValues: { lambda: 3 },\r\n    },\r\n    geometric: {\r\n      label: \"Geometric\",\r\n      pmf: geometricPMF,\r\n      parameters: [\"p (success probability)\"],\r\n      defaultValues: { p: 0.5 },\r\n    },\r\n    hypergeometric: {\r\n      label: \"Hypergeometric\",\r\n      pmf: hypergeometricPMF,\r\n      parameters: [\"N (population size)\", \"K (successes in population)\", \"n (draws)\"],\r\n      defaultValues: { N: 20, K: 5, n: 10 },\r\n    },\r\n    negativeBinomial: {\r\n      label: \"Negative Binomial\",\r\n      pmf: negativeBinomialPMF,\r\n      parameters: [\"r (successes)\", \"p (success probability)\"],\r\n      defaultValues: { r: 5, p: 0.5 },\r\n    },\r\n    bernoulli: {\r\n      label: \"Bernoulli\",\r\n      pmf: bernoulliPMF,\r\n      parameters: [\"p (success probability)\"],\r\n      defaultValues: { p: 0.5 },\r\n    },\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const dist = event.target.value;\r\n    setSelectedDistribution(dist);\r\n    setParameters(distributions[dist].defaultValues);\r\n    updateChartData(dist, distributions[dist].defaultValues);\r\n  };\r\n\r\n  const handleParameterChange = (param, value) => {\r\n    const updatedParams = { ...parameters, [param]: Number(value) };\r\n    setParameters(updatedParams);\r\n    updateChartData(selectedDistribution, updatedParams);\r\n  };\r\n\r\n  const updateChartData = (dist, params) => {\r\n    const pmf = distributions[dist].pmf;\r\n    const data = [[\"x\", \"P(x)\"]];\r\n\r\n    if (dist === \"binomial\") {\r\n      for (let k = 0; k <= params.n; k++) {\r\n        data.push([k, pmf(k, params.n, params.p)]);\r\n      }\r\n    } else if (dist === \"poisson\") {\r\n      for (let k = 0; k <= 20; k++) {\r\n        data.push([k, pmf(k, params.lambda)]);\r\n      }\r\n    } else if (dist === \"geometric\") {\r\n      for (let k = 0; k <= 20; k++) {\r\n        data.push([k, pmf(k, params.p)]);\r\n      }\r\n    } else if (dist === \"hypergeometric\") {\r\n      for (let k = 0; k <= params.n; k++) {\r\n        data.push([k, pmf(k, params.N, params.K, params.n)]);\r\n      }\r\n    } else if (dist === \"negativeBinomial\") {\r\n      for (let k = 0; k <= 20; k++) {\r\n        data.push([k, pmf(k, params.r, params.p)]);\r\n      }\r\n    } else if (dist === \"bernoulli\") {\r\n      for (let k = 0; k <= 1; k++) {\r\n        data.push([k, pmf(k, params.p)]);\r\n      }\r\n    }\r\n\r\n    setChartData(data);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Distribution Analysis</h1>\r\n      <div>\r\n        <label htmlFor=\"distribution\">Choose a distribution:</label>\r\n        <select id=\"distribution\" value={selectedDistribution} onChange={handleDistributionChange}>\r\n          {Object.keys(distributions).map((key) => (\r\n            <option key={key} value={key}>\r\n              {distributions[key].label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Parameters</h2>\r\n        {distributions[selectedDistribution].parameters.map((param, index) => (\r\n          <div key={index}>\r\n            <label>{param}: </label>\r\n            <input\r\n              type=\"number\"\r\n              value={parameters[param.split(\" \")[0]] || \"\"}\r\n              onChange={(e) => handleParameterChange(param.split(\" \")[0], e.target.value)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Probability Mass Function (PMF) Chart</h2>\r\n        {chartData.length > 1 && (\r\n          <Chart\r\n            chartType=\"BarChart\"\r\n            width=\"100%\"\r\n            height=\"400px\"\r\n            data={chartData}\r\n            options={{ title: \"PMF Chart\", legend: { position: \"none\" } }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}