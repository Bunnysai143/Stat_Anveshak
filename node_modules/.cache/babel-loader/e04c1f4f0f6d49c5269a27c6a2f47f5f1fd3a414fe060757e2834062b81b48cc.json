{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai kiran\\\\Desktop\\\\INternship\\\\Stat\\\\src\\\\components\\\\ChartGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line, Bar, Radar, Doughnut, Pie, Scatter, Bubble, PolarArea } from \"react-chartjs-2\";\nimport \"../styles/ChartGenerator.css\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, RadarController, DoughnutController, ArcElement, PolarAreaController, ScatterController, BubbleController } from \"chart.js\";\n\n// Registering necessary components for Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, RadarController, DoughnutController, ArcElement, PolarAreaController, ScatterController, BubbleController);\nconst ChartGenerator = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [chartType, setChartType] = useState(\"Line\");\n  const [xColumn, setXColumn] = useState(columnHeaders[0]);\n  const [yColumn, setYColumn] = useState(columnHeaders[1]);\n  useEffect(() => {\n    if (columnHeaders.length > 1) {\n      setXColumn(columnHeaders[0]);\n      setYColumn(columnHeaders[1]);\n    }\n  }, [columnHeaders]);\n  const chartData = {\n    labels: data.map(row => row[columnHeaders.indexOf(xColumn)]),\n    datasets: [{\n      label: yColumn,\n      data: data.map(row => row[columnHeaders.indexOf(yColumn)]),\n      fill: false,\n      borderColor: \"#42a5f5\",\n      tension: 0.1\n    }]\n  };\n  const chartDescriptions = {\n    \"Line\": `\n      Line charts are widely used for visualizing trends over time. They help in understanding patterns and changes in continuous data points. A line chart is ideal for comparing multiple datasets over a common axis, such as time, and is effective for analyzing long-term trends, cyclical patterns, and fluctuations.\n      - *Use Cases*: Stock price trends, sales performance, weather patterns, economic indicators.\n      - *Advantages*: Easy to interpret trends, clear representation of changes over time, useful for forecasting.\n      - *Limitations*: Can become cluttered when there are too many lines, not ideal for non-continuous data.\n    `,\n    \"Bar\": `\n      Bar charts are effective for comparing discrete categories or groups. They provide a clear visual representation of the quantity of items in each category. A bar chart is ideal for representing data where the categories are distinct and non-overlapping.\n      - *Use Cases*: Comparing sales figures by region, evaluating the popularity of products, showing demographic breakdowns.\n      - *Advantages*: Easy to compare categories, great for visualizing differences, works well with both small and large datasets.\n      - *Limitations*: Not suitable for continuous data, bars can be misinterpreted if not scaled properly.\n    `,\n    \"Radar\": `\n      Radar charts are used to compare multiple variables across a common baseline. They are particularly effective for evaluating multiple metrics that need to be compared against each other. The chartâ€™s radial layout allows for a visually engaging display of multi-dimensional data.\n      - *Use Cases*: Comparing product features, performance metrics, skills assessment.\n      - *Advantages*: Excellent for showing relative strengths and weaknesses, easy to compare multiple categories at once.\n      - *Limitations*: Can become difficult to read if too many data points are added, not ideal for complex datasets with too many variables.\n    `,\n    \"Doughnut\": `\n      Doughnut charts are similar to pie charts but with a central blank space, making them a more aesthetically pleasing option for displaying parts of a whole. They are useful for showing proportional data but allow for more space in the center for additional information or labels.\n      - *Use Cases*: Market share representation, survey results, budget allocation.\n      - *Advantages*: Visually attractive, great for showing proportions in a compact space, customizable with central labels or percentages.\n      - *Limitations*: Can become unclear with too many slices, difficult to compare small differences between values.\n    `,\n    \"Pie\": `\n      Pie charts are used to represent parts of a whole, typically as percentages of 100%. They are ideal for showing the composition of data in a way that is easily interpretable. However, they should only be used when there are a limited number of categories (typically fewer than 6) for clarity.\n      - *Use Cases*: Showing market share, budget distribution, survey results.\n      - *Advantages*: Simple and intuitive, effective for small numbers of categories.\n      - *Limitations*: Becomes hard to interpret with too many categories, less effective when comparing similar-sized sections.\n    `,\n    \"Scatter\": `\n      Scatter charts are ideal for visualizing the relationship between two continuous variables. They display data points on a two-dimensional axis and can reveal correlations, clusters, and trends.\n      - *Use Cases*: Correlation analysis, relationship between income and age, studying customer behavior.\n      - *Advantages*: Excellent for visualizing correlations, patterns, and outliers in data.\n      - *Limitations*: Cannot be used for categorical data, difficult to interpret with too many data points.\n    `,\n    \"Bubble\": `\n      Bubble charts are an extension of scatter plots that add a third dimension using the size of the bubbles. This allows for more complex data visualization and can represent an additional variable alongside the x and y axes.\n      - *Use Cases*: Financial data analysis (e.g., revenue vs. cost vs. profit), population growth vs. income vs. education levels.\n      - *Advantages*: Allows visualization of three variables in a single chart, great for representing complex datasets.\n      - *Limitations*: Can become crowded with too many data points, requires careful scaling of bubble sizes.\n    `,\n    \"PolarArea\": `\n      Polar Area charts are similar to pie charts but utilize a polar coordinate system. They are ideal for showing quantities of data in relation to different categories on a circular scale. The area of each sector is proportional to the value it represents.\n      - *Use Cases*: Comparing angular data, weather statistics (wind direction vs. speed), directional metrics.\n      - *Advantages*: Effective for displaying cyclic data or quantities that change with angles, visually appealing.\n      - *Limitations*: Can be hard to read with too many categories, not suitable for large datasets or continuous data.\n    `\n  };\n  const renderChart = () => {\n    switch (chartType) {\n      case \"Line\":\n        return /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 16\n        }, this);\n      case \"Bar\":\n        return /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 16\n        }, this);\n      case \"Radar\":\n        return /*#__PURE__*/_jsxDEV(Radar, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 16\n        }, this);\n      case \"Doughnut\":\n        return /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 16\n        }, this);\n      case \"Pie\":\n        return /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 16\n        }, this);\n      case \"Scatter\":\n        return /*#__PURE__*/_jsxDEV(Scatter, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 16\n        }, this);\n      case \"Bubble\":\n        return /*#__PURE__*/_jsxDEV(Bubble, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 16\n        }, this);\n      case \"PolarArea\":\n        return /*#__PURE__*/_jsxDEV(PolarArea, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"chartType\",\n        value: chartType,\n        onChange: e => setChartType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Line\",\n          children: \"Line Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Bar\",\n          children: \"Bar Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Radar\",\n          children: \"Radar Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Doughnut\",\n          children: \"Doughnut Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Pie\",\n          children: \"Pie Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Scatter\",\n          children: \"Scatter Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Bubble\",\n          children: \"Bubble Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"PolarArea\",\n          children: \"Polar Area Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"xColumn\",\n        value: xColumn,\n        onChange: e => setXColumn(e.target.value),\n        children: columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: header,\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yColumn\",\n        value: yColumn,\n        onChange: e => setYColumn(e.target.value),\n        children: columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: header,\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: renderChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-description\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: chartDescriptions[chartType]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartGenerator, \"KurGQQQNWie+k1zEg4akl4e2u+w=\");\n_c = ChartGenerator;\nexport default ChartGenerator;\nvar _c;\n$RefreshReg$(_c, \"ChartGenerator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Bar","Radar","Doughnut","Pie","Scatter","Bubble","PolarArea","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","RadarController","DoughnutController","ArcElement","PolarAreaController","ScatterController","BubbleController","jsxDEV","_jsxDEV","register","ChartGenerator","data","columnHeaders","_s","chartType","setChartType","xColumn","setXColumn","yColumn","setYColumn","length","chartData","labels","map","row","indexOf","datasets","label","fill","borderColor","tension","chartDescriptions","renderChart","fileName","_jsxFileName","lineNumber","columnNumber","className","children","id","value","onChange","e","target","header","index","_c","$RefreshReg$"],"sources":["C:/Users/Sai kiran/Desktop/INternship/Stat/src/components/ChartGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar, Radar, Doughnut, Pie, Scatter, Bubble, PolarArea } from \"react-chartjs-2\";\r\nimport \"../styles/ChartGenerator.css\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, RadarController, DoughnutController, ArcElement, PolarAreaController, ScatterController, BubbleController } from \"chart.js\";\r\n\r\n// Registering necessary components for Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  RadarController,\r\n  DoughnutController,\r\n  ArcElement,\r\n  PolarAreaController,\r\n  ScatterController,\r\n  BubbleController\r\n);\r\n\r\nconst ChartGenerator = ({ data, columnHeaders }) => {\r\n  const [chartType, setChartType] = useState(\"Line\");\r\n  const [xColumn, setXColumn] = useState(columnHeaders[0]);\r\n  const [yColumn, setYColumn] = useState(columnHeaders[1]);\r\n\r\n  useEffect(() => {\r\n    if (columnHeaders.length > 1) {\r\n      setXColumn(columnHeaders[0]);\r\n      setYColumn(columnHeaders[1]);\r\n    }\r\n  }, [columnHeaders]);\r\n\r\n  const chartData = {\r\n    labels: data.map(row => row[columnHeaders.indexOf(xColumn)]),\r\n    datasets: [\r\n      {\r\n        label: yColumn,\r\n        data: data.map(row => row[columnHeaders.indexOf(yColumn)]),\r\n        fill: false,\r\n        borderColor: \"#42a5f5\",\r\n        tension: 0.1\r\n      }\r\n    ]\r\n  };\r\n\r\n  const chartDescriptions = {\r\n    \"Line\": `\r\n      Line charts are widely used for visualizing trends over time. They help in understanding patterns and changes in continuous data points. A line chart is ideal for comparing multiple datasets over a common axis, such as time, and is effective for analyzing long-term trends, cyclical patterns, and fluctuations.\r\n      - *Use Cases*: Stock price trends, sales performance, weather patterns, economic indicators.\r\n      - *Advantages*: Easy to interpret trends, clear representation of changes over time, useful for forecasting.\r\n      - *Limitations*: Can become cluttered when there are too many lines, not ideal for non-continuous data.\r\n    `,\r\n    \"Bar\": `\r\n      Bar charts are effective for comparing discrete categories or groups. They provide a clear visual representation of the quantity of items in each category. A bar chart is ideal for representing data where the categories are distinct and non-overlapping.\r\n      - *Use Cases*: Comparing sales figures by region, evaluating the popularity of products, showing demographic breakdowns.\r\n      - *Advantages*: Easy to compare categories, great for visualizing differences, works well with both small and large datasets.\r\n      - *Limitations*: Not suitable for continuous data, bars can be misinterpreted if not scaled properly.\r\n    `,\r\n    \"Radar\": `\r\n      Radar charts are used to compare multiple variables across a common baseline. They are particularly effective for evaluating multiple metrics that need to be compared against each other. The chartâ€™s radial layout allows for a visually engaging display of multi-dimensional data.\r\n      - *Use Cases*: Comparing product features, performance metrics, skills assessment.\r\n      - *Advantages*: Excellent for showing relative strengths and weaknesses, easy to compare multiple categories at once.\r\n      - *Limitations*: Can become difficult to read if too many data points are added, not ideal for complex datasets with too many variables.\r\n    `,\r\n    \"Doughnut\": `\r\n      Doughnut charts are similar to pie charts but with a central blank space, making them a more aesthetically pleasing option for displaying parts of a whole. They are useful for showing proportional data but allow for more space in the center for additional information or labels.\r\n      - *Use Cases*: Market share representation, survey results, budget allocation.\r\n      - *Advantages*: Visually attractive, great for showing proportions in a compact space, customizable with central labels or percentages.\r\n      - *Limitations*: Can become unclear with too many slices, difficult to compare small differences between values.\r\n    `,\r\n    \"Pie\": `\r\n      Pie charts are used to represent parts of a whole, typically as percentages of 100%. They are ideal for showing the composition of data in a way that is easily interpretable. However, they should only be used when there are a limited number of categories (typically fewer than 6) for clarity.\r\n      - *Use Cases*: Showing market share, budget distribution, survey results.\r\n      - *Advantages*: Simple and intuitive, effective for small numbers of categories.\r\n      - *Limitations*: Becomes hard to interpret with too many categories, less effective when comparing similar-sized sections.\r\n    `,\r\n    \"Scatter\": `\r\n      Scatter charts are ideal for visualizing the relationship between two continuous variables. They display data points on a two-dimensional axis and can reveal correlations, clusters, and trends.\r\n      - *Use Cases*: Correlation analysis, relationship between income and age, studying customer behavior.\r\n      - *Advantages*: Excellent for visualizing correlations, patterns, and outliers in data.\r\n      - *Limitations*: Cannot be used for categorical data, difficult to interpret with too many data points.\r\n    `,\r\n    \"Bubble\": `\r\n      Bubble charts are an extension of scatter plots that add a third dimension using the size of the bubbles. This allows for more complex data visualization and can represent an additional variable alongside the x and y axes.\r\n      - *Use Cases*: Financial data analysis (e.g., revenue vs. cost vs. profit), population growth vs. income vs. education levels.\r\n      - *Advantages*: Allows visualization of three variables in a single chart, great for representing complex datasets.\r\n      - *Limitations*: Can become crowded with too many data points, requires careful scaling of bubble sizes.\r\n    `,\r\n    \"PolarArea\": `\r\n      Polar Area charts are similar to pie charts but utilize a polar coordinate system. They are ideal for showing quantities of data in relation to different categories on a circular scale. The area of each sector is proportional to the value it represents.\r\n      - *Use Cases*: Comparing angular data, weather statistics (wind direction vs. speed), directional metrics.\r\n      - *Advantages*: Effective for displaying cyclic data or quantities that change with angles, visually appealing.\r\n      - *Limitations*: Can be hard to read with too many categories, not suitable for large datasets or continuous data.\r\n    `\r\n  };\r\n\r\n  const renderChart = () => {\r\n    switch (chartType) {\r\n      case \"Line\":\r\n        return <Line data={chartData} />;\r\n      case \"Bar\":\r\n        return <Bar data={chartData} />;\r\n      case \"Radar\":\r\n        return <Radar data={chartData} />;\r\n      case \"Doughnut\":\r\n        return <Doughnut data={chartData} />;\r\n      case \"Pie\":\r\n        return <Pie data={chartData} />;\r\n      case \"Scatter\":\r\n        return <Scatter data={chartData} />;\r\n      case \"Bubble\":\r\n        return <Bubble data={chartData} />;\r\n      case \"PolarArea\":\r\n        return <PolarArea data={chartData} />;\r\n      default:\r\n        return <Line data={chartData} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <div className=\"controls\">\r\n        <select\r\n          id=\"chartType\"\r\n          value={chartType}\r\n          onChange={(e) => setChartType(e.target.value)}\r\n        >\r\n          <option value=\"Line\">Line Chart</option>\r\n          <option value=\"Bar\">Bar Chart</option>\r\n          <option value=\"Radar\">Radar Chart</option>\r\n          <option value=\"Doughnut\">Doughnut Chart</option>\r\n          <option value=\"Pie\">Pie Chart</option>\r\n          <option value=\"Scatter\">Scatter Chart</option>\r\n          <option value=\"Bubble\">Bubble Chart</option>\r\n          <option value=\"PolarArea\">Polar Area Chart</option>\r\n        </select>\r\n\r\n        <select\r\n          id=\"xColumn\"\r\n          value={xColumn}\r\n          onChange={(e) => setXColumn(e.target.value)}\r\n        >\r\n          {columnHeaders.map((header, index) => (\r\n            <option key={index} value={header}>\r\n              {header}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          id=\"yColumn\"\r\n          value={yColumn}\r\n          onChange={(e) => setYColumn(e.target.value)}\r\n        >\r\n          {columnHeaders.map((header, index) => (\r\n            <option key={index} value={header}>\r\n              {header}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"chart-wrapper\">\r\n        {renderChart()}\r\n      </div>\r\n\r\n      {/* Display Chart Description */}\r\n      <div className=\"chart-description\">\r\n        <p>{chartDescriptions[chartType]}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartGenerator;\r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}