{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [statistics, setStatistics] = useState({});\n  const [chartData, setChartData] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setStatistics({});\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    if (column) {\n      const colIndex = columnHeaders.indexOf(column);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n      const meanVal = ss.mean(columnData);\n      const stdDevVal = ss.standardDeviation(columnData);\n      const medianVal = ss.median(columnData);\n      const varianceVal = ss.variance(columnData);\n      setStatistics({\n        mean: meanVal.toFixed(2),\n        median: medianVal.toFixed(2),\n        variance: varianceVal.toFixed(2),\n        stdDev: stdDevVal.toFixed(2)\n      });\n    }\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n\n      // Generate chart data for the selected distribution\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      switch (distribution) {\n        case \"Normal\":\n          distributionData = columnData.map(val => ss.zScore(val, ss.mean(columnData), ss.standardDeviation(columnData)));\n          break;\n        case \"Exponential\":\n          distributionData = columnData.map(val => Math.exp(-val / ss.mean(columnData)));\n          break;\n        case \"Uniform\":\n          distributionData = columnData.map(val => 1 / (Math.max(...columnData) - Math.min(...columnData)));\n          break;\n        case \"Gamma\":\n          distributionData = columnData.map(val => ss.gammaDistribution(val, ss.mean(columnData), ss.standardDeviation(columnData)));\n          break;\n        case \"Log-Normal\":\n          distributionData = columnData.map(val => ss.logNormal(val, ss.mean(columnData), ss.standardDeviation(columnData)));\n          break;\n        case \"Beta\":\n          distributionData = columnData.map(val => ss.betaDistribution(val, 2, 5)); // Arbitrary alpha and beta values\n          break;\n        case \"Binomial\":\n          distributionData = columnData.map(val => ss.binomialDistribution(val, Math.max(...columnData), 0.5));\n          break;\n        case \"Poisson\":\n          distributionData = columnData.map(val => ss.poissonDistribution(val, ss.mean(columnData)));\n          break;\n        case \"Geometric\":\n          distributionData = columnData.map(val => ss.geometricMean([val]));\n          break;\n        default:\n          break;\n      }\n      setChartData({\n        labels,\n        datasets: [{\n          label: `${selectedDistribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleColumnChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Distribution Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Continuous\",\n              children: \"Continuous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Discrete\",\n              children: \"Discrete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Continuous Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Discrete Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 19\n            }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: `${selectedDistribution} Distribution for ${selectedColumn}`\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"rsi8wIUyYavgIBX7evvdGTNBlLE=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","statistics","setStatistics","chartData","setChartData","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","meanVal","mean","stdDevVal","standardDeviation","medianVal","median","varianceVal","variance","toFixed","stdDev","handleDistributionTypeChange","handleDistributionChange","distribution","labels","Array","from","_","index","distributionData","zScore","Math","exp","max","min","gammaDistribution","logNormal","betaDistribution","binomialDistribution","poissonDistribution","geometricMean","datasets","label","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","dist","options","responsive","plugins","title","display","text","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\r\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [statistics, setStatistics] = useState({});\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"\r\n  ];\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\"\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setStatistics({});\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n    \r\n    if (column) {\r\n      const colIndex = columnHeaders.indexOf(column);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n\r\n      if (columnData.length === 0) return;\r\n\r\n      const meanVal = ss.mean(columnData);\r\n      const stdDevVal = ss.standardDeviation(columnData);\r\n      const medianVal = ss.median(columnData);\r\n      const varianceVal = ss.variance(columnData);\r\n\r\n      setStatistics({\r\n        mean: meanVal.toFixed(2),\r\n        median: medianVal.toFixed(2),\r\n        variance: varianceVal.toFixed(2),\r\n        stdDev: stdDevVal.toFixed(2),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n\r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n\r\n      if (columnData.length === 0) return;\r\n\r\n      // Generate chart data for the selected distribution\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n\r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          distributionData = columnData.map((val) => ss.zScore(val, ss.mean(columnData), ss.standardDeviation(columnData)));\r\n          break;\r\n        case \"Exponential\":\r\n          distributionData = columnData.map((val) => Math.exp(-val / ss.mean(columnData)));\r\n          break;\r\n        case \"Uniform\":\r\n          distributionData = columnData.map((val) => 1 / (Math.max(...columnData) - Math.min(...columnData)));\r\n          break;\r\n        case \"Gamma\":\r\n          distributionData = columnData.map((val) => ss.gammaDistribution(val, ss.mean(columnData), ss.standardDeviation(columnData)));\r\n          break;\r\n        case \"Log-Normal\":\r\n          distributionData = columnData.map((val) => ss.logNormal(val, ss.mean(columnData), ss.standardDeviation(columnData)));\r\n          break;\r\n        case \"Beta\":\r\n          distributionData = columnData.map((val) => ss.betaDistribution(val, 2, 5));  // Arbitrary alpha and beta values\r\n          break;\r\n        case \"Binomial\":\r\n          distributionData = columnData.map((val) => ss.binomialDistribution(val, Math.max(...columnData), 0.5));\r\n          break;\r\n        case \"Poisson\":\r\n          distributionData = columnData.map((val) => ss.poissonDistribution(val, ss.mean(columnData)));\r\n          break;\r\n        case \"Geometric\":\r\n          distributionData = columnData.map((val) => ss.geometricMean([val]));\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      setChartData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: `${selectedDistribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <div className=\"select-group\">\r\n          <label>Select Column:</label>\r\n          <select onChange={handleColumnChange}>\r\n            <option value=\"\">Select a column</option>\r\n            {columnHeaders.map((header) => (\r\n              <option key={header} value={header}>\r\n                {header}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <div className=\"select-group\">\r\n              <label>Select Distribution Type:</label>\r\n              <select onChange={handleDistributionTypeChange}>\r\n                <option value=\"\">Select Type</option>\r\n                <option value=\"Continuous\">Continuous</option>\r\n                <option value=\"Discrete\">Discrete</option>\r\n              </select>\r\n            </div>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Continuous Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {continuousDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Discrete Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {discreteDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {chartData && (\r\n        <div className=\"chart-container\">\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              plugins: { title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` } },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}