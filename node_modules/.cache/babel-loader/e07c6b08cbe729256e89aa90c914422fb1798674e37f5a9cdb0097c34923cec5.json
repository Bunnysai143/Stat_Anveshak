{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const [accuracy, setAccuracy] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    setAccuracy(null);\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n    setAccuracy(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      let calculatePDF;\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          calculatePDF = val => 1 / (stddev * Math.sqrt(2 * Math.PI)) * Math.exp(-Math.pow(val - mean, 2) / (2 * Math.pow(stddev, 2)));\n          distributionData = columnData.map(calculatePDF);\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          calculatePDF = val => lambda * Math.exp(-lambda * val);\n          distributionData = columnData.map(calculatePDF);\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          calculatePDF = val => val >= min && val <= max ? 1 / (max - min) : 0;\n          distributionData = columnData.map(calculatePDF);\n          break;\n        case \"Gamma\":\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\n          calculatePDF = val => jStat.gamma.pdf(val, alphaGamma, betaGamma);\n          distributionData = columnData.map(calculatePDF);\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStddev = Math.log(ss.standardDeviation(columnData));\n          calculatePDF = val => 1 / (val * logStddev * Math.sqrt(2 * Math.PI)) * Math.exp(-Math.pow(Math.log(val) - logMean, 2) / (2 * Math.pow(logStddev, 2)));\n          distributionData = columnData.map(calculatePDF);\n          break;\n        case \"Beta\":\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          calculatePDF = val => jStat.beta.pdf(val, alphaBeta, betaBeta);\n          distributionData = columnData.map(calculatePDF);\n          break;\n        default:\n          break;\n      }\n      const mse = ss.mean(columnData.map((val, index) => Math.pow(val - distributionData[index], 2)));\n      const rSquared = 1 - mse / ss.variance(columnData);\n      setAccuracy({\n        mse,\n        rSquared\n      });\n      setChartData({\n        labels,\n        datasets: [{\n          label: `${selectedDistribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleColumnChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Distribution Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Continuous\",\n              children: \"Continuous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Discrete\",\n              children: \"Discrete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Continuous Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Discrete Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 19\n            }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: `${selectedDistribution} Distribution for ${selectedColumn}`\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), accuracy && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accuracy-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Accuracy Metrics:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"MSE: \", accuracy.mse.toFixed(4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"R\\xB2: \", accuracy.rSquared.toFixed(4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"6sIEs+CcwGtKrHkocZCkwPJzDNw=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","accuracy","setAccuracy","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","handleDistributionTypeChange","handleDistributionChange","distribution","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","labels","Array","from","_","index","distributionData","calculatePDF","mean","stddev","standardDeviation","Math","sqrt","PI","exp","pow","lambda","min","max","alphaGamma","betaGamma","gamma","pdf","logMean","log","logStddev","alphaBeta","betaBeta","beta","mse","rSquared","variance","datasets","label","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","dist","options","responsive","plugins","title","display","text","toFixed","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\r\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n  const [accuracy, setAccuracy] = useState(null);\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\",\r\n    \"Exponential\",\r\n    \"Uniform\",\r\n    \"Gamma\",\r\n    \"Log-Normal\",\r\n    \"Beta\",\r\n  ];\r\n  const discreteDistributions = [\r\n    \"Binomial\",\r\n    \"Poisson\",\r\n    \"Geometric\",\r\n    \"Bernoulli\",\r\n    \"Negative Binomial\",\r\n    \"Hypergeometric\",\r\n    \"Multinomial\",\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n\r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n\r\n      if (columnData.length === 0) return;\r\n\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n      let calculatePDF;\r\n\r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          calculatePDF = (val) => (1 / (stddev * Math.sqrt(2 * Math.PI))) * Math.exp(-Math.pow(val - mean, 2) / (2 * Math.pow(stddev, 2)));\r\n          distributionData = columnData.map(calculatePDF);\r\n          break;\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          calculatePDF = (val) => lambda * Math.exp(-lambda * val);\r\n          distributionData = columnData.map(calculatePDF);\r\n          break;\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          calculatePDF = (val) => (val >= min && val <= max ? 1 / (max - min) : 0);\r\n          distributionData = columnData.map(calculatePDF);\r\n          break;\r\n        case \"Gamma\":\r\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\r\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\r\n          calculatePDF = (val) => jStat.gamma.pdf(val, alphaGamma, betaGamma);\r\n          distributionData = columnData.map(calculatePDF);\r\n          break;\r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStddev = Math.log(ss.standardDeviation(columnData));\r\n          calculatePDF = (val) => (1 / (val * logStddev * Math.sqrt(2 * Math.PI))) * Math.exp(-Math.pow(Math.log(val) - logMean, 2) / (2 * Math.pow(logStddev, 2)));\r\n          distributionData = columnData.map(calculatePDF);\r\n          break;\r\n        case \"Beta\":\r\n          const alphaBeta = ss.mean(columnData) * ((ss.mean(columnData) * (1 - ss.mean(columnData))) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          const betaBeta = (1 - ss.mean(columnData)) * ((ss.mean(columnData) * (1 - ss.mean(columnData))) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          calculatePDF = (val) => jStat.beta.pdf(val, alphaBeta, betaBeta);\r\n          distributionData = columnData.map(calculatePDF);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const mse = ss.mean(columnData.map((val, index) => Math.pow(val - distributionData[index], 2)));\r\n      const rSquared = 1 - mse / ss.variance(columnData);\r\n\r\n      setAccuracy({ mse, rSquared });\r\n      setChartData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: `${selectedDistribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <div className=\"select-group\">\r\n          <label>Select Column:</label>\r\n          <select onChange={handleColumnChange}>\r\n            <option value=\"\">Select a column</option>\r\n            {columnHeaders.map((header) => (\r\n              <option key={header} value={header}>\r\n                {header}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <div className=\"select-group\">\r\n              <label>Select Distribution Type:</label>\r\n              <select onChange={handleDistributionTypeChange}>\r\n                <option value=\"\">Select Type</option>\r\n                <option value=\"Continuous\">Continuous</option>\r\n                <option value=\"Discrete\">Discrete</option>\r\n              </select>\r\n            </div>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Continuous Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {continuousDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Discrete Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {discreteDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {chartData && (\r\n        <div className=\"chart-container\">\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              plugins: { title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` } },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {accuracy && (\r\n        <div className=\"accuracy-info\">\r\n          <h4>Accuracy Metrics:</h4>\r\n          <p>MSE: {accuracy.mse.toFixed(4)}</p>\r\n          <p>R²: {accuracy.rSquared.toFixed(4)}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}