{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport \"../styles/DistributionAnalysis.css\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const [accuracy, setAccuracy] = useState(null);\n  const [params, setParams] = useState({});\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\", \"Weibull\", \"Chi-Square\", \"Cauchy\", \"T-Distribution\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    setAccuracy(null);\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n    setAccuracy(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      let calculatedAccuracy = 0;\n      let chartType = \"line\";\n      const dynamicParams = {};\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          dynamicParams.mean = mean;\n          dynamicParams.stddev = stddev;\n          distributionData = columnData.map(val => jStat.normal.pdf(val, mean, stddev));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"normal\", mean, stddev);\n          chartType = \"line\"; // bell curve\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          dynamicParams.lambda = lambda;\n          distributionData = columnData.map(val => jStat.exponential.pdf(val, lambda));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"exponential\", lambda);\n          chartType = \"line\"; // exponential decay curve\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          dynamicParams.min = min;\n          dynamicParams.max = max;\n          distributionData = columnData.map(() => 1 / (max - min));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"uniform\", min, max);\n          chartType = \"line\"; // uniform distribution curve\n          break;\n        case \"Gamma\":\n          const shape = 2; // dynamic input for shape\n          const scale = ss.mean(columnData) / shape;\n          dynamicParams.shape = shape;\n          dynamicParams.scale = scale;\n          distributionData = columnData.map(val => jStat.gamma.pdf(val, shape, scale));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"gamma\", shape, scale);\n          chartType = \"line\"; // gamma distribution curve\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStdDev = Math.log(ss.standardDeviation(columnData));\n          dynamicParams.logMean = logMean;\n          dynamicParams.logStdDev = logStdDev;\n          distributionData = columnData.map(val => jStat.lognormal.pdf(val, logMean, logStdDev));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"lognormal\", logMean, logStdDev);\n          chartType = \"line\"; // log-normal distribution curve\n          break;\n        case \"Beta\":\n          const alpha = 2; // dynamic input for alpha\n          const beta = 5; // dynamic input for beta\n          dynamicParams.alpha = alpha;\n          dynamicParams.beta = beta;\n          distributionData = columnData.map(val => jStat.beta.pdf(val, alpha, beta));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"beta\", alpha, beta);\n          chartType = \"line\"; // beta distribution curve\n          break;\n        case \"Weibull\":\n          const weibullScale = ss.mean(columnData);\n          const weibullShape = 1.5; // dynamic input for shape\n          dynamicParams.weibullShape = weibullShape;\n          dynamicParams.weibullScale = weibullScale;\n          distributionData = columnData.map(val => jStat.weibull.pdf(val, weibullShape, weibullScale));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"weibull\", weibullShape, weibullScale);\n          chartType = \"line\"; // weibull distribution curve\n          break;\n        case \"Chi-Square\":\n          const df = columnData.length - 1; // degrees of freedom\n          dynamicParams.df = df;\n          distributionData = columnData.map(val => jStat.chisquare.pdf(val, df));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"chisquare\", df);\n          chartType = \"line\"; // chi-square distribution curve\n          break;\n        case \"Cauchy\":\n          const location = ss.mean(columnData);\n          const scaleParam = ss.standardDeviation(columnData);\n          dynamicParams.location = location;\n          dynamicParams.scaleParam = scaleParam;\n          distributionData = columnData.map(val => jStat.cauchy.pdf(val, location, scaleParam));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"cauchy\", location, scaleParam);\n          chartType = \"line\"; // cauchy distribution curve\n          break;\n        case \"T-Distribution\":\n          const dof = columnData.length - 1; // degrees of freedom\n          dynamicParams.dof = dof;\n          distributionData = columnData.map(val => jStat.studentt.pdf(val, dof));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"studentt\", dof);\n          chartType = \"line\"; // t-distribution curve\n          break;\n\n        // Discrete distributions\n        case \"Binomial\":\n          const trials = 10; // dynamic input for trials\n          const probability = 0.5; // dynamic input for probability\n          dynamicParams.trials = trials;\n          dynamicParams.probability = probability;\n          distributionData = columnData.map(val => ss.binomialDistribution(trials, probability)[val] || 0);\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"binomial\", trials, probability);\n          chartType = \"bar\"; // binomial histogram\n          break;\n        case \"Poisson\":\n          const poissonLambda = ss.mean(columnData);\n          dynamicParams.poissonLambda = poissonLambda;\n          distributionData = columnData.map(val => ss.poissonDistribution(poissonLambda)[val] || 0);\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"poisson\", poissonLambda);\n          chartType = \"bar\"; // Poisson histogram\n          break;\n        case \"Geometric\":\n          const geomP = 1 / ss.mean(columnData); // dynamic input for probability\n          dynamicParams.geomP = geomP;\n          distributionData = columnData.map(val => geomP * Math.pow(1 - geomP, val - 1));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"geometric\", geomP);\n          chartType = \"bar\"; // geometric distribution histogram\n          break;\n        case \"Bernoulli\":\n          const bernP = ss.mean(columnData); // dynamic input for probability\n          dynamicParams.bernP = bernP;\n          distributionData = columnData.map(val => val === 0 ? 1 - bernP : bernP);\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"bernoulli\", bernP);\n          chartType = \"bar\"; // bernoulli distribution histogram\n          break;\n        case \"Negative Binomial\":\n          const negR = 5; // dynamic input for number of successes\n          const negP = 0.5; // dynamic input for probability\n          dynamicParams.negR = negR;\n          dynamicParams.negP = negP;\n          distributionData = columnData.map(val => jStat.negbinom.pdf(val, negR, negP));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"negbinom\", negR, negP);\n          chartType = \"bar\"; // negative binomial histogram\n          break;\n        case \"Hypergeometric\":\n          const N = 50; // dynamic input for population size\n          const K = 20; // dynamic input for number of success states\n          const n = 10; // dynamic input for sample size\n          dynamicParams.N = N;\n          dynamicParams.K = K;\n          dynamicParams.n = n;\n          distributionData = columnData.map(val => jStat.hypergeometric.pdf(val, N, K, n));\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"hypergeometric\", N, K, n);\n          chartType = \"bar\"; // hypergeometric distribution histogram\n          break;\n        default:\n          break;\n      }\n      setParams(dynamicParams);\n      setAccuracy(calculatedAccuracy);\n      setChartData({\n        labels: labels,\n        datasets: [{\n          label: `${distribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  const calculateLogLikelihood = (data, distType, ...params) => {\n    let logLikelihood = 0;\n    switch (distType) {\n      case \"normal\":\n        const [mean, stddev] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.normal.pdf(x, mean, stddev)), 0);\n        break;\n      case \"exponential\":\n        const [lambda] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.exponential.pdf(x, lambda)), 0);\n        break;\n      case \"uniform\":\n        const [min, max] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(1 / (max - min)), 0);\n        break;\n      case \"gamma\":\n        const [shape, scale] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.gamma.pdf(x, shape, scale)), 0);\n        break;\n      case \"lognormal\":\n        const [logMean, logStdDev] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.lognormal.pdf(x, logMean, logStdDev)), 0);\n        break;\n      case \"beta\":\n        const [alpha, beta] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.beta.pdf(x, alpha, beta)), 0);\n        break;\n      case \"weibull\":\n        const [weibullShape, weibullScale] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.weibull.pdf(x, weibullShape, weibullScale)), 0);\n        break;\n      case \"chisquare\":\n        const [df] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.chisquare.pdf(x, df)), 0);\n        break;\n      case \"poisson\":\n        const [poissonLambda] = params;\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(ss.poissonDistribution(poissonLambda)[x] || 0), 0);\n        break;\n      // More cases for discrete distributions if needed\n      default:\n        break;\n    }\n    return logLikelihood.toFixed(4);\n  };\n  const renderChart = () => {\n    const options = {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: `${selectedDistribution} Distribution for ${selectedColumn}`\n        }\n      }\n    };\n    return chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: selectedDistribution === \"Normal\" || selectedDistribution === \"Exponential\" || selectedDistribution === \"Gamma\" || selectedDistribution === \"Log-Normal\" || selectedDistribution === \"Beta\" || selectedDistribution === \"Weibull\" || selectedDistribution === \"Chi-Square\" || selectedDistribution === \"Cauchy\" || selectedDistribution === \"T-Distribution\" ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this) : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Column:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleColumnChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: header,\n          children: header\n        }, header, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Distribution Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionTypeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a distribution type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Continuous\",\n            children: \"Continuous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Discrete\",\n            children: \"Discrete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedDistributionType && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Distribution:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), (selectedDistributionType === \"Continuous\" ? continuousDistributions : discreteDistributions).map(distribution => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: distribution,\n            children: distribution\n          }, distribution, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), accuracy && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: accuracy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 20\n    }, this), renderChart()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"yBZ94zJWIcYmrrvNFeJ8NfAF2GM=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Bar","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","accuracy","setAccuracy","params","setParams","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","handleDistributionTypeChange","handleDistributionChange","distribution","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","labels","Array","from","_","index","distributionData","calculatedAccuracy","chartType","dynamicParams","mean","stddev","standardDeviation","normal","pdf","calculateLogLikelihood","lambda","exponential","min","Math","max","shape","scale","gamma","logMean","log","logStdDev","lognormal","alpha","beta","weibullScale","weibullShape","weibull","df","chisquare","location","scaleParam","cauchy","dof","studentt","trials","probability","binomialDistribution","poissonLambda","poissonDistribution","geomP","pow","bernP","negR","negP","negbinom","N","K","n","hypergeometric","datasets","label","fill","borderColor","tension","distType","logLikelihood","reduce","sum","x","toFixed","renderChart","options","responsive","plugins","title","display","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport \"../styles/DistributionAnalysis.css\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport jStat from \"jstat\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n  const [accuracy, setAccuracy] = useState(null);\r\n  const [params, setParams] = useState({});\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\", \"Weibull\", \"Chi-Square\", \"Cauchy\", \"T-Distribution\"\r\n  ];\r\n\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n\r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data.map((row) => parseFloat(row[colIndex])).filter((val) => !isNaN(val));\r\n      if (columnData.length === 0) return;\r\n\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n      let calculatedAccuracy = 0;\r\n      let chartType = \"line\";\r\n\r\n      const dynamicParams = {};\r\n\r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          dynamicParams.mean = mean;\r\n          dynamicParams.stddev = stddev;\r\n          distributionData = columnData.map((val) => jStat.normal.pdf(val, mean, stddev));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"normal\", mean, stddev);\r\n          chartType = \"line\"; // bell curve\r\n          break;\r\n\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          dynamicParams.lambda = lambda;\r\n          distributionData = columnData.map((val) => jStat.exponential.pdf(val, lambda));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"exponential\", lambda);\r\n          chartType = \"line\"; // exponential decay curve\r\n          break;\r\n\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          dynamicParams.min = min;\r\n          dynamicParams.max = max;\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"uniform\", min, max);\r\n          chartType = \"line\"; // uniform distribution curve\r\n          break;\r\n\r\n        case \"Gamma\":\r\n          const shape = 2; // dynamic input for shape\r\n          const scale = ss.mean(columnData) / shape;\r\n          dynamicParams.shape = shape;\r\n          dynamicParams.scale = scale;\r\n          distributionData = columnData.map((val) => jStat.gamma.pdf(val, shape, scale));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"gamma\", shape, scale);\r\n          chartType = \"line\"; // gamma distribution curve\r\n          break;\r\n\r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStdDev = Math.log(ss.standardDeviation(columnData));\r\n          dynamicParams.logMean = logMean;\r\n          dynamicParams.logStdDev = logStdDev;\r\n          distributionData = columnData.map((val) => jStat.lognormal.pdf(val, logMean, logStdDev));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"lognormal\", logMean, logStdDev);\r\n          chartType = \"line\"; // log-normal distribution curve\r\n          break;\r\n\r\n        case \"Beta\":\r\n          const alpha = 2; // dynamic input for alpha\r\n          const beta = 5; // dynamic input for beta\r\n          dynamicParams.alpha = alpha;\r\n          dynamicParams.beta = beta;\r\n          distributionData = columnData.map((val) => jStat.beta.pdf(val, alpha, beta));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"beta\", alpha, beta);\r\n          chartType = \"line\"; // beta distribution curve\r\n          break;\r\n\r\n        case \"Weibull\":\r\n          const weibullScale = ss.mean(columnData);\r\n          const weibullShape = 1.5; // dynamic input for shape\r\n          dynamicParams.weibullShape = weibullShape;\r\n          dynamicParams.weibullScale = weibullScale;\r\n          distributionData = columnData.map((val) => jStat.weibull.pdf(val, weibullShape, weibullScale));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"weibull\", weibullShape, weibullScale);\r\n          chartType = \"line\"; // weibull distribution curve\r\n          break;\r\n\r\n        case \"Chi-Square\":\r\n          const df = columnData.length - 1; // degrees of freedom\r\n          dynamicParams.df = df;\r\n          distributionData = columnData.map((val) => jStat.chisquare.pdf(val, df));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"chisquare\", df);\r\n          chartType = \"line\"; // chi-square distribution curve\r\n          break;\r\n\r\n        case \"Cauchy\":\r\n          const location = ss.mean(columnData);\r\n          const scaleParam = ss.standardDeviation(columnData);\r\n          dynamicParams.location = location;\r\n          dynamicParams.scaleParam = scaleParam;\r\n          distributionData = columnData.map((val) => jStat.cauchy.pdf(val, location, scaleParam));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"cauchy\", location, scaleParam);\r\n          chartType = \"line\"; // cauchy distribution curve\r\n          break;\r\n\r\n        case \"T-Distribution\":\r\n          const dof = columnData.length - 1; // degrees of freedom\r\n          dynamicParams.dof = dof;\r\n          distributionData = columnData.map((val) => jStat.studentt.pdf(val, dof));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"studentt\", dof);\r\n          chartType = \"line\"; // t-distribution curve\r\n          break;\r\n\r\n        // Discrete distributions\r\n        case \"Binomial\":\r\n          const trials = 10; // dynamic input for trials\r\n          const probability = 0.5; // dynamic input for probability\r\n          dynamicParams.trials = trials;\r\n          dynamicParams.probability = probability;\r\n          distributionData = columnData.map((val) => ss.binomialDistribution(trials, probability)[val] || 0);\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"binomial\", trials, probability);\r\n          chartType = \"bar\"; // binomial histogram\r\n          break;\r\n\r\n        case \"Poisson\":\r\n          const poissonLambda = ss.mean(columnData);\r\n          dynamicParams.poissonLambda = poissonLambda;\r\n          distributionData = columnData.map((val) => ss.poissonDistribution(poissonLambda)[val] || 0);\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"poisson\", poissonLambda);\r\n          chartType = \"bar\"; // Poisson histogram\r\n          break;\r\n\r\n        case \"Geometric\":\r\n          const geomP = 1 / ss.mean(columnData); // dynamic input for probability\r\n          dynamicParams.geomP = geomP;\r\n          distributionData = columnData.map((val) => geomP * Math.pow(1 - geomP, val - 1));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"geometric\", geomP);\r\n          chartType = \"bar\"; // geometric distribution histogram\r\n          break;\r\n\r\n        case \"Bernoulli\":\r\n          const bernP = ss.mean(columnData); // dynamic input for probability\r\n          dynamicParams.bernP = bernP;\r\n          distributionData = columnData.map((val) => (val === 0 ? 1 - bernP : bernP));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"bernoulli\", bernP);\r\n          chartType = \"bar\"; // bernoulli distribution histogram\r\n          break;\r\n\r\n        case \"Negative Binomial\":\r\n          const negR = 5; // dynamic input for number of successes\r\n          const negP = 0.5; // dynamic input for probability\r\n          dynamicParams.negR = negR;\r\n          dynamicParams.negP = negP;\r\n          distributionData = columnData.map((val) => jStat.negbinom.pdf(val, negR, negP));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"negbinom\", negR, negP);\r\n          chartType = \"bar\"; // negative binomial histogram\r\n          break;\r\n\r\n        case \"Hypergeometric\":\r\n          const N = 50; // dynamic input for population size\r\n          const K = 20; // dynamic input for number of success states\r\n          const n = 10; // dynamic input for sample size\r\n          dynamicParams.N = N;\r\n          dynamicParams.K = K;\r\n          dynamicParams.n = n;\r\n          distributionData = columnData.map((val) => jStat.hypergeometric.pdf(val, N, K, n));\r\n          calculatedAccuracy = \"Goodness of fit: \" + calculateLogLikelihood(columnData, \"hypergeometric\", N, K, n);\r\n          chartType = \"bar\"; // hypergeometric distribution histogram\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      setParams(dynamicParams);\r\n      setAccuracy(calculatedAccuracy);\r\n      setChartData({\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: `${distribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  const calculateLogLikelihood = (data, distType, ...params) => {\r\n    let logLikelihood = 0;\r\n    switch (distType) {\r\n      case \"normal\":\r\n        const [mean, stddev] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.normal.pdf(x, mean, stddev)), 0);\r\n        break;\r\n      case \"exponential\":\r\n        const [lambda] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.exponential.pdf(x, lambda)), 0);\r\n        break;\r\n      case \"uniform\":\r\n        const [min, max] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(1 / (max - min)), 0);\r\n        break;\r\n      case \"gamma\":\r\n        const [shape, scale] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.gamma.pdf(x, shape, scale)), 0);\r\n        break;\r\n      case \"lognormal\":\r\n        const [logMean, logStdDev] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.lognormal.pdf(x, logMean, logStdDev)), 0);\r\n        break;\r\n      case \"beta\":\r\n        const [alpha, beta] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.beta.pdf(x, alpha, beta)), 0);\r\n        break;\r\n      case \"weibull\":\r\n        const [weibullShape, weibullScale] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.weibull.pdf(x, weibullShape, weibullScale)), 0);\r\n        break;\r\n      case \"chisquare\":\r\n        const [df] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(jStat.chisquare.pdf(x, df)), 0);\r\n        break;\r\n      case \"poisson\":\r\n        const [poissonLambda] = params;\r\n        logLikelihood = data.reduce((sum, x) => sum + Math.log(ss.poissonDistribution(poissonLambda)[x] || 0), 0);\r\n        break;\r\n      // More cases for discrete distributions if needed\r\n      default:\r\n        break;\r\n    }\r\n    return logLikelihood.toFixed(4);\r\n  };\r\n\r\n  const renderChart = () => {\r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` },\r\n      },\r\n    };\r\n\r\n    return chartData ? (\r\n      <div className=\"chart-container\">\r\n        {selectedDistribution === \"Normal\" ||\r\n        selectedDistribution === \"Exponential\" ||\r\n        selectedDistribution === \"Gamma\" ||\r\n        selectedDistribution === \"Log-Normal\" ||\r\n        selectedDistribution === \"Beta\" ||\r\n        selectedDistribution === \"Weibull\" ||\r\n        selectedDistribution === \"Chi-Square\" ||\r\n        selectedDistribution === \"Cauchy\" ||\r\n        selectedDistribution === \"T-Distribution\" ? (\r\n          <Line data={chartData} options={options} />\r\n        ) : (\r\n          <Bar data={chartData} options={options} />\r\n        )}\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <label>Select Column:</label>\r\n        <select onChange={handleColumnChange}>\r\n          <option value=\"\">Select a column</option>\r\n          {columnHeaders.map((header) => (\r\n            <option key={header} value={header}>\r\n              {header}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <label>Select Distribution Type:</label>\r\n            <select onChange={handleDistributionTypeChange}>\r\n              <option value=\"\">Select a distribution type</option>\r\n              <option value=\"Continuous\">Continuous</option>\r\n              <option value=\"Discrete\">Discrete</option>\r\n            </select>\r\n          </>\r\n        )}\r\n\r\n        {selectedDistributionType && (\r\n          <>\r\n            <label>Select Distribution:</label>\r\n            <select onChange={handleDistributionChange}>\r\n              <option value=\"\">Select a distribution</option>\r\n              {(selectedDistributionType === \"Continuous\"\r\n                ? continuousDistributions\r\n                : discreteDistributions\r\n              ).map((distribution) => (\r\n                <option key={distribution} value={distribution}>\r\n                  {distribution}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {accuracy && <p>{accuracy}</p>}\r\n      {renderChart()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}