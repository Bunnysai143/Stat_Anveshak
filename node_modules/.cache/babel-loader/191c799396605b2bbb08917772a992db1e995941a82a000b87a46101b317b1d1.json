{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\nvar kernelCos = require('@stdlib/math-base-special-kernel-cos');\nvar kernelSin = require('@stdlib/math-base-special-kernel-sin');\nvar rempio2 = require('@stdlib/math-base-special-rempio2');\n\n// VARIABLES //\n\n// Scratch array for storing temporary values:\nvar buffer = [0.0, 0.0]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff | 0; // asm type annotation\n\n// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb | 0; // asm type annotation\n\n// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000 | 0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000 | 0; // asm type annotation\n\n// MAIN //\n\n/**\n* Computes the cosine of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine\n*\n* @example\n* var v = cos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = cos( 3.141592653589793/4.0 );\n* // returns ~0.707\n*\n* @example\n* var v = cos( -3.141592653589793/6.0 );\n* // returns ~0.866\n*\n* @example\n* var v = cos( NaN );\n* // returns NaN\n*/\nfunction cos(x) {\n  var ix;\n  var n;\n  ix = getHighWord(x);\n  ix &= HIGH_WORD_ABS_MASK;\n\n  // Case: |x| ~< pi/4\n  if (ix <= HIGH_WORD_PIO4) {\n    // Case: x < 2**-27\n    if (ix < HIGH_WORD_TWO_NEG_27) {\n      return 1.0;\n    }\n    return kernelCos(x, 0.0);\n  }\n  // Case: cos(Inf or NaN) is NaN */\n  if (ix >= HIGH_WORD_EXPONENT_MASK) {\n    return NaN;\n  }\n  // Case: Argument reduction needed...\n  n = rempio2(x, buffer);\n  switch (n & 3) {\n    case 0:\n      return kernelCos(buffer[0], buffer[1]);\n    case 1:\n      return -kernelSin(buffer[0], buffer[1]);\n    case 2:\n      return -kernelCos(buffer[0], buffer[1]);\n    default:\n      return kernelSin(buffer[0], buffer[1]);\n  }\n}\n\n// EXPORTS //\n\nmodule.exports = cos;","map":{"version":3,"names":["getHighWord","require","kernelCos","kernelSin","rempio2","buffer","HIGH_WORD_ABS_MASK","HIGH_WORD_PIO4","HIGH_WORD_TWO_NEG_27","HIGH_WORD_EXPONENT_MASK","cos","x","ix","n","NaN","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-cos/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar kernelCos = require( '@stdlib/math-base-special-kernel-cos' );\nvar kernelSin = require( '@stdlib/math-base-special-kernel-sin' );\nvar rempio2 = require( '@stdlib/math-base-special-rempio2' );\n\n\n// VARIABLES //\n\n// Scratch array for storing temporary values:\nvar buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation\n\n// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the cosine of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine\n*\n* @example\n* var v = cos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = cos( 3.141592653589793/4.0 );\n* // returns ~0.707\n*\n* @example\n* var v = cos( -3.141592653589793/6.0 );\n* // returns ~0.866\n*\n* @example\n* var v = cos( NaN );\n* // returns NaN\n*/\nfunction cos( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= HIGH_WORD_ABS_MASK;\n\n\t// Case: |x| ~< pi/4\n\tif ( ix <= HIGH_WORD_PIO4 ) {\n\t\t// Case: x < 2**-27\n\t\tif ( ix < HIGH_WORD_TWO_NEG_27 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn kernelCos( x, 0.0 );\n\t}\n\t// Case: cos(Inf or NaN) is NaN */\n\tif ( ix >= HIGH_WORD_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Case: Argument reduction needed...\n\tn = rempio2( x, buffer );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tcase 1:\n\t\treturn -kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\tcase 2:\n\t\treturn -kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tdefault:\n\t\treturn kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = cos;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAE,2CAA4C,CAAC;AACxE,IAAIC,SAAS,GAAGD,OAAO,CAAE,sCAAuC,CAAC;AACjE,IAAIE,SAAS,GAAGF,OAAO,CAAE,sCAAuC,CAAC;AACjE,IAAIG,OAAO,GAAGH,OAAO,CAAE,mCAAoC,CAAC;;AAG5D;;AAEA;AACA,IAAII,MAAM,GAAG,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC,CAAC;;AAE3B;AACA,IAAIC,kBAAkB,GAAG,UAAU,GAAC,CAAC,CAAC,CAAC;;AAEvC;AACA,IAAIC,cAAc,GAAG,UAAU,GAAC,CAAC,CAAC,CAAC;;AAEnC;AACA,IAAIC,oBAAoB,GAAG,UAAU,GAAC,CAAC,CAAC,CAAC;;AAEzC;AACA,IAAIC,uBAAuB,GAAG,UAAU,GAAC,CAAC,CAAC,CAAC;;AAG5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAAEC,CAAC,EAAG;EACjB,IAAIC,EAAE;EACN,IAAIC,CAAC;EAELD,EAAE,GAAGZ,WAAW,CAAEW,CAAE,CAAC;EACrBC,EAAE,IAAIN,kBAAkB;;EAExB;EACA,IAAKM,EAAE,IAAIL,cAAc,EAAG;IAC3B;IACA,IAAKK,EAAE,GAAGJ,oBAAoB,EAAG;MAChC,OAAO,GAAG;IACX;IACA,OAAON,SAAS,CAAES,CAAC,EAAE,GAAI,CAAC;EAC3B;EACA;EACA,IAAKC,EAAE,IAAIH,uBAAuB,EAAG;IACpC,OAAOK,GAAG;EACX;EACA;EACAD,CAAC,GAAGT,OAAO,CAAEO,CAAC,EAAEN,MAAO,CAAC;EACxB,QAASQ,CAAC,GAAG,CAAC;IACd,KAAK,CAAC;MACL,OAAOX,SAAS,CAAEG,MAAM,CAAE,CAAC,CAAE,EAAEA,MAAM,CAAE,CAAC,CAAG,CAAC;IAC7C,KAAK,CAAC;MACL,OAAO,CAACF,SAAS,CAAEE,MAAM,CAAE,CAAC,CAAE,EAAEA,MAAM,CAAE,CAAC,CAAG,CAAC;IAC9C,KAAK,CAAC;MACL,OAAO,CAACH,SAAS,CAAEG,MAAM,CAAE,CAAC,CAAE,EAAEA,MAAM,CAAE,CAAC,CAAG,CAAC;IAC9C;MACC,OAAOF,SAAS,CAAEE,MAAM,CAAE,CAAC,CAAE,EAAEA,MAAM,CAAE,CAAC,CAAG,CAAC;EAC7C;AACD;;AAGA;;AAEAU,MAAM,CAACC,OAAO,GAAGN,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}