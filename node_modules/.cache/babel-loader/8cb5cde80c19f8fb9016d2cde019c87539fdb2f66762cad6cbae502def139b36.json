{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\CoreStatistics.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoreStatistics = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const calculateStatistics = column => {\n    const colIndex = columnHeaders.indexOf(column);\n    const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n    if (columnData.length === 0) return {};\n    const min = Math.min(...columnData).toFixed(2);\n    const max = Math.max(...columnData).toFixed(2);\n    const range = (max - min).toFixed(2);\n    const sum = ss.sum(columnData).toFixed(2);\n    const count = columnData.length;\n    return {\n      mean: ss.mean(columnData).toFixed(2),\n      median: ss.median(columnData).toFixed(2),\n      mode: ss.mode(columnData),\n      variance: ss.variance(columnData).toFixed(2),\n      stdDev: ss.standardDeviation(columnData).toFixed(2),\n      range,\n      min,\n      max,\n      sum,\n      count\n    };\n  };\n  const [selectedColumn, setSelectedColumn] = React.useState(\"\");\n  const stats = selectedColumn ? calculateStatistics(selectedColumn) : {};\n  const addStatisticsToData = (data, columnHeaders, selectedColumn, stats) => {\n    const updatedData = data.map(row => {\n      const newRow = [...row];\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      newRow.push(stats.mean);\n      newRow.push(stats.median);\n      newRow.push(stats.mode);\n      newRow.push(stats.variance);\n      newRow.push(stats.stdDev);\n      newRow.push(stats.range);\n      newRow.push(stats.min);\n      newRow.push(stats.max);\n      newRow.push(stats.sum);\n      newRow.push(stats.count);\n      return newRow;\n    });\n    const updatedHeaders = [...columnHeaders, 'Mean', 'Median', 'Mode', 'Variance', 'StdDev', 'Range', 'Minimum', 'Maximum', 'Sum', 'Count'];\n    return {\n      updatedData,\n      updatedHeaders\n    };\n  };\n  const {\n    updatedData,\n    updatedHeaders\n  } = selectedColumn ? addStatisticsToData(data, columnHeaders, selectedColumn, stats) : {\n    updatedData: data,\n    updatedHeaders: columnHeaders\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedColumn(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: header\n      }, header, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 40\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), selectedColumn && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mean: \", stats.mean]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Median: \", stats.median]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mode: \", stats.mode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Variance: \", stats.variance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"StdDev: \", stats.stdDev]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Range: \", stats.range]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Minimum: \", stats.min]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Maximum: \", stats.max]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sum: \", stats.sum]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Count: \", stats.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Updated Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(updatedData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Updated Headers:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(updatedHeaders, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(CoreStatistics, \"J1hSsk4HE20Dez82ZZvrSTvTsKE=\");\n_c = CoreStatistics;\nexport default CoreStatistics;\nvar _c;\n$RefreshReg$(_c, \"CoreStatistics\");","map":{"version":3,"names":["React","ss","jsxDEV","_jsxDEV","CoreStatistics","data","columnHeaders","_s","calculateStatistics","column","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","min","Math","toFixed","max","range","sum","count","mean","median","mode","variance","stdDev","standardDeviation","selectedColumn","setSelectedColumn","useState","stats","addStatisticsToData","updatedData","newRow","push","updatedHeaders","children","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","header","JSON","stringify","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/CoreStatistics.js"],"sourcesContent":["import React from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\n\r\nconst CoreStatistics = ({ data, columnHeaders }) => {\r\n  const calculateStatistics = (column) => {\r\n    const colIndex = columnHeaders.indexOf(column);\r\n    const columnData = data.map((row) => parseFloat(row[colIndex])).filter((val) => !isNaN(val));\r\n    if (columnData.length === 0) return {};\r\n\r\n    const min = Math.min(...columnData).toFixed(2);\r\n    const max = Math.max(...columnData).toFixed(2);\r\n    const range = (max - min).toFixed(2);\r\n    const sum = ss.sum(columnData).toFixed(2);\r\n    const count = columnData.length;\r\n\r\n    return {\r\n      mean: ss.mean(columnData).toFixed(2),\r\n      median: ss.median(columnData).toFixed(2),\r\n      mode: ss.mode(columnData),\r\n      variance: ss.variance(columnData).toFixed(2),\r\n      stdDev: ss.standardDeviation(columnData).toFixed(2),\r\n      range,\r\n      min,\r\n      max,\r\n      sum,\r\n      count\r\n    };\r\n  };\r\n\r\n  const [selectedColumn, setSelectedColumn] = React.useState(\"\");\r\n  const stats = selectedColumn ? calculateStatistics(selectedColumn) : {};\r\n\r\n  const addStatisticsToData = (data, columnHeaders, selectedColumn, stats) => {\r\n    const updatedData = data.map(row => {\r\n      const newRow = [...row];\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n\r\n      newRow.push(stats.mean);\r\n      newRow.push(stats.median);\r\n      newRow.push(stats.mode);\r\n      newRow.push(stats.variance);\r\n      newRow.push(stats.stdDev);\r\n      newRow.push(stats.range);\r\n      newRow.push(stats.min);\r\n      newRow.push(stats.max);\r\n      newRow.push(stats.sum);\r\n      newRow.push(stats.count);\r\n\r\n      return newRow;\r\n    });\r\n\r\n    const updatedHeaders = [\r\n      ...columnHeaders, \r\n      'Mean', 'Median', 'Mode', 'Variance', 'StdDev',\r\n      'Range', 'Minimum', 'Maximum', 'Sum', 'Count'\r\n    ];\r\n\r\n    return { updatedData, updatedHeaders };\r\n  };\r\n\r\n  const { updatedData, updatedHeaders } = selectedColumn ? addStatisticsToData(data, columnHeaders, selectedColumn, stats) : { updatedData: data, updatedHeaders: columnHeaders };\r\n\r\n  return (\r\n    <div>\r\n      <select onChange={(e) => setSelectedColumn(e.target.value)}>\r\n        <option value=\"\">Select a column</option>\r\n        {columnHeaders.map((header) => <option key={header}>{header}</option>)}\r\n      </select>\r\n      {selectedColumn && (\r\n        <div>\r\n          <p>Mean: {stats.mean}</p>\r\n          <p>Median: {stats.median}</p>\r\n          <p>Mode: {stats.mode}</p>\r\n          <p>Variance: {stats.variance}</p>\r\n          <p>StdDev: {stats.stdDev}</p>\r\n          <p>Range: {stats.range}</p>\r\n          <p>Minimum: {stats.min}</p>\r\n          <p>Maximum: {stats.max}</p>\r\n          <p>Sum: {stats.sum}</p>\r\n          <p>Count: {stats.count}</p>\r\n          <p>Updated Data:</p>\r\n          <pre>{JSON.stringify(updatedData, null, 2)}</pre>\r\n          <p>Updated Headers:</p>\r\n          <pre>{JSON.stringify(updatedHeaders, null, 2)}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoreStatistics;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}