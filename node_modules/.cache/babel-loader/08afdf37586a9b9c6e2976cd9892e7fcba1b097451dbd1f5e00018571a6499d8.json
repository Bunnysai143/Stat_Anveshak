{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n/* eslint-disable array-element-newline */\n\n'use strict';\n\n// MODULES //\nvar floor = require('@stdlib/math-base-special-floor');\nvar ldexp = require('@stdlib/math-base-special-ldexp');\nvar zeros = require('@stdlib/array-base-zeros');\n\n// VARIABLES //\n\n/*\n* Table of constants for `2/π` (`396` hex digits, `476` decimal).\n*\n* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is\n*\n* ```tex\n* \\operatorname{ipio2}[i] \\cdot 2^{-24(i+1)}\n* ```\n*\n* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.\n*/\nvar IPIO2 = [0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62, 0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A, 0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129, 0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41, 0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8, 0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF, 0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5, 0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08, 0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3, 0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880, 0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B];\n\n// Double precision array, obtained by cutting `π/2` into `24` bits chunks...\nvar PIO2 = [1.57079625129699707031e+00,\n// 0x3FF921FB, 0x40000000\n7.54978941586159635335e-08,\n// 0x3E74442D, 0x00000000\n5.39030252995776476554e-15,\n// 0x3CF84698, 0x80000000\n3.28200341580791294123e-22,\n// 0x3B78CC51, 0x60000000\n1.27065575308067607349e-29,\n// 0x39F01B83, 0x80000000\n1.22933308981111328932e-36,\n// 0x387A2520, 0x40000000\n2.73370053816464559624e-44,\n// 0x36E38222, 0x80000000\n2.16741683877804819444e-51 // 0x3569F31D, 0x00000000\n];\nvar TWO24 = 1.67772160000000000000e+07; // 0x41700000, 0x00000000\nvar TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000\n\n// Arrays for storing temporary values (note that, in C, this is not thread safe):\nvar F = zeros(20);\nvar Q = zeros(20);\nvar FQ = zeros(20);\nvar IQ = zeros(20);\n\n// FUNCTIONS //\n\n/**\n* Performs the computation for `kernelRempio2()`.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers\n* @param {integer} jz - number of terms of `ipio2[]` used\n* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`\n* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)\n* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation\n* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation\n* @param {integer} jx - `nx - 1`\n* @param {Array<number>} f - `IPIO2[]` in floating point\n* @returns {number} last three binary digits of `N`\n*/\nfunction compute(x, y, jz, q, q0, jk, jv, jx, f) {\n  var carry;\n  var fw;\n  var ih;\n  var jp;\n  var i;\n  var k;\n  var n;\n  var j;\n  var z;\n\n  // `jp+1` is the number of terms in `PIO2[]` needed:\n  jp = jk;\n\n  // Distill `q[]` into `IQ[]` in reverse order...\n  z = q[jz];\n  j = jz;\n  for (i = 0; j > 0; i++) {\n    fw = TWON24 * z | 0;\n    IQ[i] = z - TWO24 * fw | 0;\n    z = q[j - 1] + fw;\n    j -= 1;\n  }\n  // Compute `n`...\n  z = ldexp(z, q0);\n  z -= 8.0 * floor(z * 0.125); // Trim off integer >= 8\n  n = z | 0;\n  z -= n;\n  ih = 0;\n  if (q0 > 0) {\n    // Need `IQ[jz-1]` to determine `n`...\n    i = IQ[jz - 1] >> 24 - q0;\n    n += i;\n    IQ[jz - 1] -= i << 24 - q0;\n    ih = IQ[jz - 1] >> 23 - q0;\n  } else if (q0 === 0) {\n    ih = IQ[jz - 1] >> 23;\n  } else if (z >= 0.5) {\n    ih = 2;\n  }\n  // Case: q > 0.5\n  if (ih > 0) {\n    n += 1;\n    carry = 0;\n\n    // Compute `1-q`:\n    for (i = 0; i < jz; i++) {\n      j = IQ[i];\n      if (carry === 0) {\n        if (j !== 0) {\n          carry = 1;\n          IQ[i] = 0x1000000 - j;\n        }\n      } else {\n        IQ[i] = 0xffffff - j;\n      }\n    }\n    if (q0 > 0) {\n      // Rare case: chance is 1 in 12...\n      switch (q0) {\n        // eslint-disable-line default-case\n        case 1:\n          IQ[jz - 1] &= 0x7fffff;\n          break;\n        case 2:\n          IQ[jz - 1] &= 0x3fffff;\n          break;\n      }\n    }\n    if (ih === 2) {\n      z = 1.0 - z;\n      if (carry !== 0) {\n        z -= ldexp(1.0, q0);\n      }\n    }\n  }\n  // Check if re-computation is needed...\n  if (z === 0.0) {\n    j = 0;\n    for (i = jz - 1; i >= jk; i--) {\n      j |= IQ[i];\n    }\n    if (j === 0) {\n      // Need re-computation...\n      for (k = 1; IQ[jk - k] === 0; k++) {\n        // `k` is the number of terms needed...\n      }\n      for (i = jz + 1; i <= jz + k; i++) {\n        // Add `q[jz+1]` to `q[jz+k]`...\n        f[jx + i] = IPIO2[jv + i];\n        fw = 0.0;\n        for (j = 0; j <= jx; j++) {\n          fw += x[j] * f[jx + (i - j)];\n        }\n        q[i] = fw;\n      }\n      jz += k;\n      return compute(x, y, jz, q, q0, jk, jv, jx, f);\n    }\n  }\n  // Chop off zero terms...\n  if (z === 0.0) {\n    jz -= 1;\n    q0 -= 24;\n    while (IQ[jz] === 0) {\n      jz -= 1;\n      q0 -= 24;\n    }\n  } else {\n    // Break `z` into 24-bit if necessary...\n    z = ldexp(z, -q0);\n    if (z >= TWO24) {\n      fw = TWON24 * z | 0;\n      IQ[jz] = z - TWO24 * fw | 0;\n      jz += 1;\n      q0 += 24;\n      IQ[jz] = fw;\n    } else {\n      IQ[jz] = z | 0;\n    }\n  }\n  // Convert integer \"bit\" chunk to floating-point value...\n  fw = ldexp(1.0, q0);\n  for (i = jz; i >= 0; i--) {\n    q[i] = fw * IQ[i];\n    fw *= TWON24;\n  }\n  // Compute `PIO2[0,...,jp]*q[jz,...,0]`...\n  for (i = jz; i >= 0; i--) {\n    fw = 0.0;\n    for (k = 0; k <= jp && k <= jz - i; k++) {\n      fw += PIO2[k] * q[i + k];\n    }\n    FQ[jz - i] = fw;\n  }\n  // Compress `FQ[]` into `y[]`...\n  fw = 0.0;\n  for (i = jz; i >= 0; i--) {\n    fw += FQ[i];\n  }\n  if (ih === 0) {\n    y[0] = fw;\n  } else {\n    y[0] = -fw;\n  }\n  fw = FQ[0] - fw;\n  for (i = 1; i <= jz; i++) {\n    fw += FQ[i];\n  }\n  if (ih === 0) {\n    y[1] = fw;\n  } else {\n    y[1] = -fw;\n  }\n  return n & 7;\n}\n\n// MAIN //\n\n/**\n* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.\n*\n* ## Method\n*\n* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)\n* @param {PositiveInteger} nx - dimension of `x[]`\n* @returns {number} last three binary digits of `N`\n*/\nfunction kernelRempio2(x, y, e0, nx) {\n  var fw;\n  var jk;\n  var jv;\n  var jx;\n  var jz;\n  var q0;\n  var i;\n  var j;\n  var m;\n\n  // Initialize `jk` for double-precision floating-point numbers:\n  jk = 4;\n\n  // Determine `jx`, `jv`, `q0` (note that `q0 < 3`):\n  jx = nx - 1;\n  jv = (e0 - 3) / 24 | 0;\n  if (jv < 0) {\n    jv = 0;\n  }\n  q0 = e0 - 24 * (jv + 1);\n\n  // Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:\n  j = jv - jx;\n  m = jx + jk;\n  for (i = 0; i <= m; i++) {\n    if (j < 0) {\n      F[i] = 0.0;\n    } else {\n      F[i] = IPIO2[j];\n    }\n    j += 1;\n  }\n  // Compute `Q[0],Q[1],...,Q[jk]`:\n  for (i = 0; i <= jk; i++) {\n    fw = 0.0;\n    for (j = 0; j <= jx; j++) {\n      fw += x[j] * F[jx + (i - j)];\n    }\n    Q[i] = fw;\n  }\n  jz = jk;\n  return compute(x, y, jz, Q, q0, jk, jv, jx, F);\n}\n\n// EXPORTS //\n\nmodule.exports = kernelRempio2;","map":{"version":3,"names":["floor","require","ldexp","zeros","IPIO2","PIO2","TWO24","TWON24","F","Q","FQ","IQ","compute","x","y","jz","q","q0","jk","jv","jx","f","carry","fw","ih","jp","i","k","n","j","z","kernelRempio2","e0","nx","m","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-rempio2/lib/kernel_rempio2.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n/* eslint-disable array-element-newline */\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ldexp = require( '@stdlib/math-base-special-ldexp' );\nvar zeros = require( '@stdlib/array-base-zeros' );\n\n\n// VARIABLES //\n\n/*\n* Table of constants for `2/π` (`396` hex digits, `476` decimal).\n*\n* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is\n*\n* ```tex\n* \\operatorname{ipio2}[i] \\cdot 2^{-24(i+1)}\n* ```\n*\n* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.\n*/\nvar IPIO2 = [\n\t0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,\n\t0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,\n\t0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,\n\t0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,\n\t0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,\n\t0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,\n\t0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,\n\t0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,\n\t0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,\n\t0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,\n\t0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B\n];\n\n// Double precision array, obtained by cutting `π/2` into `24` bits chunks...\nvar PIO2 = [\n\t1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000\n\t7.54978941586159635335e-08, // 0x3E74442D, 0x00000000\n\t5.39030252995776476554e-15, // 0x3CF84698, 0x80000000\n\t3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000\n\t1.27065575308067607349e-29, // 0x39F01B83, 0x80000000\n\t1.22933308981111328932e-36, // 0x387A2520, 0x40000000\n\t2.73370053816464559624e-44, // 0x36E38222, 0x80000000\n\t2.16741683877804819444e-51  // 0x3569F31D, 0x00000000\n];\nvar TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000\nvar TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000\n\n// Arrays for storing temporary values (note that, in C, this is not thread safe):\nvar F = zeros( 20 );\nvar Q = zeros( 20 );\nvar FQ = zeros( 20 );\nvar IQ = zeros( 20 );\n\n\n// FUNCTIONS //\n\n/**\n* Performs the computation for `kernelRempio2()`.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers\n* @param {integer} jz - number of terms of `ipio2[]` used\n* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`\n* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)\n* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation\n* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation\n* @param {integer} jx - `nx - 1`\n* @param {Array<number>} f - `IPIO2[]` in floating point\n* @returns {number} last three binary digits of `N`\n*/\nfunction compute( x, y, jz, q, q0, jk, jv, jx, f ) {\n\tvar carry;\n\tvar fw;\n\tvar ih;\n\tvar jp;\n\tvar i;\n\tvar k;\n\tvar n;\n\tvar j;\n\tvar z;\n\n\t// `jp+1` is the number of terms in `PIO2[]` needed:\n\tjp = jk;\n\n\t// Distill `q[]` into `IQ[]` in reverse order...\n\tz = q[ jz ];\n\tj = jz;\n\tfor ( i = 0; j > 0; i++ ) {\n\t\tfw = ( TWON24 * z )|0;\n\t\tIQ[ i ] = ( z - (TWO24*fw) )|0;\n\t\tz = q[ j-1 ] + fw;\n\t\tj -= 1;\n\t}\n\t// Compute `n`...\n\tz = ldexp( z, q0 );\n\tz -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8\n\tn = z|0;\n\tz -= n;\n\tih = 0;\n\tif ( q0 > 0 ) {\n\t\t// Need `IQ[jz-1]` to determine `n`...\n\t\ti = ( IQ[ jz-1 ] >> (24-q0) );\n\t\tn += i;\n\t\tIQ[ jz-1 ] -= ( i << (24-q0) );\n\t\tih = ( IQ[ jz-1 ] >> (23-q0) );\n\t}\n\telse if ( q0 === 0 ) {\n\t\tih = ( IQ[ jz-1 ] >> 23 );\n\t}\n\telse if ( z >= 0.5 ) {\n\t\tih = 2;\n\t}\n\t// Case: q > 0.5\n\tif ( ih > 0 ) {\n\t\tn += 1;\n\t\tcarry = 0;\n\n\t\t// Compute `1-q`:\n\t\tfor ( i = 0; i < jz; i++ ) {\n\t\t\tj = IQ[ i ];\n\t\t\tif ( carry === 0 ) {\n\t\t\t\tif ( j !== 0 ) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tIQ[ i ] = 0x1000000 - j;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tIQ[ i ] = 0xffffff - j;\n\t\t\t}\n\t\t}\n\t\tif ( q0 > 0 ) {\n\t\t\t// Rare case: chance is 1 in 12...\n\t\t\tswitch ( q0 ) { // eslint-disable-line default-case\n\t\t\tcase 1:\n\t\t\t\tIQ[ jz-1 ] &= 0x7fffff;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tIQ[ jz-1 ] &= 0x3fffff;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( ih === 2 ) {\n\t\t\tz = 1.0 - z;\n\t\t\tif ( carry !== 0 ) {\n\t\t\t\tz -= ldexp( 1.0, q0 );\n\t\t\t}\n\t\t}\n\t}\n\t// Check if re-computation is needed...\n\tif ( z === 0.0 ) {\n\t\tj = 0;\n\t\tfor ( i = jz-1; i >= jk; i-- ) {\n\t\t\tj |= IQ[ i ];\n\t\t}\n\t\tif ( j === 0 ) {\n\t\t\t// Need re-computation...\n\t\t\tfor ( k = 1; IQ[ jk-k ] === 0; k++ ) {\n\t\t\t\t// `k` is the number of terms needed...\n\t\t\t}\n\t\t\tfor ( i = jz+1; i <= jz+k; i++ ) {\n\t\t\t\t// Add `q[jz+1]` to `q[jz+k]`...\n\t\t\t\tf[ jx+i ] = IPIO2[ jv+i ];\n\t\t\t\tfw = 0.0;\n\t\t\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\t\t\tfw += x[ j ] * f[ jx + (i-j) ];\n\t\t\t\t}\n\t\t\t\tq[ i ] = fw;\n\t\t\t}\n\t\t\tjz += k;\n\t\t\treturn compute( x, y, jz, q, q0, jk, jv, jx, f );\n\t\t}\n\t}\n\t// Chop off zero terms...\n\tif ( z === 0.0 ) {\n\t\tjz -= 1;\n\t\tq0 -= 24;\n\t\twhile ( IQ[ jz ] === 0 ) {\n\t\t\tjz -= 1;\n\t\t\tq0 -= 24;\n\t\t}\n\t} else {\n\t\t// Break `z` into 24-bit if necessary...\n\t\tz = ldexp( z, -q0 );\n\t\tif ( z >= TWO24 ) {\n\t\t\tfw = (TWON24*z)|0;\n\t\t\tIQ[ jz ] = ( z - (TWO24*fw) )|0;\n\t\t\tjz += 1;\n\t\t\tq0 += 24;\n\t\t\tIQ[ jz ] = fw;\n\t\t} else {\n\t\t\tIQ[ jz ] = z|0;\n\t\t}\n\t}\n\t// Convert integer \"bit\" chunk to floating-point value...\n\tfw = ldexp( 1.0, q0 );\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tq[ i ] = fw * IQ[i];\n\t\tfw *= TWON24;\n\t}\n\t// Compute `PIO2[0,...,jp]*q[jz,...,0]`...\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw = 0.0;\n\t\tfor ( k = 0; k <= jp && k <= jz-i; k++ ) {\n\t\t\tfw += PIO2[ k ] * q[ i+k ];\n\t\t}\n\t\tFQ[ jz-i ] = fw;\n\t}\n\t// Compress `FQ[]` into `y[]`...\n\tfw = 0.0;\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw += FQ[ i ];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 0 ] = fw;\n\t} else {\n\t\ty[ 0 ] = -fw;\n\t}\n\tfw = FQ[ 0 ] - fw;\n\tfor ( i = 1; i <= jz; i++ ) {\n\t\tfw += FQ[i];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 1 ] = fw;\n\t} else {\n\t\ty[ 1 ] = -fw;\n\t}\n\treturn ( n & 7 );\n}\n\n\n// MAIN //\n\n/**\n* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.\n*\n* ## Method\n*\n* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)\n* @param {PositiveInteger} nx - dimension of `x[]`\n* @returns {number} last three binary digits of `N`\n*/\nfunction kernelRempio2( x, y, e0, nx ) {\n\tvar fw;\n\tvar jk;\n\tvar jv;\n\tvar jx;\n\tvar jz;\n\tvar q0;\n\tvar i;\n\tvar j;\n\tvar m;\n\n\t// Initialize `jk` for double-precision floating-point numbers:\n\tjk = 4;\n\n\t// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):\n\tjx = nx - 1;\n\tjv = ( (e0 - 3) / 24 )|0;\n\tif ( jv < 0 ) {\n\t\tjv = 0;\n\t}\n\tq0 = e0 - (24 * (jv + 1));\n\n\t// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:\n\tj = jv - jx;\n\tm = jx + jk;\n\tfor ( i = 0; i <= m; i++ ) {\n\t\tif ( j < 0 ) {\n\t\t\tF[ i ] = 0.0;\n\t\t} else {\n\t\t\tF[ i ] = IPIO2[ j ];\n\t\t}\n\t\tj += 1;\n\t}\n\t// Compute `Q[0],Q[1],...,Q[jk]`:\n\tfor ( i = 0; i <= jk; i++ ) {\n\t\tfw = 0.0;\n\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\tfw += x[ j ] * F[ jx + (i-j) ];\n\t\t}\n\t\tQ[ i ] = fw;\n\t}\n\tjz = jk;\n\treturn compute( x, y, jz, Q, q0, jk, jv, jx, F );\n}\n\n\n// EXPORTS //\n\nmodule.exports = kernelRempio2;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}