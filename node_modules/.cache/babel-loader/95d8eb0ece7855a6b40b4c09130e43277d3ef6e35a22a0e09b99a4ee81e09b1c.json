{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\nvar setHighWord = require('@stdlib/number-float64-base-set-high-word');\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar BIAS = require('@stdlib/constants-float64-exponent-bias');\nvar NINF = require('@stdlib/constants-float64-ninf');\nvar polyvalP = require('./polyval_p.js');\nvar polyvalQ = require('./polyval_q.js');\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16; // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff | 0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000 | 0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000 | 0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000 | 0; // asm type annotation\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of a double-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln(x) {\n  var hfsq;\n  var hx;\n  var t2;\n  var t1;\n  var k;\n  var R;\n  var f;\n  var i;\n  var j;\n  var s;\n  var w;\n  var z;\n  if (x === 0.0) {\n    return NINF;\n  }\n  if (isnan(x) || x < 0.0) {\n    return NaN;\n  }\n  hx = getHighWord(x);\n  k = 0 | 0; // asm type annotation\n  if (hx < HIGH_MIN_NORMAL_EXP) {\n    // Case: 0 < x < 2**-1022\n    k -= 54 | 0; // asm type annotation\n\n    // Subnormal number, scale up `x`:\n    x *= TWO54;\n    hx = getHighWord(x);\n  }\n  if (hx >= HIGH_MAX_NORMAL_EXP) {\n    return x + x;\n  }\n  k += (hx >> 20) - BIAS | 0; // asm type annotation\n  hx &= HIGH_SIGNIFICAND_MASK;\n  i = hx + 0x95f64 & 0x100000 | 0; // asm type annotation\n\n  // Normalize `x` or `x/2`...\n  x = setHighWord(x, hx | i ^ HIGH_BIASED_EXP_0);\n  k += i >> 20 | 0; // asm type annotation\n  f = x - 1.0;\n  if ((HIGH_SIGNIFICAND_MASK & 2 + hx) < 3) {\n    // Case: -2**-20 <= f < 2**-20\n    if (f === 0.0) {\n      if (k === 0) {\n        return 0.0;\n      }\n      return k * LN2_HI + k * LN2_LO;\n    }\n    R = f * f * (0.5 - ONE_THIRD * f);\n    if (k === 0) {\n      return f - R;\n    }\n    return k * LN2_HI - (R - k * LN2_LO - f);\n  }\n  s = f / (2.0 + f);\n  z = s * s;\n  i = hx - 0x6147a | 0; // asm type annotation\n  w = z * z;\n  j = 0x6b851 - hx | 0; // asm type annotation\n  t1 = w * polyvalP(w);\n  t2 = z * polyvalQ(w);\n  i |= j;\n  R = t2 + t1;\n  if (i > 0) {\n    hfsq = 0.5 * f * f;\n    if (k === 0) {\n      return f - (hfsq - s * (hfsq + R));\n    }\n    return k * LN2_HI - (hfsq - (s * (hfsq + R) + k * LN2_LO) - f);\n  }\n  if (k === 0) {\n    return f - s * (f - R);\n  }\n  return k * LN2_HI - (s * (f - R) - k * LN2_LO - f);\n}\n\n// EXPORTS //\n\nmodule.exports = ln;","map":{"version":3,"names":["getHighWord","require","setHighWord","isnan","BIAS","NINF","polyvalP","polyvalQ","LN2_HI","LN2_LO","TWO54","ONE_THIRD","HIGH_SIGNIFICAND_MASK","HIGH_MAX_NORMAL_EXP","HIGH_MIN_NORMAL_EXP","HIGH_BIASED_EXP_0","ln","x","hfsq","hx","t2","t1","k","R","f","i","j","s","w","z","NaN","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-ln/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar polyvalP = require( './polyval_p.js' );\nvar polyvalQ = require( './polyval_q.js' );\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of a double-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln( x ) {\n\tvar hfsq;\n\tvar hx;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: 0 < x < 2**-1022\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up `x`:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( ( hx>>20 ) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += ( i>>20 )|0; // asm type annotation\n\tf = x - 1.0;\n\tif ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn (k * LN2_HI) + (k * LN2_LO);\n\t\t}\n\t\tR = f * f * ( 0.5 - (ONE_THIRD*f) );\n\t\tif ( k === 0 ) {\n\t\t\treturn f - R;\n\t\t}\n\t\treturn (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\tif ( k === 0 ) {\n\t\t\treturn f - ( hfsq - (s * (hfsq+R)) );\n\t\t}\n\t\treturn (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );\n\t}\n\tif ( k === 0 ) {\n\t\treturn f - (s*(f-R));\n\t}\n\treturn (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ln;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}