{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\CoreStatistics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ss from 'simple-statistics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoreStatistics = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [statistics, setStatistics] = useState({});\n  const [error, setError] = useState('');\n\n  // Calculate statistics\n  const calculateStatistics = useCallback(column => {\n    if (!Array.isArray(data) || data.length === 0) {\n      setError(\"Data is not an array or is empty.\");\n      return {};\n    }\n    if (!Array.isArray(columnHeaders) || columnHeaders.length === 0) {\n      setError(\"Column headers are not an array or are empty.\");\n      return {};\n    }\n    const colIndex = columnHeaders.indexOf(column);\n    if (colIndex === -1) {\n      setError(`Column \"${column}\" not found in columnHeaders.`);\n      return {};\n    }\n\n    // Ensure that all rows in data are arrays and have the correct number of columns\n    const columnData = data.map((row, rowIndex) => {\n      if (!Array.isArray(row)) {\n        console.error(`Row at index ${rowIndex} is not an array:`, row);\n        return NaN; // Handle non-array rows\n      }\n      if (row[colIndex] === undefined) {\n        console.error(`Row at index ${rowIndex} has no value at column index ${colIndex}:`, row);\n        return NaN; // Handle rows missing the expected column\n      }\n      return parseFloat(row[colIndex]);\n    }).filter(val => !isNaN(val));\n    if (columnData.length === 0) {\n      setError(`No valid numeric data found for column \"${column}\".`);\n      return {};\n    }\n    const min = Math.min(...columnData).toFixed(2);\n    const max = Math.max(...columnData).toFixed(2);\n    const range = (max - min).toFixed(2);\n    const sum = ss.sum(columnData).toFixed(2);\n    const count = columnData.length;\n    const quartiles = columnData.length >= 3 ? ss.quantileSorted(columnData.sort((a, b) => a - b), [0.25, 0.5, 0.75]) : [];\n    const iqr = quartiles.length === 3 ? (quartiles[2] - quartiles[0]).toFixed(2) : \"N/A\";\n    const skewness = columnData.length >= 3 ? ss.sampleSkewness(columnData).toFixed(2) : \"N/A\";\n    const kurtosis = columnData.length >= 4 ? ss.sampleKurtosis(columnData).toFixed(2) : \"N/A\";\n    setStatistics({\n      mean: ss.mean(columnData).toFixed(2),\n      median: ss.median(columnData).toFixed(2),\n      mode: ss.mode(columnData),\n      variance: ss.variance(columnData).toFixed(2),\n      stdDev: ss.standardDeviation(columnData).toFixed(2),\n      range,\n      min,\n      max,\n      sum,\n      count,\n      iqr,\n      quartiles,\n      deciles: columnData.length >= 10 ? Array.from({\n        length: 10\n      }, (_, i) => ss.quantileSorted(columnData, (i + 1) / 10).toFixed(2)) : \"N/A\",\n      skewness,\n      kurtosis\n    });\n  }, [data, columnHeaders]);\n\n  // Recalculate statistics when data or columnHeaders changes\n  useEffect(() => {\n    if (columnHeaders.length > 0) {\n      calculateStatistics(columnHeaders[0]); // Example: Calculate for the first column\n    }\n  }, [columnHeaders, calculateStatistics]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(statistics).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [key, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), \" \", Array.isArray(value) ? value.join(', ') : value]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(CoreStatistics, \"JH0jfS+eYX8YGqG8iKGGeEwaOsY=\");\n_c = CoreStatistics;\nexport default CoreStatistics;\nvar _c;\n$RefreshReg$(_c, \"CoreStatistics\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ss","jsxDEV","_jsxDEV","CoreStatistics","data","columnHeaders","_s","statistics","setStatistics","error","setError","calculateStatistics","column","Array","isArray","length","colIndex","indexOf","columnData","map","row","rowIndex","console","NaN","undefined","parseFloat","filter","val","isNaN","min","Math","toFixed","max","range","sum","count","quartiles","quantileSorted","sort","a","b","iqr","skewness","sampleSkewness","kurtosis","sampleKurtosis","mean","median","mode","variance","stdDev","standardDeviation","deciles","from","_","i","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","key","value","join","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/CoreStatistics.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport ss from 'simple-statistics';\r\n\r\nconst CoreStatistics = ({ data, columnHeaders }) => {\r\n  const [statistics, setStatistics] = useState({});\r\n  const [error, setError] = useState('');\r\n\r\n  // Calculate statistics\r\n  const calculateStatistics = useCallback((column) => {\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      setError(\"Data is not an array or is empty.\");\r\n      return {};\r\n    }\r\n  \r\n    if (!Array.isArray(columnHeaders) || columnHeaders.length === 0) {\r\n      setError(\"Column headers are not an array or are empty.\");\r\n      return {};\r\n    }\r\n  \r\n    const colIndex = columnHeaders.indexOf(column);\r\n    if (colIndex === -1) {\r\n      setError(`Column \"${column}\" not found in columnHeaders.`);\r\n      return {};\r\n    }\r\n  \r\n    // Ensure that all rows in data are arrays and have the correct number of columns\r\n    const columnData = data\r\n      .map((row, rowIndex) => {\r\n        if (!Array.isArray(row)) {\r\n          console.error(`Row at index ${rowIndex} is not an array:`, row);\r\n          return NaN; // Handle non-array rows\r\n        }\r\n        \r\n        if (row[colIndex] === undefined) {\r\n          console.error(`Row at index ${rowIndex} has no value at column index ${colIndex}:`, row);\r\n          return NaN; // Handle rows missing the expected column\r\n        }\r\n  \r\n        return parseFloat(row[colIndex]);\r\n      })\r\n      .filter((val) => !isNaN(val));\r\n  \r\n    if (columnData.length === 0) {\r\n      setError(`No valid numeric data found for column \"${column}\".`);\r\n      return {};\r\n    }\r\n  \r\n    const min = Math.min(...columnData).toFixed(2);\r\n    const max = Math.max(...columnData).toFixed(2);\r\n    const range = (max - min).toFixed(2);\r\n    const sum = ss.sum(columnData).toFixed(2);\r\n    const count = columnData.length;\r\n    const quartiles =\r\n      columnData.length >= 3\r\n        ? ss.quantileSorted(columnData.sort((a, b) => a - b), [0.25, 0.5, 0.75])\r\n        : [];\r\n    const iqr =\r\n      quartiles.length === 3\r\n        ? (quartiles[2] - quartiles[0]).toFixed(2)\r\n        : \"N/A\";\r\n    const skewness =\r\n      columnData.length >= 3 ? ss.sampleSkewness(columnData).toFixed(2) : \"N/A\";\r\n    const kurtosis =\r\n      columnData.length >= 4 ? ss.sampleKurtosis(columnData).toFixed(2) : \"N/A\";\r\n  \r\n    setStatistics({\r\n      mean: ss.mean(columnData).toFixed(2),\r\n      median: ss.median(columnData).toFixed(2),\r\n      mode: ss.mode(columnData),\r\n      variance: ss.variance(columnData).toFixed(2),\r\n      stdDev: ss.standardDeviation(columnData).toFixed(2),\r\n      range,\r\n      min,\r\n      max,\r\n      sum,\r\n      count,\r\n      iqr,\r\n      quartiles,\r\n      deciles:\r\n        columnData.length >= 10\r\n          ? Array.from({ length: 10 }, (_, i) =>\r\n              ss.quantileSorted(columnData, (i + 1) / 10).toFixed(2)\r\n            )\r\n          : \"N/A\",\r\n      skewness,\r\n      kurtosis,\r\n    });\r\n  }, [data, columnHeaders]);\r\n\r\n  // Recalculate statistics when data or columnHeaders changes\r\n  useEffect(() => {\r\n    if (columnHeaders.length > 0) {\r\n      calculateStatistics(columnHeaders[0]); // Example: Calculate for the first column\r\n    }\r\n  }, [columnHeaders, calculateStatistics]);\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      <div>\r\n        {Object.entries(statistics).map(([key, value]) => (\r\n          <div key={key}>\r\n            <strong>{key}:</strong> {Array.isArray(value) ? value.join(', ') : value}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoreStatistics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}