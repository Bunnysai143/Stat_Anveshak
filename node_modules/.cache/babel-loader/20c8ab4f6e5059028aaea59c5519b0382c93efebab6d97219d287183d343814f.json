{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai kiran\\\\Desktop\\\\INternship\\\\Stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\";\nimport \"../styles/DistributionAnalysis.css\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const [accuracy, setAccuracy] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\", \"Weibull\", \"Chi-Square\", \"Cauchy\", \"T-Distribution\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    setAccuracy(null);\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n    setAccuracy(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      let calculatedAccuracy = 0;\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          distributionData = columnData.map(val => ss.zScore(val, mean, stddev));\n          calculatedAccuracy = 1 - stddev / mean;\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => lambda * Math.exp(-lambda * val));\n          calculatedAccuracy = lambda;\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          distributionData = columnData.map(() => 1 / (max - min));\n          calculatedAccuracy = max - min;\n          break;\n        case \"Gamma\":\n          const shape = 2; // example shape\n          const scale = ss.mean(columnData) / shape;\n          distributionData = columnData.map(val => jStat.gamma.pdf(val, shape, scale));\n          calculatedAccuracy = shape * scale;\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStdDev = Math.log(ss.standardDeviation(columnData));\n          distributionData = columnData.map(val => jStat.lognormal.pdf(val, logMean, logStdDev));\n          calculatedAccuracy = 1 / logStdDev;\n          break;\n        case \"Beta\":\n          const alpha = 2; // example alpha\n          const beta = 5; // example beta\n          distributionData = columnData.map(val => jStat.beta.pdf(val, alpha, beta));\n          calculatedAccuracy = alpha / (alpha + beta);\n          break;\n        case \"Weibull\":\n          const weibullScale = ss.mean(columnData);\n          const weibullShape = 1.5; // example shape\n          distributionData = columnData.map(val => jStat.weibull.pdf(val, weibullShape, weibullScale));\n          calculatedAccuracy = weibullScale / weibullShape;\n          break;\n        case \"Chi-Square\":\n          const df = columnData.length - 1; // degrees of freedom\n          distributionData = columnData.map(val => jStat.chisquare.pdf(val, df));\n          calculatedAccuracy = 1 / df;\n          break;\n        case \"Cauchy\":\n          const location = ss.mean(columnData);\n          const scaleParam = ss.standardDeviation(columnData);\n          distributionData = columnData.map(val => jStat.cauchy.pdf(val, location, scaleParam));\n          calculatedAccuracy = 1 / scaleParam;\n          break;\n        case \"T-Distribution\":\n          const dof = columnData.length - 1;\n          distributionData = columnData.map(val => jStat.studentt.pdf(val, dof));\n          calculatedAccuracy = 1 / dof;\n          break;\n        case \"Binomial\":\n          const trials = 10; // example\n          const probability = 0.5; // example\n          distributionData = columnData.map(val => ss.binomialDistribution(trials, probability)[val] || 0);\n          calculatedAccuracy = trials * probability;\n          break;\n        case \"Poisson\":\n          const poissonLambda = ss.mean(columnData);\n          distributionData = columnData.map(val => ss.poissonDistribution(poissonLambda)[val] || 0);\n          calculatedAccuracy = poissonLambda;\n          break;\n        case \"Geometric\":\n          const geomP = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => geomP * Math.pow(1 - geomP, val - 1));\n          calculatedAccuracy = geomP;\n          break;\n        case \"Bernoulli\":\n          const bernP = ss.mean(columnData);\n          distributionData = columnData.map(val => val === 0 ? 1 - bernP : bernP);\n          calculatedAccuracy = bernP;\n          break;\n        case \"Negative Binomial\":\n          const negR = 5; // example\n          const negP = 0.5; // example\n          distributionData = columnData.map(val => jStat.negbinom.pdf(val, negR, negP));\n          calculatedAccuracy = negR * negP;\n          break;\n        case \"Hypergeometric\":\n          const N = 50;\n          const K = 20;\n          const n = 10;\n          distributionData = columnData.map(val => jStat.hypergeometric.pdf(val, N, K, n));\n          calculatedAccuracy = K / N;\n          break;\n        default:\n          break;\n      }\n      setAccuracy(calculatedAccuracy.toFixed(4));\n      setChartData({\n        labels,\n        datasets: [{\n          label: `${distribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleColumnChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: header,\n          children: header\n        }, header, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionTypeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Continuous\",\n            children: \"Continuous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Discrete\",\n            children: \"Discrete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dist,\n            children: dist\n          }, dist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 17\n          }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dist,\n            children: dist\n          }, dist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: `${selectedDistribution} Distribution for ${selectedColumn}`\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), accuracy && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accuracy-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Accuracy: \", accuracy]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"6sIEs+CcwGtKrHkocZCkwPJzDNw=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","accuracy","setAccuracy","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","handleDistributionTypeChange","handleDistributionChange","distribution","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","labels","Array","from","_","index","distributionData","calculatedAccuracy","mean","stddev","standardDeviation","zScore","lambda","Math","exp","min","max","shape","scale","gamma","pdf","logMean","log","logStdDev","lognormal","alpha","beta","weibullScale","weibullShape","weibull","df","chisquare","location","scaleParam","cauchy","dof","studentt","trials","probability","binomialDistribution","poissonLambda","poissonDistribution","geomP","pow","bernP","negR","negP","negbinom","N","K","n","hypergeometric","toFixed","datasets","label","fill","borderColor","tension","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","header","dist","options","responsive","plugins","title","display","text","_c","$RefreshReg$"],"sources":["C:/Users/Sai kiran/Desktop/INternship/Stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"../styles/DistributionAnalysis.css\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport jStat from \"jstat\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n  const [accuracy, setAccuracy] = useState(null);\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\", \"Weibull\", \"Chi-Square\", \"Cauchy\", \"T-Distribution\"\r\n  ];\r\n\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n\r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data.map((row) => parseFloat(row[colIndex])).filter((val) => !isNaN(val));\r\n      if (columnData.length === 0) return;\r\n\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n      let calculatedAccuracy = 0;\r\n\r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          distributionData = columnData.map((val) => ss.zScore(val, mean, stddev));\r\n          calculatedAccuracy = 1 - stddev / mean;\r\n          break;\r\n\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => lambda * Math.exp(-lambda * val));\r\n          calculatedAccuracy = lambda;\r\n          break;\r\n\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          calculatedAccuracy = max - min;\r\n          break;\r\n\r\n        case \"Gamma\":\r\n          const shape = 2; // example shape\r\n          const scale = ss.mean(columnData) / shape;\r\n          distributionData = columnData.map((val) => jStat.gamma.pdf(val, shape, scale));\r\n          calculatedAccuracy = shape * scale;\r\n          break;\r\n\r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStdDev = Math.log(ss.standardDeviation(columnData));\r\n          distributionData = columnData.map((val) => jStat.lognormal.pdf(val, logMean, logStdDev));\r\n          calculatedAccuracy = 1 / logStdDev;\r\n          break;\r\n\r\n        case \"Beta\":\r\n          const alpha = 2; // example alpha\r\n          const beta = 5; // example beta\r\n          distributionData = columnData.map((val) => jStat.beta.pdf(val, alpha, beta));\r\n          calculatedAccuracy = alpha / (alpha + beta);\r\n          break;\r\n\r\n        case \"Weibull\":\r\n          const weibullScale = ss.mean(columnData);\r\n          const weibullShape = 1.5; // example shape\r\n          distributionData = columnData.map((val) => jStat.weibull.pdf(val, weibullShape, weibullScale));\r\n          calculatedAccuracy = weibullScale / weibullShape;\r\n          break;\r\n\r\n        case \"Chi-Square\":\r\n          const df = columnData.length - 1; // degrees of freedom\r\n          distributionData = columnData.map((val) => jStat.chisquare.pdf(val, df));\r\n          calculatedAccuracy = 1 / df;\r\n          break;\r\n\r\n        case \"Cauchy\":\r\n          const location = ss.mean(columnData);\r\n          const scaleParam = ss.standardDeviation(columnData);\r\n          distributionData = columnData.map((val) => jStat.cauchy.pdf(val, location, scaleParam));\r\n          calculatedAccuracy = 1 / scaleParam;\r\n          break;\r\n\r\n        case \"T-Distribution\":\r\n          const dof = columnData.length - 1;\r\n          distributionData = columnData.map((val) => jStat.studentt.pdf(val, dof));\r\n          calculatedAccuracy = 1 / dof;\r\n          break;\r\n\r\n        case \"Binomial\":\r\n          const trials = 10; // example\r\n          const probability = 0.5; // example\r\n          distributionData = columnData.map((val) => ss.binomialDistribution(trials, probability)[val] || 0);\r\n          calculatedAccuracy = trials * probability;\r\n          break;\r\n\r\n        case \"Poisson\":\r\n          const poissonLambda = ss.mean(columnData);\r\n          distributionData = columnData.map((val) => ss.poissonDistribution(poissonLambda)[val] || 0);\r\n          calculatedAccuracy = poissonLambda;\r\n          break;\r\n\r\n        case \"Geometric\":\r\n          const geomP = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => geomP * Math.pow(1 - geomP, val - 1));\r\n          calculatedAccuracy = geomP;\r\n          break;\r\n\r\n        case \"Bernoulli\":\r\n          const bernP = ss.mean(columnData);\r\n          distributionData = columnData.map((val) => (val === 0 ? 1 - bernP : bernP));\r\n          calculatedAccuracy = bernP;\r\n          break;\r\n\r\n        case \"Negative Binomial\":\r\n          const negR = 5; // example\r\n          const negP = 0.5; // example\r\n          distributionData = columnData.map((val) => jStat.negbinom.pdf(val, negR, negP));\r\n          calculatedAccuracy = negR * negP;\r\n          break;\r\n\r\n        case \"Hypergeometric\":\r\n          const N = 50;\r\n          const K = 20;\r\n          const n = 10;\r\n          distributionData = columnData.map((val) => jStat.hypergeometric.pdf(val, N, K, n));\r\n          calculatedAccuracy = K / N;\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      setAccuracy(calculatedAccuracy.toFixed(4));\r\n      setChartData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: `${distribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      \r\n      <div className=\"controls\">\r\n        <select onChange={handleColumnChange}>\r\n          <option value=\"\">Select a column</option>\r\n          {columnHeaders.map((header) => (\r\n            <option key={header} value={header}>\r\n              {header}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            \r\n            <select onChange={handleDistributionTypeChange}>\r\n              <option value=\"\">Select Type</option>\r\n              <option value=\"Continuous\">Continuous</option>\r\n              <option value=\"Discrete\">Discrete</option>\r\n            </select>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <select onChange={handleDistributionChange}>\r\n                <option value=\"\">Select Distribution</option>\r\n                {continuousDistributions.map((dist) => (\r\n                  <option key={dist} value={dist}>\r\n                    {dist}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <select onChange={handleDistributionChange}>\r\n                <option value=\"\">Select Distribution</option>\r\n                {discreteDistributions.map((dist) => (\r\n                  <option key={dist} value={dist}>\r\n                    {dist}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {chartData && (\r\n        <div className=\"chart-container\">\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              plugins: { title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` } },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {accuracy && (\r\n        <div className=\"accuracy-container\">\r\n          <h4>Accuracy: {accuracy}</h4>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,KAAKC,EAAE,MAAM,mBAAmB;AACvC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,oCAAoC;AAC3C,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAC1H,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1BZ,OAAO,CAACa,QAAQ,CAACZ,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAE/F,MAAMO,oBAAoB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACwB,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5E,MAAM,CAAC0B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAAC4B,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC8B,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMgC,uBAAuB,GAAG,CAC9B,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,gBAAgB,CACvH;EAED,MAAMC,qBAAqB,GAAG,CAC5B,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,mBAAmB,EAAE,gBAAgB,CACvF;EAED,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IACpC,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACjCf,iBAAiB,CAACa,MAAM,CAAC;IACzBP,YAAY,CAAC,IAAI,CAAC;IAClBJ,2BAA2B,CAAC,EAAE,CAAC;IAC/BE,uBAAuB,CAAC,EAAE,CAAC;IAC3BI,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMQ,4BAA4B,GAAIJ,KAAK,IAAK;IAC9CV,2BAA2B,CAACU,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IAC/CX,uBAAuB,CAAC,EAAE,CAAC;IAC3BE,YAAY,CAAC,IAAI,CAAC;IAClBE,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMS,wBAAwB,GAAIL,KAAK,IAAK;IAC1C,MAAMM,YAAY,GAAGN,KAAK,CAACE,MAAM,CAACC,KAAK;IACvCX,uBAAuB,CAACc,YAAY,CAAC;IAErC,IAAIA,YAAY,IAAInB,cAAc,EAAE;MAClC,MAAMoB,QAAQ,GAAGtB,aAAa,CAACuB,OAAO,CAACrB,cAAc,CAAC;MACtD,MAAMsB,UAAU,GAAGzB,IAAI,CAAC0B,GAAG,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAACM,MAAM,CAAEC,GAAG,IAAK,CAACC,KAAK,CAACD,GAAG,CAAC,CAAC;MAC5F,IAAIL,UAAU,CAACO,MAAM,KAAK,CAAC,EAAE;MAE7B,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEH,MAAM,EAAEP,UAAU,CAACO;MAAO,CAAC,EAAE,CAACI,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC;MACjF,IAAIC,gBAAgB,GAAG,EAAE;MACzB,IAAIC,kBAAkB,GAAG,CAAC;MAE1B,QAAQjB,YAAY;QAClB,KAAK,QAAQ;UACX,MAAMkB,IAAI,GAAG1D,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC;UAChC,MAAMgB,MAAM,GAAG3D,EAAE,CAAC4D,iBAAiB,CAACjB,UAAU,CAAC;UAC/Ca,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKhD,EAAE,CAAC6D,MAAM,CAACb,GAAG,EAAEU,IAAI,EAAEC,MAAM,CAAC,CAAC;UACxEF,kBAAkB,GAAG,CAAC,GAAGE,MAAM,GAAGD,IAAI;UACtC;QAEF,KAAK,aAAa;UAChB,MAAMI,MAAM,GAAG,CAAC,GAAG9D,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC;UACtCa,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKc,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACF,MAAM,GAAGd,GAAG,CAAC,CAAC;UAC5ES,kBAAkB,GAAGK,MAAM;UAC3B;QAEF,KAAK,SAAS;UACZ,MAAMG,GAAG,GAAGF,IAAI,CAACE,GAAG,CAAC,GAAGtB,UAAU,CAAC;UACnC,MAAMuB,GAAG,GAAGH,IAAI,CAACG,GAAG,CAAC,GAAGvB,UAAU,CAAC;UACnCa,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAC,MAAM,CAAC,IAAIsB,GAAG,GAAGD,GAAG,CAAC,CAAC;UACxDR,kBAAkB,GAAGS,GAAG,GAAGD,GAAG;UAC9B;QAEF,KAAK,OAAO;UACV,MAAME,KAAK,GAAG,CAAC,CAAC,CAAC;UACjB,MAAMC,KAAK,GAAGpE,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC,GAAGwB,KAAK;UACzCX,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAAC0D,KAAK,CAACC,GAAG,CAACtB,GAAG,EAAEmB,KAAK,EAAEC,KAAK,CAAC,CAAC;UAC9EX,kBAAkB,GAAGU,KAAK,GAAGC,KAAK;UAClC;QAEF,KAAK,YAAY;UACf,MAAMG,OAAO,GAAGR,IAAI,CAACS,GAAG,CAACxE,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC,CAAC;UAC7C,MAAM8B,SAAS,GAAGV,IAAI,CAACS,GAAG,CAACxE,EAAE,CAAC4D,iBAAiB,CAACjB,UAAU,CAAC,CAAC;UAC5Da,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAAC+D,SAAS,CAACJ,GAAG,CAACtB,GAAG,EAAEuB,OAAO,EAAEE,SAAS,CAAC,CAAC;UACxFhB,kBAAkB,GAAG,CAAC,GAAGgB,SAAS;UAClC;QAEF,KAAK,MAAM;UACT,MAAME,KAAK,GAAG,CAAC,CAAC,CAAC;UACjB,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAC;UAChBpB,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAACiE,IAAI,CAACN,GAAG,CAACtB,GAAG,EAAE2B,KAAK,EAAEC,IAAI,CAAC,CAAC;UAC5EnB,kBAAkB,GAAGkB,KAAK,IAAIA,KAAK,GAAGC,IAAI,CAAC;UAC3C;QAEF,KAAK,SAAS;UACZ,MAAMC,YAAY,GAAG7E,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC;UACxC,MAAMmC,YAAY,GAAG,GAAG,CAAC,CAAC;UAC1BtB,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAACoE,OAAO,CAACT,GAAG,CAACtB,GAAG,EAAE8B,YAAY,EAAED,YAAY,CAAC,CAAC;UAC9FpB,kBAAkB,GAAGoB,YAAY,GAAGC,YAAY;UAChD;QAEF,KAAK,YAAY;UACf,MAAME,EAAE,GAAGrC,UAAU,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;UAClCM,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAACsE,SAAS,CAACX,GAAG,CAACtB,GAAG,EAAEgC,EAAE,CAAC,CAAC;UACxEvB,kBAAkB,GAAG,CAAC,GAAGuB,EAAE;UAC3B;QAEF,KAAK,QAAQ;UACX,MAAME,QAAQ,GAAGlF,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC;UACpC,MAAMwC,UAAU,GAAGnF,EAAE,CAAC4D,iBAAiB,CAACjB,UAAU,CAAC;UACnDa,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAACyE,MAAM,CAACd,GAAG,CAACtB,GAAG,EAAEkC,QAAQ,EAAEC,UAAU,CAAC,CAAC;UACvF1B,kBAAkB,GAAG,CAAC,GAAG0B,UAAU;UACnC;QAEF,KAAK,gBAAgB;UACnB,MAAME,GAAG,GAAG1C,UAAU,CAACO,MAAM,GAAG,CAAC;UACjCM,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAAC2E,QAAQ,CAAChB,GAAG,CAACtB,GAAG,EAAEqC,GAAG,CAAC,CAAC;UACxE5B,kBAAkB,GAAG,CAAC,GAAG4B,GAAG;UAC5B;QAEF,KAAK,UAAU;UACb,MAAME,MAAM,GAAG,EAAE,CAAC,CAAC;UACnB,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;UACzBhC,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKhD,EAAE,CAACyF,oBAAoB,CAACF,MAAM,EAAEC,WAAW,CAAC,CAACxC,GAAG,CAAC,IAAI,CAAC,CAAC;UAClGS,kBAAkB,GAAG8B,MAAM,GAAGC,WAAW;UACzC;QAEF,KAAK,SAAS;UACZ,MAAME,aAAa,GAAG1F,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC;UACzCa,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKhD,EAAE,CAAC2F,mBAAmB,CAACD,aAAa,CAAC,CAAC1C,GAAG,CAAC,IAAI,CAAC,CAAC;UAC3FS,kBAAkB,GAAGiC,aAAa;UAClC;QAEF,KAAK,WAAW;UACd,MAAME,KAAK,GAAG,CAAC,GAAG5F,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC;UACrCa,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAK4C,KAAK,GAAG7B,IAAI,CAAC8B,GAAG,CAAC,CAAC,GAAGD,KAAK,EAAE5C,GAAG,GAAG,CAAC,CAAC,CAAC;UAChFS,kBAAkB,GAAGmC,KAAK;UAC1B;QAEF,KAAK,WAAW;UACd,MAAME,KAAK,GAAG9F,EAAE,CAAC0D,IAAI,CAACf,UAAU,CAAC;UACjCa,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAMA,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG8C,KAAK,GAAGA,KAAM,CAAC;UAC3ErC,kBAAkB,GAAGqC,KAAK;UAC1B;QAEF,KAAK,mBAAmB;UACtB,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAC;UAChB,MAAMC,IAAI,GAAG,GAAG,CAAC,CAAC;UAClBxC,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAACsF,QAAQ,CAAC3B,GAAG,CAACtB,GAAG,EAAE+C,IAAI,EAAEC,IAAI,CAAC,CAAC;UAC/EvC,kBAAkB,GAAGsC,IAAI,GAAGC,IAAI;UAChC;QAEF,KAAK,gBAAgB;UACnB,MAAME,CAAC,GAAG,EAAE;UACZ,MAAMC,CAAC,GAAG,EAAE;UACZ,MAAMC,CAAC,GAAG,EAAE;UACZ5C,gBAAgB,GAAGb,UAAU,CAACC,GAAG,CAAEI,GAAG,IAAKrC,KAAK,CAAC0F,cAAc,CAAC/B,GAAG,CAACtB,GAAG,EAAEkD,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;UAClF3C,kBAAkB,GAAG0C,CAAC,GAAGD,CAAC;UAC1B;QAEF;UACE;MACJ;MAEApE,WAAW,CAAC2B,kBAAkB,CAAC6C,OAAO,CAAC,CAAC,CAAC,CAAC;MAC1C1E,YAAY,CAAC;QACXuB,MAAM;QACNoD,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,GAAGhE,YAAY,eAAe;UACrCtB,IAAI,EAAEsC,gBAAgB;UACtBiD,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,oBAAoB;UACjCC,OAAO,EAAE;QACX,CAAC;MAEL,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACE9F,OAAA;IAAK+F,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBAEpChG,OAAA;MAAK+F,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBhG,OAAA;QAAQiG,QAAQ,EAAE7E,kBAAmB;QAAA4E,QAAA,gBACnChG,OAAA;UAAQwB,KAAK,EAAC,EAAE;UAAAwE,QAAA,EAAC;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxC/F,aAAa,CAACyB,GAAG,CAAEuE,MAAM,iBACxBtG,OAAA;UAAqBwB,KAAK,EAAE8E,MAAO;UAAAN,QAAA,EAChCM;QAAM,GADIA,MAAM;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEX,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,EAER7F,cAAc,iBACbR,OAAA,CAAAE,SAAA;QAAA8F,QAAA,gBAEEhG,OAAA;UAAQiG,QAAQ,EAAExE,4BAA6B;UAAAuE,QAAA,gBAC7ChG,OAAA;YAAQwB,KAAK,EAAC,EAAE;YAAAwE,QAAA,EAAC;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrCrG,OAAA;YAAQwB,KAAK,EAAC,YAAY;YAAAwE,QAAA,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC9CrG,OAAA;YAAQwB,KAAK,EAAC,UAAU;YAAAwE,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC,EAER3F,wBAAwB,KAAK,YAAY,iBACxCV,OAAA;UAAQiG,QAAQ,EAAEvE,wBAAyB;UAAAsE,QAAA,gBACzChG,OAAA;YAAQwB,KAAK,EAAC,EAAE;YAAAwE,QAAA,EAAC;UAAmB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAC5CnF,uBAAuB,CAACa,GAAG,CAAEwE,IAAI,iBAChCvG,OAAA;YAAmBwB,KAAK,EAAE+E,IAAK;YAAAP,QAAA,EAC5BO;UAAI,GADMA,IAAI;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAET,CACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CACT,EAEA3F,wBAAwB,KAAK,UAAU,iBACtCV,OAAA;UAAQiG,QAAQ,EAAEvE,wBAAyB;UAAAsE,QAAA,gBACzChG,OAAA;YAAQwB,KAAK,EAAC,EAAE;YAAAwE,QAAA,EAAC;UAAmB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAC5ClF,qBAAqB,CAACY,GAAG,CAAEwE,IAAI,iBAC9BvG,OAAA;YAAmBwB,KAAK,EAAE+E,IAAK;YAAAP,QAAA,EAC5BO;UAAI,GADMA,IAAI;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAET,CACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CACT;MAAA,eACD,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAELvF,SAAS,iBACRd,OAAA;MAAK+F,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9BhG,OAAA,CAACZ,IAAI;QACHiB,IAAI,EAAES,SAAU;QAChB0F,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,OAAO,EAAE;YAAEC,KAAK,EAAE;cAAEC,OAAO,EAAE,IAAI;cAAEC,IAAI,EAAE,GAAGjG,oBAAoB,qBAAqBJ,cAAc;YAAG;UAAE;QAC1G;MAAE;QAAA0F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,EAEArF,QAAQ,iBACPhB,OAAA;MAAK+F,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eACjChG,OAAA;QAAAgG,QAAA,GAAI,YAAU,EAAChF,QAAQ;MAAA;QAAAkF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9F,EAAA,CA9OIH,oBAAoB;AAAA0G,EAAA,GAApB1G,oBAAoB;AAgP1B,eAAeA,oBAAoB;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}