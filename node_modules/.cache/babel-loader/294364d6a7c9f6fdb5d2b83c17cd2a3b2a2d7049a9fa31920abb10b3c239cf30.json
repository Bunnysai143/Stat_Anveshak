{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\nvar setLowWord = require('@stdlib/number-float64-base-set-low-word');\nvar setHighWord = require('@stdlib/number-float64-base-set-high-word');\nvar BIAS = require('@stdlib/constants-float64-exponent-bias');\nvar polyvalL = require('./polyval_l.js');\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff | 0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000 | 0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000 | 0; // asm type annotation\n\n// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023\nvar HIGH_BIASED_EXP_NEG_512 = 0x20000000 | 0; // asm type annotation\n\n// 0x00080000 = 524288 => 0 00000000000 10000000000000000000\nvar HIGH_SIGNIFICAND_HALF = 0x00080000 | 0; // asm type annotation\n\n// TODO: consider making an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20 | 0; // asm type annotation\n\nvar TWO53 = 9007199254740992.0; // 0x43400000, 0x00000000\n\n// 2/(3*LN2)\nvar CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD\n\n// (float)CP\nvar CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000\n\n// Low: CP_HI\nvar CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5\n\nvar BP = [1.0, 1.5];\nvar DP_HI = [0.0, 5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000\n];\nvar DP_LO = [0.0, 1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006\n];\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log2}(ax)\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @param {number} ahx - high word of `ax`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]\n* // returns [ 3.169923782348633, 0.0000012190936795504075 ]\n*/\nfunction log2ax(out, ax, ahx) {\n  var tmp;\n  var ss; // `hs + ls`\n  var s2; // `ss` squared\n  var hs;\n  var ls;\n  var ht;\n  var lt;\n  var bp; // `BP` constant\n  var dp; // `DP` constant\n  var hp;\n  var lp;\n  var hz;\n  var lz;\n  var t1;\n  var t2;\n  var t;\n  var r;\n  var u;\n  var v;\n  var n;\n  var j;\n  var k;\n  n = 0 | 0; // asm type annotation\n\n  // Check if `x` is subnormal...\n  if (ahx < HIGH_MIN_NORMAL_EXP) {\n    ax *= TWO53;\n    n -= 53 | 0; // asm type annotation\n    ahx = getHighWord(ax);\n  }\n  // Extract the unbiased exponent of `x`:\n  n += (ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS | 0; // asm type annotation\n\n  // Isolate the significand bits of `x`:\n  j = ahx & HIGH_SIGNIFICAND_MASK | 0; // asm type annotation\n\n  // Normalize `ahx` by setting the (biased) exponent to `1023`:\n  ahx = j | HIGH_BIASED_EXP_0 | 0; // asm type annotation\n\n  // Determine the interval of `|x|` by comparing significand bits...\n\n  // |x| < sqrt(3/2)\n  if (j <= 0x3988E) {\n    // 0 00000000000 00111001100010001110\n    k = 0;\n  }\n  // |x| < sqrt(3)\n  else if (j < 0xBB67A) {\n    // 0 00000000000 10111011011001111010\n    k = 1;\n  }\n  // |x| >= sqrt(3)\n  else {\n    k = 0;\n    n += 1 | 0; // asm type annotation\n    ahx -= HIGH_MIN_NORMAL_EXP;\n  }\n  // Load the normalized high word into `|x|`:\n  ax = setHighWord(ax, ahx);\n\n  // Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:\n  bp = BP[k]; // BP[0] = 1.0, BP[1] = 1.5\n  u = ax - bp; // (x-1) || (x-1.5)\n  v = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)\n  ss = u * v;\n  hs = setLowWord(ss, 0); // set all low word (less significant significand) bits to 0s\n\n  // Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):\n  tmp = (ahx >> 1 | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;\n  tmp += k << 18; // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`\n  ht = setHighWord(0.0, tmp);\n  lt = ax - (ht - bp);\n  ls = v * (u - hs * ht - hs * lt);\n\n  // Compute `log(ax)`...\n\n  s2 = ss * ss;\n  r = s2 * s2 * polyvalL(s2);\n  r += ls * (hs + ss);\n  s2 = hs * hs;\n  ht = 3.0 + s2 + r;\n  ht = setLowWord(ht, 0);\n  lt = r - (ht - 3.0 - s2);\n\n  // u+v = ss*(1+...):\n  u = hs * ht;\n  v = ls * ht + lt * ss;\n\n  // 2/(3LN2) * (ss+...):\n  hp = u + v;\n  hp = setLowWord(hp, 0);\n  lp = v - (hp - u);\n  hz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)\n  lz = CP_LO * hp + lp * CP + DP_LO[k];\n\n  // log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz\n  dp = DP_HI[k];\n  t = n;\n  t1 = hz + lz + dp + t; // log2(ax)\n  t1 = setLowWord(t1, 0);\n  t2 = lz - (t1 - t - dp - hz);\n  out[0] = t1;\n  out[1] = t2;\n  return out;\n}\n\n// EXPORTS //\n\nmodule.exports = log2ax;","map":{"version":3,"names":["getHighWord","require","setLowWord","setHighWord","BIAS","polyvalL","HIGH_SIGNIFICAND_MASK","HIGH_MIN_NORMAL_EXP","HIGH_BIASED_EXP_0","HIGH_BIASED_EXP_NEG_512","HIGH_SIGNIFICAND_HALF","HIGH_NUM_SIGNIFICAND_BITS","TWO53","CP","CP_HI","CP_LO","BP","DP_HI","DP_LO","log2ax","out","ax","ahx","tmp","ss","s2","hs","ls","ht","lt","bp","dp","hp","lp","hz","lz","t1","t2","t","r","u","v","n","j","k","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-pow/lib/log2ax.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar setLowWord = require( '@stdlib/number-float64-base-set-low-word' );\nvar setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar polyvalL = require( './polyval_l.js' );\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023\nvar HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation\n\n// 0x00080000 = 524288 => 0 00000000000 10000000000000000000\nvar HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation\n\n// TODO: consider making an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\nvar TWO53 = 9007199254740992.0;\t// 0x43400000, 0x00000000\n\n// 2/(3*LN2)\nvar CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD\n\n// (float)CP\nvar CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000\n\n// Low: CP_HI\nvar CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5\n\nvar BP = [\n\t1.0,\n\t1.5\n];\nvar DP_HI = [\n\t0.0,\n\t5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000\n];\nvar DP_LO = [\n\t0.0,\n\t1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006\n];\n\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log2}(ax)\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @param {number} ahx - high word of `ax`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]\n* // returns [ 3.169923782348633, 0.0000012190936795504075 ]\n*/\nfunction log2ax( out, ax, ahx ) {\n\tvar tmp;\n\tvar ss; // `hs + ls`\n\tvar s2; // `ss` squared\n\tvar hs;\n\tvar ls;\n\tvar ht;\n\tvar lt;\n\tvar bp; // `BP` constant\n\tvar dp; // `DP` constant\n\tvar hp;\n\tvar lp;\n\tvar hz;\n\tvar lz;\n\tvar t1;\n\tvar t2;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tn = 0|0; // asm type annotation\n\n\t// Check if `x` is subnormal...\n\tif ( ahx < HIGH_MIN_NORMAL_EXP ) {\n\t\tax *= TWO53;\n\t\tn -= 53|0; // asm type annotation\n\t\tahx = getHighWord( ax );\n\t}\n\t// Extract the unbiased exponent of `x`:\n\tn += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\n\t// Isolate the significand bits of `x`:\n\tj = (ahx & HIGH_SIGNIFICAND_MASK)|0; // asm type annotation\n\n\t// Normalize `ahx` by setting the (biased) exponent to `1023`:\n\tahx = (j | HIGH_BIASED_EXP_0)|0; // asm type annotation\n\n\t// Determine the interval of `|x|` by comparing significand bits...\n\n\t// |x| < sqrt(3/2)\n\tif ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110\n\t\tk = 0;\n\t}\n\t// |x| < sqrt(3)\n\telse if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010\n\t\tk = 1;\n\t}\n\t// |x| >= sqrt(3)\n\telse {\n\t\tk = 0;\n\t\tn += 1|0; // asm type annotation\n\t\tahx -= HIGH_MIN_NORMAL_EXP;\n\t}\n\t// Load the normalized high word into `|x|`:\n\tax = setHighWord( ax, ahx );\n\n\t// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:\n\tbp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5\n\tu = ax - bp; // (x-1) || (x-1.5)\n\tv = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)\n\tss = u * v;\n\ths = setLowWord( ss, 0 ); // set all low word (less significant significand) bits to 0s\n\n\t// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):\n\ttmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;\n\ttmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`\n\tht = setHighWord( 0.0, tmp );\n\tlt = ax - (ht - bp);\n\tls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );\n\n\t// Compute `log(ax)`...\n\n\ts2 = ss * ss;\n\tr = s2 * s2 * polyvalL( s2 );\n\tr += ls * (hs + ss);\n\ts2 = hs * hs;\n\tht = 3.0 + s2 + r;\n\tht = setLowWord( ht, 0 );\n\tlt = r - ((ht-3.0) - s2);\n\n\t// u+v = ss*(1+...):\n\tu = hs * ht;\n\tv = ( ls*ht ) + ( lt*ss );\n\n\t// 2/(3LN2) * (ss+...):\n\thp = u + v;\n\thp = setLowWord( hp, 0 );\n\tlp = v - (hp - u);\n\thz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)\n\tlz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];\n\n\t// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz\n\tdp = DP_HI[ k ];\n\tt = n;\n\tt1 = ((hz+lz) + dp) + t; // log2(ax)\n\tt1 = setLowWord( t1, 0 );\n\tt2 = lz - (((t1-t) - dp) - hz);\n\n\tout[ 0 ] = t1;\n\tout[ 1 ] = t2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = log2ax;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}