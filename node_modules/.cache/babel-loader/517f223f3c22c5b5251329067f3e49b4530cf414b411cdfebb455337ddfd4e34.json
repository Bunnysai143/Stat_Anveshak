{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = require('@stdlib/math-base-assert-is-nonnegative-integer');\nvar constantFunction = require('@stdlib/utils-constant-function');\nvar binomcoefln = require('@stdlib/math-base-special-binomcoefln');\nvar degenerate = require('@stdlib/stats-base-dists-degenerate-pmf').factory;\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar log1p = require('@stdlib/math-base-special-log1p');\nvar exp = require('@stdlib/math-base-special-exp');\nvar ln = require('@stdlib/math-base-special-ln');\nvar PINF = require('@stdlib/constants-float64-pinf');\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 10, 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\nfunction factory(n, p) {\n  if (isnan(n) || isnan(p) || !isNonNegativeInteger(n) || n === PINF || p < 0.0 || p > 1.0) {\n    return constantFunction(NaN);\n  }\n  if (p === 0.0 || n === 0) {\n    return degenerate(0.0);\n  }\n  if (p === 1.0) {\n    return degenerate(n);\n  }\n  return pmf;\n\n  /**\n  * Evaluates the probability mass function (PMF) for a binomial distribution.\n  *\n  * @private\n  * @param {number} x - input value\n  * @returns {Probability} evaluated PMF\n  *\n  * @example\n  * var y = pmf( 2.0 );\n  * // returns <number>\n  */\n  function pmf(x) {\n    var lnl;\n    if (isnan(x)) {\n      return NaN;\n    }\n    if (isNonNegativeInteger(x)) {\n      if (x > n) {\n        return 0.0;\n      }\n      lnl = binomcoefln(n, x);\n      lnl += x * ln(p) + (n - x) * log1p(-p);\n      return exp(lnl);\n    }\n    return 0.0;\n  }\n}\n\n// EXPORTS //\n\nmodule.exports = factory;","map":{"version":3,"names":["isNonNegativeInteger","require","constantFunction","binomcoefln","degenerate","factory","isnan","log1p","exp","ln","PINF","n","p","NaN","pmf","x","lnl","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/stats-base-dists-binomial-pmf/lib/factory.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar binomcoefln = require( '@stdlib/math-base-special-binomcoefln' );\nvar degenerate = require( '@stdlib/stats-base-dists-degenerate-pmf' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 10, 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar lnl;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tif ( x > n ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tlnl = binomcoefln( n, x );\n\t\t\tlnl += (x * ln( p )) + ((n - x) * log1p( -p ));\n\t\t\treturn exp( lnl );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAE,iDAAkD,CAAC;AACvF,IAAIC,gBAAgB,GAAGD,OAAO,CAAE,iCAAkC,CAAC;AACnE,IAAIE,WAAW,GAAGF,OAAO,CAAE,uCAAwC,CAAC;AACpE,IAAIG,UAAU,GAAGH,OAAO,CAAE,yCAA0C,CAAC,CAACI,OAAO;AAC7E,IAAIC,KAAK,GAAGL,OAAO,CAAE,iCAAkC,CAAC;AACxD,IAAIM,KAAK,GAAGN,OAAO,CAAE,iCAAkC,CAAC;AACxD,IAAIO,GAAG,GAAGP,OAAO,CAAE,+BAAgC,CAAC;AACpD,IAAIQ,EAAE,GAAGR,OAAO,CAAE,8BAA+B,CAAC;AAClD,IAAIS,IAAI,GAAGT,OAAO,CAAE,gCAAiC,CAAC;;AAGtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,OAAOA,CAAEM,CAAC,EAAEC,CAAC,EAAG;EACxB,IACCN,KAAK,CAAEK,CAAE,CAAC,IACVL,KAAK,CAAEM,CAAE,CAAC,IACV,CAACZ,oBAAoB,CAAEW,CAAE,CAAC,IAC1BA,CAAC,KAAKD,IAAI,IACVE,CAAC,GAAG,GAAG,IACPA,CAAC,GAAG,GAAG,EACN;IACD,OAAOV,gBAAgB,CAAEW,GAAI,CAAC;EAC/B;EACA,IAAKD,CAAC,KAAK,GAAG,IAAID,CAAC,KAAK,CAAC,EAAG;IAC3B,OAAOP,UAAU,CAAE,GAAI,CAAC;EACzB;EACA,IAAKQ,CAAC,KAAK,GAAG,EAAG;IAChB,OAAOR,UAAU,CAAEO,CAAE,CAAC;EACvB;EACA,OAAOG,GAAG;;EAEV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,SAASA,GAAGA,CAAEC,CAAC,EAAG;IACjB,IAAIC,GAAG;IACP,IAAKV,KAAK,CAAES,CAAE,CAAC,EAAG;MACjB,OAAOF,GAAG;IACX;IACA,IAAKb,oBAAoB,CAAEe,CAAE,CAAC,EAAG;MAChC,IAAKA,CAAC,GAAGJ,CAAC,EAAG;QACZ,OAAO,GAAG;MACX;MACAK,GAAG,GAAGb,WAAW,CAAEQ,CAAC,EAAEI,CAAE,CAAC;MACzBC,GAAG,IAAKD,CAAC,GAAGN,EAAE,CAAEG,CAAE,CAAC,GAAK,CAACD,CAAC,GAAGI,CAAC,IAAIR,KAAK,CAAE,CAACK,CAAE,CAAE;MAC9C,OAAOJ,GAAG,CAAEQ,GAAI,CAAC;IAClB;IACA,OAAO,GAAG;EACX;AACD;;AAGA;;AAEAC,MAAM,CAACC,OAAO,GAAGb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}