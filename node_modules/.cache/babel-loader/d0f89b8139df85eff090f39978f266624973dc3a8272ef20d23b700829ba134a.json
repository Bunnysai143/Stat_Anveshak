{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarElement } from \"chart.js\";\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarElement);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    if (column) {\n      const colIndex = columnHeaders.indexOf(column);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n    }\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n\n      // Generate chart data for the selected distribution\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          distributionData = columnData.map(val => ss.zScore(val, mean, stddev));\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          distributionData = columnData.map(val => lambda * Math.exp(-lambda * val));\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          distributionData = columnData.map(() => 1 / (max - min));\n          break;\n        case \"Gamma\":\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStddev = Math.log(ss.standardDeviation(columnData));\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\n          break;\n        case \"Beta\":\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\n          break;\n        case \"Binomial\":\n          const n = Math.max(...columnData); // Sample size\n          const p = 0.5; // Probability of success\n          distributionData = columnData.map(val => jStat.binomial.pdf(val, n, p));\n          break;\n        case \"Poisson\":\n          const lambda1 = ss.mean(columnData); // Average rate (mean)\n          distributionData = columnData.map(val => jStat.poisson.pdf(val, lambda1));\n          break;\n        case \"Geometric\":\n          const pGeo = 0.5; // Probability of success\n          distributionData = columnData.map(val => {\n            // Geometric distribution PMF formula: (1 - p)^(k-1) * p\n            if (val > 0) {\n              return Math.pow(1 - pGeo, val - 1) * pGeo;\n            } else {\n              return 0; // Return 0 for invalid values\n            }\n          });\n          break;\n        case \"Bernoulli\":\n          const pBernoulli = 0.5; // Probability of success\n          distributionData = columnData.map(() => jStat.bernoulli.pdf(1, pBernoulli));\n          break;\n        case \"Negative Binomial\":\n          const r = 10; // Number of successes\n          const pNegBin = 0.5; // Probability of success\n          distributionData = columnData.map(val => jStat.negbinom.pdf(val, r, pNegBin));\n          break;\n        case \"Hypergeometric\":\n          const M = 20; // Total population size\n          const n2 = 10; // Number of draws\n          const N = 5; // Number of successes in the population\n          distributionData = columnData.map(val => jStat.hypergeometric.pdf(val, M, N, n2));\n          break;\n        case \"Multinomial\":\n          const probabilities = [0.5, 0.3, 0.2]; // Probabilities for each outcome\n          distributionData = columnData.map(() => jStat.multinomial.pmf(probabilities));\n          break;\n        default:\n          break;\n      }\n\n      // Binning for continuous distributions (like Normal)\n      let binData = [];\n      if ([\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"].includes(distribution)) {\n        const binCount = 10; // Number of bins for histogram\n        const minVal = Math.min(...distributionData);\n        const maxVal = Math.max(...distributionData);\n        const binWidth = (maxVal - minVal) / binCount;\n\n        // Create bins\n        for (let i = 0; i < binCount; i++) {\n          const binStart = minVal + i * binWidth;\n          const binEnd = binStart + binWidth;\n          const binValues = distributionData.filter(val => val >= binStart && val < binEnd);\n          binData.push(binValues.length);\n        }\n      }\n      setChartData({\n        labels: Array.from({\n          length: binData.length\n        }, (_, i) => `Bin ${i + 1}`),\n        datasets: [{\n          label: `${selectedDistribution} Distribution`,\n          data: binData,\n          fill: true,\n          borderColor: \"rgba(75,192,192,1)\",\n          backgroundColor: \"rgba(75,192,192,0.2)\",\n          tension: 0.1,\n          type: distribution === \"Normal\" ? \"line\" : \"bar\" // Line for normal, bar for others\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleColumnChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Distribution Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Continuous\",\n              children: \"Continuous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Discrete\",\n              children: \"Discrete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Continuous Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Discrete Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleDistributionChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dist,\n              children: dist\n            }, dist, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: `${selectedDistribution} Distribution for ${selectedColumn}`\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"jdovsKa6abRc0szuR0ZX9WfUeC0=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","BarElement","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","handleDistributionTypeChange","handleDistributionChange","distribution","labels","Array","from","_","index","distributionData","mean","stddev","standardDeviation","zScore","lambda","Math","exp","min","max","alphaGamma","pow","betaGamma","gamma","sample","logMean","log","logStddev","random","alphaBeta","betaBeta","beta","n","p","binomial","pdf","lambda1","poisson","pGeo","pBernoulli","bernoulli","r","pNegBin","negbinom","M","n2","N","hypergeometric","probabilities","multinomial","pmf","binData","includes","binCount","minVal","maxVal","binWidth","i","binStart","binEnd","binValues","push","datasets","label","fill","borderColor","backgroundColor","tension","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","dist","options","responsive","plugins","title","display","text","scales","y","beginAtZero","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line } from \"react-chartjs-2\"; // Import Chart.js Line chart\r\nimport \"../styles/DistributionAnalysis.css\"; // Import external CSS file\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarElement } from \"chart.js\";\r\nimport jStat from \"jstat\"; // Import jstat for Beta distribution\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarElement);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"\r\n  ];\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\", \"Multinomial\"\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n\r\n    if (column) {\r\n      const colIndex = columnHeaders.indexOf(column);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n\r\n      if (columnData.length === 0) return;\r\n    }\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n  \r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data\r\n        .map((row) => parseFloat(row[colIndex]))\r\n        .filter((val) => !isNaN(val));\r\n  \r\n      if (columnData.length === 0) return;\r\n  \r\n      // Generate chart data for the selected distribution\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n  \r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          distributionData = columnData.map((val) => ss.zScore(val, mean, stddev));\r\n          break;\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          distributionData = columnData.map((val) => lambda * Math.exp(-lambda * val));\r\n          break;\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          break;\r\n        case \"Gamma\":\r\n          const alphaGamma = Math.pow(ss.mean(columnData), 2) / Math.pow(ss.standardDeviation(columnData), 2);\r\n          const betaGamma = Math.pow(ss.standardDeviation(columnData), 2) / ss.mean(columnData);\r\n          distributionData = columnData.map(() => jStat.gamma.sample(alphaGamma, betaGamma));\r\n          break;\r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStddev = Math.log(ss.standardDeviation(columnData));\r\n          distributionData = columnData.map(() => Math.exp(logMean + logStddev * Math.random()));\r\n          break;\r\n        case \"Beta\":\r\n          const alphaBeta = ss.mean(columnData) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          const betaBeta = (1 - ss.mean(columnData)) * (ss.mean(columnData) * (1 - ss.mean(columnData)) / Math.pow(ss.standardDeviation(columnData), 2) - 1);\r\n          distributionData = columnData.map(() => jStat.beta.sample(alphaBeta, betaBeta));\r\n          break;\r\n        case \"Binomial\":\r\n          const n = Math.max(...columnData);  // Sample size\r\n          const p = 0.5;  // Probability of success\r\n          distributionData = columnData.map((val) => jStat.binomial.pdf(val, n, p));\r\n          break;          \r\n        case \"Poisson\":\r\n          const lambda1 = ss.mean(columnData);  // Average rate (mean)\r\n          distributionData = columnData.map((val) => jStat.poisson.pdf(val, lambda1));\r\n          break;            \r\n        case \"Geometric\":\r\n            const pGeo = 0.5;  // Probability of success\r\n            distributionData = columnData.map((val) => {\r\n              // Geometric distribution PMF formula: (1 - p)^(k-1) * p\r\n              if (val > 0) {\r\n                return Math.pow(1 - pGeo, val - 1) * pGeo;\r\n              } else {\r\n                return 0;  // Return 0 for invalid values\r\n              }\r\n            });\r\n            break;                             \r\n        case \"Bernoulli\":\r\n          const pBernoulli = 0.5;  // Probability of success\r\n          distributionData = columnData.map(() => jStat.bernoulli.pdf(1, pBernoulli));\r\n          break;          \r\n        case \"Negative Binomial\":\r\n          const r = 10;  // Number of successes\r\n          const pNegBin = 0.5;  // Probability of success\r\n          distributionData = columnData.map((val) => jStat.negbinom.pdf(val, r, pNegBin));\r\n          break;          \r\n        case \"Hypergeometric\":\r\n          const M = 20;  // Total population size\r\n          const n2 = 10;  // Number of draws\r\n          const N = 5;   // Number of successes in the population\r\n          distributionData = columnData.map((val) => jStat.hypergeometric.pdf(val, M, N, n2));\r\n          break;          \r\n        case \"Multinomial\":\r\n          const probabilities = [0.5, 0.3, 0.2];  // Probabilities for each outcome\r\n          distributionData = columnData.map(() => jStat.multinomial.pmf(probabilities));\r\n          break;          \r\n        default:\r\n          break;\r\n      }\r\n\r\n      // Binning for continuous distributions (like Normal)\r\n      let binData = [];\r\n      if ([\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\"].includes(distribution)) {\r\n        const binCount = 10;  // Number of bins for histogram\r\n        const minVal = Math.min(...distributionData);\r\n        const maxVal = Math.max(...distributionData);\r\n        const binWidth = (maxVal - minVal) / binCount;\r\n\r\n        // Create bins\r\n        for (let i = 0; i < binCount; i++) {\r\n          const binStart = minVal + i * binWidth;\r\n          const binEnd = binStart + binWidth;\r\n          const binValues = distributionData.filter((val) => val >= binStart && val < binEnd);\r\n          binData.push(binValues.length);\r\n        }\r\n      }\r\n\r\n      setChartData({\r\n        labels: Array.from({ length: binData.length }, (_, i) => `Bin ${i + 1}`),\r\n        datasets: [\r\n          {\r\n            label: `${selectedDistribution} Distribution`,\r\n            data: binData,\r\n            fill: true,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n            tension: 0.1,\r\n            type: distribution === \"Normal\" ? \"line\" : \"bar\", // Line for normal, bar for others\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <div className=\"select-group\">\r\n          <label>Select Column:</label>\r\n          <select onChange={handleColumnChange}>\r\n            <option value=\"\">Select a column</option>\r\n            {columnHeaders.map((header) => (\r\n              <option key={header} value={header}>\r\n                {header}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <div className=\"select-group\">\r\n              <label>Select Distribution Type:</label>\r\n              <select onChange={handleDistributionTypeChange}>\r\n                <option value=\"\">Select Type</option>\r\n                <option value=\"Continuous\">Continuous</option>\r\n                <option value=\"Discrete\">Discrete</option>\r\n              </select>\r\n            </div>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Continuous Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {continuousDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <div className=\"select-group\">\r\n                <label>Select Discrete Distribution:</label>\r\n                <select onChange={handleDistributionChange}>\r\n                  <option value=\"\">Select Distribution</option>\r\n                  {discreteDistributions.map((dist) => (\r\n                    <option key={dist} value={dist}>\r\n                      {dist}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {chartData && (\r\n        <div className=\"chart-container\">\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              plugins: { title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` } },\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}