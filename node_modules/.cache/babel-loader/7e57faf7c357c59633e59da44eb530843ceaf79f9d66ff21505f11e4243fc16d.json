{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIP-PROJECT-WORK\\\\stat\\\\src\\\\components\\\\DistributionAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as ss from \"simple-statistics\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport \"../styles/DistributionAnalysis.css\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport jStat from \"jstat\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nconst DistributionAnalysis = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const [accuracy, setAccuracy] = useState(null);\n  const [params, setParams] = useState({});\n  const continuousDistributions = [\"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\", \"Weibull\", \"Chi-Square\", \"Cauchy\", \"T-Distribution\"];\n  const discreteDistributions = [\"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"];\n  const handleColumnChange = event => {\n    const column = event.target.value;\n    setSelectedColumn(column);\n    setChartData(null);\n    setSelectedDistributionType(\"\");\n    setSelectedDistribution(\"\");\n    setAccuracy(null);\n  };\n  const handleDistributionTypeChange = event => {\n    setSelectedDistributionType(event.target.value);\n    setSelectedDistribution(\"\");\n    setChartData(null);\n    setAccuracy(null);\n  };\n  const handleDistributionChange = event => {\n    const distribution = event.target.value;\n    setSelectedDistribution(distribution);\n    if (distribution && selectedColumn) {\n      const colIndex = columnHeaders.indexOf(selectedColumn);\n      const columnData = data.map(row => parseFloat(row[colIndex])).filter(val => !isNaN(val));\n      if (columnData.length === 0) return;\n      const labels = Array.from({\n        length: columnData.length\n      }, (_, index) => index + 1);\n      let distributionData = [];\n      let calculatedAccuracy = 0;\n      let chartType = \"line\";\n      const dynamicParams = {};\n      switch (distribution) {\n        case \"Normal\":\n          const mean = ss.mean(columnData);\n          const stddev = ss.standardDeviation(columnData);\n          dynamicParams.mean = mean;\n          dynamicParams.stddev = stddev;\n          distributionData = columnData.map(val => jStat.normal.pdf(val, mean, stddev));\n          // Calculate the goodness-of-fit using KS test or other methods\n          calculatedAccuracy = \"Goodness of fit: \" + (1 - stddev / mean).toFixed(4);\n          chartType = \"line\"; // bell curve\n          break;\n        case \"Exponential\":\n          const lambda = 1 / ss.mean(columnData);\n          dynamicParams.lambda = lambda;\n          distributionData = columnData.map(val => jStat.exponential.pdf(val, lambda));\n          calculatedAccuracy = \"Goodness of fit: \" + lambda.toFixed(4);\n          chartType = \"line\"; // exponential decay curve\n          break;\n        case \"Uniform\":\n          const min = Math.min(...columnData);\n          const max = Math.max(...columnData);\n          dynamicParams.min = min;\n          dynamicParams.max = max;\n          distributionData = columnData.map(() => 1 / (max - min));\n          calculatedAccuracy = \"Goodness of fit: \" + (max - min).toFixed(4);\n          chartType = \"line\"; // uniform distribution curve\n          break;\n        case \"Gamma\":\n          const shape = 2; // example shape\n          const scale = ss.mean(columnData) / shape;\n          dynamicParams.shape = shape;\n          dynamicParams.scale = scale;\n          distributionData = columnData.map(val => jStat.gamma.pdf(val, shape, scale));\n          calculatedAccuracy = \"Goodness of fit: \" + (shape * scale).toFixed(4);\n          chartType = \"line\"; // gamma distribution curve\n          break;\n        case \"Log-Normal\":\n          const logMean = Math.log(ss.mean(columnData));\n          const logStdDev = Math.log(ss.standardDeviation(columnData));\n          dynamicParams.logMean = logMean;\n          dynamicParams.logStdDev = logStdDev;\n          distributionData = columnData.map(val => jStat.lognormal.pdf(val, logMean, logStdDev));\n          calculatedAccuracy = \"Goodness of fit: \" + (1 / logStdDev).toFixed(4);\n          chartType = \"line\"; // log-normal distribution curve\n          break;\n        case \"Binomial\":\n          const trials = 10; // dynamically input from user\n          const probability = 0.5; // dynamically input from user\n          dynamicParams.trials = trials;\n          dynamicParams.probability = probability;\n          distributionData = columnData.map(val => ss.binomialDistribution(trials, probability)[val] || 0);\n          calculatedAccuracy = \"Goodness of fit: \" + (trials * probability).toFixed(4);\n          chartType = \"bar\"; // binomial histogram\n          break;\n        case \"Poisson\":\n          const poissonLambda = ss.mean(columnData);\n          dynamicParams.poissonLambda = poissonLambda;\n          distributionData = columnData.map(val => ss.poissonDistribution(poissonLambda)[val] || 0);\n          calculatedAccuracy = \"Goodness of fit: \" + poissonLambda.toFixed(4);\n          chartType = \"bar\"; // Poisson histogram\n          break;\n\n        // Handle other distributions similarly...\n\n        default:\n          break;\n      }\n      setParams(dynamicParams);\n      setAccuracy(calculatedAccuracy);\n      setChartData({\n        labels: labels,\n        datasets: [{\n          label: `${distribution} Distribution`,\n          data: distributionData,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }\n  };\n  const renderChart = () => {\n    const options = {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: `${selectedDistribution} Distribution for ${selectedColumn}`\n        }\n      }\n    };\n    return chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: selectedDistribution === \"Normal\" || selectedDistribution === \"Exponential\" ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this) : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"distribution-analysis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Distribution Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Column:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleColumnChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: header,\n          children: header\n        }, header, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Distribution Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionTypeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Continuous\",\n            children: \"Continuous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Discrete\",\n            children: \"Discrete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), selectedDistributionType === \"Continuous\" && /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this), continuousDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dist,\n            children: dist\n          }, dist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }, this), selectedDistributionType === \"Discrete\" && /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDistributionChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this), discreteDistributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dist,\n            children: dist\n          }, dist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), renderChart(), accuracy && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accuracy-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Accuracy: \", accuracy]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionAnalysis, \"yBZ94zJWIcYmrrvNFeJ8NfAF2GM=\");\n_c = DistributionAnalysis;\nexport default DistributionAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DistributionAnalysis\");","map":{"version":3,"names":["React","useState","ss","Line","Bar","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","jStat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DistributionAnalysis","data","columnHeaders","_s","selectedColumn","setSelectedColumn","selectedDistributionType","setSelectedDistributionType","selectedDistribution","setSelectedDistribution","chartData","setChartData","accuracy","setAccuracy","params","setParams","continuousDistributions","discreteDistributions","handleColumnChange","event","column","target","value","handleDistributionTypeChange","handleDistributionChange","distribution","colIndex","indexOf","columnData","map","row","parseFloat","filter","val","isNaN","length","labels","Array","from","_","index","distributionData","calculatedAccuracy","chartType","dynamicParams","mean","stddev","standardDeviation","normal","pdf","toFixed","lambda","exponential","min","Math","max","shape","scale","gamma","logMean","log","logStdDev","lognormal","trials","probability","binomialDistribution","poissonLambda","poissonDistribution","datasets","label","fill","borderColor","tension","renderChart","options","responsive","plugins","title","display","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","header","dist","_c","$RefreshReg$"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/src/components/DistributionAnalysis.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as ss from \"simple-statistics\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport \"../styles/DistributionAnalysis.css\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport jStat from \"jstat\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\r\n\r\nconst DistributionAnalysis = ({ data, columnHeaders }) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedDistributionType, setSelectedDistributionType] = useState(\"\");\r\n  const [selectedDistribution, setSelectedDistribution] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n  const [accuracy, setAccuracy] = useState(null);\r\n  const [params, setParams] = useState({});\r\n\r\n  const continuousDistributions = [\r\n    \"Normal\", \"Exponential\", \"Uniform\", \"Gamma\", \"Log-Normal\", \"Beta\", \"Weibull\", \"Chi-Square\", \"Cauchy\", \"T-Distribution\"\r\n  ];\r\n\r\n  const discreteDistributions = [\r\n    \"Binomial\", \"Poisson\", \"Geometric\", \"Bernoulli\", \"Negative Binomial\", \"Hypergeometric\"\r\n  ];\r\n\r\n  const handleColumnChange = (event) => {\r\n    const column = event.target.value;\r\n    setSelectedColumn(column);\r\n    setChartData(null);\r\n    setSelectedDistributionType(\"\");\r\n    setSelectedDistribution(\"\");\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionTypeChange = (event) => {\r\n    setSelectedDistributionType(event.target.value);\r\n    setSelectedDistribution(\"\");\r\n    setChartData(null);\r\n    setAccuracy(null);\r\n  };\r\n\r\n  const handleDistributionChange = (event) => {\r\n    const distribution = event.target.value;\r\n    setSelectedDistribution(distribution);\r\n\r\n    if (distribution && selectedColumn) {\r\n      const colIndex = columnHeaders.indexOf(selectedColumn);\r\n      const columnData = data.map((row) => parseFloat(row[colIndex])).filter((val) => !isNaN(val));\r\n      if (columnData.length === 0) return;\r\n\r\n      const labels = Array.from({ length: columnData.length }, (_, index) => index + 1);\r\n      let distributionData = [];\r\n      let calculatedAccuracy = 0;\r\n      let chartType = \"line\";\r\n\r\n      const dynamicParams = {};\r\n\r\n      switch (distribution) {\r\n        case \"Normal\":\r\n          const mean = ss.mean(columnData);\r\n          const stddev = ss.standardDeviation(columnData);\r\n          dynamicParams.mean = mean;\r\n          dynamicParams.stddev = stddev;\r\n          distributionData = columnData.map((val) => jStat.normal.pdf(val, mean, stddev));\r\n          // Calculate the goodness-of-fit using KS test or other methods\r\n          calculatedAccuracy = \"Goodness of fit: \" + (1 - (stddev / mean)).toFixed(4);\r\n          chartType = \"line\"; // bell curve\r\n          break;\r\n\r\n        case \"Exponential\":\r\n          const lambda = 1 / ss.mean(columnData);\r\n          dynamicParams.lambda = lambda;\r\n          distributionData = columnData.map((val) => jStat.exponential.pdf(val, lambda));\r\n          calculatedAccuracy = \"Goodness of fit: \" + lambda.toFixed(4);\r\n          chartType = \"line\"; // exponential decay curve\r\n          break;\r\n\r\n        case \"Uniform\":\r\n          const min = Math.min(...columnData);\r\n          const max = Math.max(...columnData);\r\n          dynamicParams.min = min;\r\n          dynamicParams.max = max;\r\n          distributionData = columnData.map(() => 1 / (max - min));\r\n          calculatedAccuracy = \"Goodness of fit: \" + (max - min).toFixed(4);\r\n          chartType = \"line\"; // uniform distribution curve\r\n          break;\r\n\r\n        case \"Gamma\":\r\n          const shape = 2; // example shape\r\n          const scale = ss.mean(columnData) / shape;\r\n          dynamicParams.shape = shape;\r\n          dynamicParams.scale = scale;\r\n          distributionData = columnData.map((val) => jStat.gamma.pdf(val, shape, scale));\r\n          calculatedAccuracy = \"Goodness of fit: \" + (shape * scale).toFixed(4);\r\n          chartType = \"line\"; // gamma distribution curve\r\n          break;\r\n\r\n        case \"Log-Normal\":\r\n          const logMean = Math.log(ss.mean(columnData));\r\n          const logStdDev = Math.log(ss.standardDeviation(columnData));\r\n          dynamicParams.logMean = logMean;\r\n          dynamicParams.logStdDev = logStdDev;\r\n          distributionData = columnData.map((val) => jStat.lognormal.pdf(val, logMean, logStdDev));\r\n          calculatedAccuracy = \"Goodness of fit: \" + (1 / logStdDev).toFixed(4);\r\n          chartType = \"line\"; // log-normal distribution curve\r\n          break;\r\n\r\n        case \"Binomial\":\r\n          const trials = 10; // dynamically input from user\r\n          const probability = 0.5; // dynamically input from user\r\n          dynamicParams.trials = trials;\r\n          dynamicParams.probability = probability;\r\n          distributionData = columnData.map((val) => ss.binomialDistribution(trials, probability)[val] || 0);\r\n          calculatedAccuracy = \"Goodness of fit: \" + (trials * probability).toFixed(4);\r\n          chartType = \"bar\"; // binomial histogram\r\n          break;\r\n\r\n        case \"Poisson\":\r\n          const poissonLambda = ss.mean(columnData);\r\n          dynamicParams.poissonLambda = poissonLambda;\r\n          distributionData = columnData.map((val) => ss.poissonDistribution(poissonLambda)[val] || 0);\r\n          calculatedAccuracy = \"Goodness of fit: \" + poissonLambda.toFixed(4);\r\n          chartType = \"bar\"; // Poisson histogram\r\n          break;\r\n\r\n        // Handle other distributions similarly...\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      setParams(dynamicParams);\r\n      setAccuracy(calculatedAccuracy);\r\n      setChartData({\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: `${distribution} Distribution`,\r\n            data: distributionData,\r\n            fill: false,\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  const renderChart = () => {\r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        title: { display: true, text: `${selectedDistribution} Distribution for ${selectedColumn}` },\r\n      },\r\n    };\r\n\r\n    return chartData ? (\r\n      <div className=\"chart-container\">\r\n        {selectedDistribution === \"Normal\" || selectedDistribution === \"Exponential\" ? (\r\n          <Line data={chartData} options={options} />\r\n        ) : (\r\n          <Bar data={chartData} options={options} />\r\n        )}\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-analysis\">\r\n      <h3>Distribution Analysis</h3>\r\n      <div className=\"controls\">\r\n        <label>Select Column:</label>\r\n        <select onChange={handleColumnChange}>\r\n          <option value=\"\">Select a column</option>\r\n          {columnHeaders.map((header) => (\r\n            <option key={header} value={header}>\r\n              {header}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        {selectedColumn && (\r\n          <>\r\n            <label>Select Distribution Type:</label>\r\n            <select onChange={handleDistributionTypeChange}>\r\n              <option value=\"\">Select Type</option>\r\n              <option value=\"Continuous\">Continuous</option>\r\n              <option value=\"Discrete\">Discrete</option>\r\n            </select>\r\n\r\n            {selectedDistributionType === \"Continuous\" && (\r\n              <select onChange={handleDistributionChange}>\r\n                <option value=\"\">Select Distribution</option>\r\n                {continuousDistributions.map((dist) => (\r\n                  <option key={dist} value={dist}>\r\n                    {dist}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            )}\r\n\r\n            {selectedDistributionType === \"Discrete\" && (\r\n              <select onChange={handleDistributionChange}>\r\n                <option value=\"\">Select Distribution</option>\r\n                {discreteDistributions.map((dist) => (\r\n                  <option key={dist} value={dist}>\r\n                    {dist}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {renderChart()}\r\n\r\n      {accuracy && (\r\n        <div className=\"accuracy-container\">\r\n          <h4>Accuracy: {accuracy}</h4>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}