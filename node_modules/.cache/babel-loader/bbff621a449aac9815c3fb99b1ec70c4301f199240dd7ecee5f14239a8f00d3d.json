{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus(str) {\n  return str[0] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros(n) {\n  var out = '';\n  var i;\n  for (i = 0; i < n; i++) {\n    out += '0';\n  }\n  return out;\n}\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad(str, width, right) {\n  var negative = false;\n  var pad = width - str.length;\n  if (pad < 0) {\n    return str;\n  }\n  if (startsWithMinus(str)) {\n    negative = true;\n    str = str.substr(1);\n  }\n  str = right ? str + zeros(pad) : zeros(pad) + str;\n  if (negative) {\n    str = '-' + str;\n  }\n  return str;\n}\n\n// EXPORTS //\n\nmodule.exports = zeroPad;","map":{"version":3,"names":["startsWithMinus","str","zeros","n","out","i","zeroPad","width","right","negative","pad","length","substr","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zeroPad;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAeA,CAAEC,GAAG,EAAG;EAC/B,OAAOA,GAAG,CAAE,CAAC,CAAE,KAAK,GAAG;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAAEC,CAAC,EAAG;EACnB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,CAAC;EACL,KAAMA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAG;IACzBD,GAAG,IAAI,GAAG;EACX;EACA,OAAOA,GAAG;AACX;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,OAAOA,CAAEL,GAAG,EAAEM,KAAK,EAAEC,KAAK,EAAG;EACrC,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIC,GAAG,GAAGH,KAAK,GAAGN,GAAG,CAACU,MAAM;EAC5B,IAAKD,GAAG,GAAG,CAAC,EAAG;IACd,OAAOT,GAAG;EACX;EACA,IAAKD,eAAe,CAAEC,GAAI,CAAC,EAAG;IAC7BQ,QAAQ,GAAG,IAAI;IACfR,GAAG,GAAGA,GAAG,CAACW,MAAM,CAAE,CAAE,CAAC;EACtB;EACAX,GAAG,GAAKO,KAAK,GACZP,GAAG,GAAGC,KAAK,CAAEQ,GAAI,CAAC,GAClBR,KAAK,CAAEQ,GAAI,CAAC,GAAGT,GAAG;EACnB,IAAKQ,QAAQ,EAAG;IACfR,GAAG,GAAG,GAAG,GAAGA,GAAG;EAChB;EACA,OAAOA,GAAG;AACX;;AAGA;;AAEAY,MAAM,CAACC,OAAO,GAAGR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}