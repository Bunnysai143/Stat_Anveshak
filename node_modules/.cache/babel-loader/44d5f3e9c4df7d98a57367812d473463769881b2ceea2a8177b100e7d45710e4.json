{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar isInfinite = require('@stdlib/math-base-assert-is-infinite');\nvar abs = require('@stdlib/math-base-special-abs');\nvar ln = require('@stdlib/math-base-special-ln');\nvar trunc = require('@stdlib/math-base-special-trunc');\nvar sinpi = require('@stdlib/math-base-special-sinpi');\nvar PI = require('@stdlib/constants-float64-pi');\nvar PINF = require('@stdlib/constants-float64-pinf');\nvar polyvalA1 = require('./polyval_a1.js');\nvar polyvalA2 = require('./polyval_a2.js');\nvar polyvalR = require('./polyval_r.js');\nvar polyvalS = require('./polyval_s.js');\nvar polyvalT1 = require('./polyval_t1.js');\nvar polyvalT2 = require('./polyval_t2.js');\nvar polyvalT3 = require('./polyval_t3.js');\nvar polyvalU = require('./polyval_u.js');\nvar polyvalV = require('./polyval_v.js');\nvar polyvalW = require('./polyval_w.js');\n\n// VARIABLES //\n\nvar A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8\nvar A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD\nvar RC = 1.0;\nvar SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2\nvar T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509\nvar T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B\nvar UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar VC = 1.0;\nvar WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69\nvar YMIN = 1.461632144968362245;\nvar TWO52 = 4503599627370496; // 2**52\nvar TWO58 = 288230376151711744; // 2**58\nvar TINY = 8.470329472543003e-22;\nvar TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F\nvar TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42\nvar TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function.\n*\n* ## Method\n*\n* 1.  Argument reduction for \\\\(0 < x \\leq 8\\\\). Since \\\\(\\Gamma(1+s) = s \\Gamma(s)\\\\), for \\\\(x \\in \\[0,8]\\\\), we may reduce \\\\(x\\\\) to a number in \\\\(\\[1.5,2.5]\\\\) by\n*\n*     ```tex\n*     \\operatorname{lgamma}(1+s) = \\ln(s) + \\operatorname{lgamma}(s)\n*     ```\n*\n*     For example,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(7.3) &= \\ln(6.3) + \\operatorname{lgamma}(6.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3) + \\operatorname{lgamma}(5.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3 \\cdot 4.3 \\cdot 3.3 \\cdot2.3) + \\operatorname{lgamma}(2.3)\n*     \\end{align*}\n*     ```\n*\n* 2.  Compute a polynomial approximation of \\\\(\\mathrm{lgamma}\\\\) around its minimum (\\\\(\\mathrm{ymin} = 1.461632144968362245\\\\)) to maintain monotonicity. On the interval \\\\(\\[\\mathrm{ymin} - 0.23, \\mathrm{ymin} + 0.27]\\\\) (i.e., \\\\(\\[1.23164,1.73163]\\\\)), we let \\\\(z = x - \\mathrm{ymin}\\\\) and use\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \\cdot \\operatorname{poly}(z)\n*     ```\n*\n*     where \\\\(\\operatorname{poly}(z)\\\\) is a \\\\(14\\\\) degree polynomial.\n*\n* 3.  Compute a rational approximation in the primary interval \\\\(\\[2,3]\\\\). Let \\\\( s = x - 2.0 \\\\). We can thus use the approximation\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = \\frac{s}{2} + s\\frac{\\operatorname{P}(s)}{\\operatorname{Q}(s)}\n*     ```\n*\n*     with accuracy\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P}}{\\mathrm{Q}} - \\biggr(\\operatorname{lgamma}(x)-\\frac{s}{2}\\biggl)\\biggl| < 2^{-61.71}\n*     ```\n*\n*     The algorithms are based on the observation\n*\n*     ```tex\n*     \\operatorname{lgamma}(2+s) = s(1 - \\gamma) + \\frac{\\zeta(2) - 1}{2} s^2 - \\frac{\\zeta(3) - 1}{3} s^3 + \\ldots\n*     ```\n*\n*     where \\\\(\\zeta\\\\) is the zeta function and \\\\(\\gamma = 0.5772156649...\\\\) is the Euler-Mascheroni constant, which is very close to \\\\(0.5\\\\).\n*\n* 4.  For \\\\(x \\geq 8\\\\),\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr) \\ln(x) - x + \\frac{\\ln(2\\pi)}{2} + \\frac{1}{12x} - \\frac{1}{360x^3} + \\ldots\n*     ```\n*\n*     which can be expressed\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)-\\frac{\\ln(2\\pi)-1}{2} + \\ldots\n*     ```\n*\n*     Let \\\\(z = \\frac{1}{x}\\\\). We can then use the approximation\n*\n*     ```tex\n*     f(z) = \\operatorname{lgamma}(x) - \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)\n*     ```\n*\n*     by\n*\n*     ```tex\n*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \\ldots + w_6 z^{11}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |w - f(z)| < 2^{-58.74}\n*     ```\n*\n* 5.  For negative \\\\(x\\\\), since\n*\n*     ```tex\n*     -x \\Gamma(-x) \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)}\n*     ```\n*\n*     where \\\\(\\Gamma\\\\) is the gamma function, we have\n*\n*     ```tex\n*     \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)(-x)\\Gamma(-x)}\n*     ```\n*\n*     Since \\\\(\\Gamma(-x)\\\\) is positive,\n*\n*     ```tex\n*     \\operatorname{sign}(\\Gamma(x)) = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     for \\\\(x < 0\\\\). Hence, for \\\\(x < 0\\\\),\n*\n*     ```tex\n*     \\mathrm{signgam} = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(x) &= \\ln(|\\Gamma(x)|) \\\\\n*     &= \\ln\\biggl(\\frac{\\pi}{|x \\sin(\\pi x)|}\\biggr) - \\operatorname{lgamma}(-x)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Note that one should avoid computing \\\\(\\pi (-x)\\\\) directly in the computation of \\\\(\\sin(\\pi (-x))\\\\).\n*\n*     <!-- </note> -->\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{lgamma}(2+s) &\\approx s (1-\\gamma) & \\mathrm{for\\ tiny\\ s} \\\\\n* \\operatorname{lgamma}(x) &\\approx -\\ln(x) & \\mathrm{for\\ tiny\\ x} \\\\\n* \\operatorname{lgamma}(1) &= 0 & \\\\\n* \\operatorname{lgamma}(2) &= 0 & \\\\\n* \\operatorname{lgamma}(0) &= \\infty & \\\\\n* \\operatorname{lgamma}(\\infty) &= \\infty & \\\\\n* \\operatorname{lgamma}(-\\mathrm{integer}) &= \\pm \\infty\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammaln( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 4.0 );\n* // returns ~1.792\n*\n* @example\n* var v = gammaln( -0.5 );\n* // returns ~1.266\n*\n* @example\n* var v = gammaln( 0.5 );\n* // returns ~0.572\n*\n* @example\n* var v = gammaln( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gammaln( NaN );\n* // returns NaN\n*/\nfunction gammaln(x) {\n  var isNegative;\n  var nadj;\n  var flg;\n  var p3;\n  var p2;\n  var p1;\n  var p;\n  var q;\n  var t;\n  var w;\n  var y;\n  var z;\n  var r;\n\n  // Special cases: NaN, +-infinity\n  if (isnan(x) || isInfinite(x)) {\n    return x;\n  }\n  // Special case: 0\n  if (x === 0.0) {\n    return PINF;\n  }\n  if (x < 0.0) {\n    isNegative = true;\n    x = -x;\n  } else {\n    isNegative = false;\n  }\n  // If |x| < 2**-70, return -ln(|x|)\n  if (x < TINY) {\n    return -ln(x);\n  }\n  if (isNegative) {\n    // If |x| >= 2**52, must be -integer\n    if (x >= TWO52) {\n      return PINF;\n    }\n    t = sinpi(x);\n    if (t === 0.0) {\n      return PINF;\n    }\n    nadj = ln(PI / abs(t * x));\n  }\n  // If x equals 1 or 2, return 0\n  if (x === 1.0 || x === 2.0) {\n    return 0.0;\n  }\n  // If x < 2, use lgamma(x) = lgamma(x+1) - log(x)\n  if (x < 2.0) {\n    if (x <= 0.9) {\n      r = -ln(x);\n\n      // 0.7316 <= x <=  0.9\n      if (x >= YMIN - 1.0 + 0.27) {\n        y = 1.0 - x;\n        flg = 0;\n      }\n      // 0.2316 <= x < 0.7316\n      else if (x >= YMIN - 1.0 - 0.27) {\n        y = x - (TC - 1.0);\n        flg = 1;\n      }\n      // 0 < x < 0.2316\n      else {\n        y = x;\n        flg = 2;\n      }\n    } else {\n      r = 0.0;\n\n      // 1.7316 <= x < 2\n      if (x >= YMIN + 0.27) {\n        y = 2.0 - x;\n        flg = 0;\n      }\n      // 1.2316 <= x < 1.7316\n      else if (x >= YMIN - 0.27) {\n        y = x - TC;\n        flg = 1;\n      }\n      // 0.9 < x < 1.2316\n      else {\n        y = x - 1.0;\n        flg = 2;\n      }\n    }\n    switch (flg) {\n      // eslint-disable-line default-case\n      case 0:\n        z = y * y;\n        p1 = A1C + z * polyvalA1(z);\n        p2 = z * (A2C + z * polyvalA2(z));\n        p = y * p1 + p2;\n        r += p - 0.5 * y;\n        break;\n      case 1:\n        z = y * y;\n        w = z * y;\n        p1 = T1C + w * polyvalT1(w);\n        p2 = T2C + w * polyvalT2(w);\n        p3 = T3C + w * polyvalT3(w);\n        p = z * p1 - (TT - w * (p2 + y * p3));\n        r += TF + p;\n        break;\n      case 2:\n        p1 = y * (UC + y * polyvalU(y));\n        p2 = VC + y * polyvalV(y);\n        r += -0.5 * y + p1 / p2;\n        break;\n    }\n  }\n  // 2 <= x < 8\n  else if (x < 8.0) {\n    flg = trunc(x);\n    y = x - flg;\n    p = y * (SC + y * polyvalS(y));\n    q = RC + y * polyvalR(y);\n    r = 0.5 * y + p / q;\n    z = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)\n    switch (flg) {\n      // eslint-disable-line default-case\n      case 7:\n        z *= y + 6.0;\n\n      /* Falls through */\n      case 6:\n        z *= y + 5.0;\n\n      /* Falls through */\n      case 5:\n        z *= y + 4.0;\n\n      /* Falls through */\n      case 4:\n        z *= y + 3.0;\n\n      /* Falls through */\n      case 3:\n        z *= y + 2.0;\n        r += ln(z);\n    }\n  }\n  // 8 <= x < 2**58\n  else if (x < TWO58) {\n    t = ln(x);\n    z = 1.0 / x;\n    y = z * z;\n    w = WC + z * polyvalW(y);\n    r = (x - 0.5) * (t - 1.0) + w;\n  }\n  // 2**58 <= x <= Inf\n  else {\n    r = x * (ln(x) - 1.0);\n  }\n  if (isNegative) {\n    r = nadj - r;\n  }\n  return r;\n}\n\n// EXPORTS //\n\nmodule.exports = gammaln;","map":{"version":3,"names":["isnan","require","isInfinite","abs","ln","trunc","sinpi","PI","PINF","polyvalA1","polyvalA2","polyvalR","polyvalS","polyvalT1","polyvalT2","polyvalT3","polyvalU","polyvalV","polyvalW","A1C","A2C","RC","SC","T1C","T2C","T3C","UC","VC","WC","YMIN","TWO52","TWO58","TINY","TC","TF","TT","gammaln","x","isNegative","nadj","flg","p3","p2","p1","p","q","t","w","y","z","r","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-gammaln/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar trunc = require( '@stdlib/math-base-special-trunc' );\nvar sinpi = require( '@stdlib/math-base-special-sinpi' );\nvar PI = require( '@stdlib/constants-float64-pi' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar polyvalA1 = require( './polyval_a1.js' );\nvar polyvalA2 = require( './polyval_a2.js' );\nvar polyvalR = require( './polyval_r.js' );\nvar polyvalS = require( './polyval_s.js' );\nvar polyvalT1 = require( './polyval_t1.js' );\nvar polyvalT2 = require( './polyval_t2.js' );\nvar polyvalT3 = require( './polyval_t3.js' );\nvar polyvalU = require( './polyval_u.js' );\nvar polyvalV = require( './polyval_v.js' );\nvar polyvalW = require( './polyval_w.js' );\n\n\n// VARIABLES //\n\nvar A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8\nvar A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD\nvar RC = 1.0;\nvar SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2\nvar T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509\nvar T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B\nvar UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar VC = 1.0;\nvar WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69\nvar YMIN = 1.461632144968362245;\nvar TWO52 = 4503599627370496; // 2**52\nvar TWO58 = 288230376151711744; // 2**58\nvar TINY = 8.470329472543003e-22;\nvar TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F\nvar TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42\nvar TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function.\n*\n* ## Method\n*\n* 1.  Argument reduction for \\\\(0 < x \\leq 8\\\\). Since \\\\(\\Gamma(1+s) = s \\Gamma(s)\\\\), for \\\\(x \\in \\[0,8]\\\\), we may reduce \\\\(x\\\\) to a number in \\\\(\\[1.5,2.5]\\\\) by\n*\n*     ```tex\n*     \\operatorname{lgamma}(1+s) = \\ln(s) + \\operatorname{lgamma}(s)\n*     ```\n*\n*     For example,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(7.3) &= \\ln(6.3) + \\operatorname{lgamma}(6.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3) + \\operatorname{lgamma}(5.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3 \\cdot 4.3 \\cdot 3.3 \\cdot2.3) + \\operatorname{lgamma}(2.3)\n*     \\end{align*}\n*     ```\n*\n* 2.  Compute a polynomial approximation of \\\\(\\mathrm{lgamma}\\\\) around its minimum (\\\\(\\mathrm{ymin} = 1.461632144968362245\\\\)) to maintain monotonicity. On the interval \\\\(\\[\\mathrm{ymin} - 0.23, \\mathrm{ymin} + 0.27]\\\\) (i.e., \\\\(\\[1.23164,1.73163]\\\\)), we let \\\\(z = x - \\mathrm{ymin}\\\\) and use\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \\cdot \\operatorname{poly}(z)\n*     ```\n*\n*     where \\\\(\\operatorname{poly}(z)\\\\) is a \\\\(14\\\\) degree polynomial.\n*\n* 3.  Compute a rational approximation in the primary interval \\\\(\\[2,3]\\\\). Let \\\\( s = x - 2.0 \\\\). We can thus use the approximation\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = \\frac{s}{2} + s\\frac{\\operatorname{P}(s)}{\\operatorname{Q}(s)}\n*     ```\n*\n*     with accuracy\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P}}{\\mathrm{Q}} - \\biggr(\\operatorname{lgamma}(x)-\\frac{s}{2}\\biggl)\\biggl| < 2^{-61.71}\n*     ```\n*\n*     The algorithms are based on the observation\n*\n*     ```tex\n*     \\operatorname{lgamma}(2+s) = s(1 - \\gamma) + \\frac{\\zeta(2) - 1}{2} s^2 - \\frac{\\zeta(3) - 1}{3} s^3 + \\ldots\n*     ```\n*\n*     where \\\\(\\zeta\\\\) is the zeta function and \\\\(\\gamma = 0.5772156649...\\\\) is the Euler-Mascheroni constant, which is very close to \\\\(0.5\\\\).\n*\n* 4.  For \\\\(x \\geq 8\\\\),\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr) \\ln(x) - x + \\frac{\\ln(2\\pi)}{2} + \\frac{1}{12x} - \\frac{1}{360x^3} + \\ldots\n*     ```\n*\n*     which can be expressed\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)-\\frac{\\ln(2\\pi)-1}{2} + \\ldots\n*     ```\n*\n*     Let \\\\(z = \\frac{1}{x}\\\\). We can then use the approximation\n*\n*     ```tex\n*     f(z) = \\operatorname{lgamma}(x) - \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)\n*     ```\n*\n*     by\n*\n*     ```tex\n*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \\ldots + w_6 z^{11}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |w - f(z)| < 2^{-58.74}\n*     ```\n*\n* 5.  For negative \\\\(x\\\\), since\n*\n*     ```tex\n*     -x \\Gamma(-x) \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)}\n*     ```\n*\n*     where \\\\(\\Gamma\\\\) is the gamma function, we have\n*\n*     ```tex\n*     \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)(-x)\\Gamma(-x)}\n*     ```\n*\n*     Since \\\\(\\Gamma(-x)\\\\) is positive,\n*\n*     ```tex\n*     \\operatorname{sign}(\\Gamma(x)) = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     for \\\\(x < 0\\\\). Hence, for \\\\(x < 0\\\\),\n*\n*     ```tex\n*     \\mathrm{signgam} = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(x) &= \\ln(|\\Gamma(x)|) \\\\\n*     &= \\ln\\biggl(\\frac{\\pi}{|x \\sin(\\pi x)|}\\biggr) - \\operatorname{lgamma}(-x)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Note that one should avoid computing \\\\(\\pi (-x)\\\\) directly in the computation of \\\\(\\sin(\\pi (-x))\\\\).\n*\n*     <!-- </note> -->\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{lgamma}(2+s) &\\approx s (1-\\gamma) & \\mathrm{for\\ tiny\\ s} \\\\\n* \\operatorname{lgamma}(x) &\\approx -\\ln(x) & \\mathrm{for\\ tiny\\ x} \\\\\n* \\operatorname{lgamma}(1) &= 0 & \\\\\n* \\operatorname{lgamma}(2) &= 0 & \\\\\n* \\operatorname{lgamma}(0) &= \\infty & \\\\\n* \\operatorname{lgamma}(\\infty) &= \\infty & \\\\\n* \\operatorname{lgamma}(-\\mathrm{integer}) &= \\pm \\infty\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammaln( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 4.0 );\n* // returns ~1.792\n*\n* @example\n* var v = gammaln( -0.5 );\n* // returns ~1.266\n*\n* @example\n* var v = gammaln( 0.5 );\n* // returns ~0.572\n*\n* @example\n* var v = gammaln( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gammaln( NaN );\n* // returns NaN\n*/\nfunction gammaln( x ) {\n\tvar isNegative;\n\tvar nadj;\n\tvar flg;\n\tvar p3;\n\tvar p2;\n\tvar p1;\n\tvar p;\n\tvar q;\n\tvar t;\n\tvar w;\n\tvar y;\n\tvar z;\n\tvar r;\n\n\t// Special cases: NaN, +-infinity\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\treturn x;\n\t}\n\t// Special case: 0\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < 0.0 ) {\n\t\tisNegative = true;\n\t\tx = -x;\n\t} else {\n\t\tisNegative = false;\n\t}\n\t// If |x| < 2**-70, return -ln(|x|)\n\tif ( x < TINY ) {\n\t\treturn -ln( x );\n\t}\n\tif ( isNegative ) {\n\t\t// If |x| >= 2**52, must be -integer\n\t\tif ( x >= TWO52 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tt = sinpi( x );\n\t\tif ( t === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tnadj = ln( PI / abs( t*x ) );\n\t}\n\t// If x equals 1 or 2, return 0\n\tif ( x === 1.0 || x === 2.0 ) {\n\t\treturn 0.0;\n\t}\n\t// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)\n\tif ( x < 2.0 ) {\n\t\tif ( x <= 0.9 ) {\n\t\t\tr = -ln( x );\n\n\t\t\t// 0.7316 <= x <=  0.9\n\t\t\tif ( x >= ( YMIN - 1.0 + 0.27 ) ) {\n\t\t\t\ty = 1.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 0.2316 <= x < 0.7316\n\t\t\telse if ( x >= (YMIN - 1.0 - 0.27) ) {\n\t\t\t\ty = x - (TC - 1.0);\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0 < x < 0.2316\n\t\t\telse {\n\t\t\t\ty = x;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t} else {\n\t\t\tr = 0.0;\n\n\t\t\t// 1.7316 <= x < 2\n\t\t\tif ( x >= (YMIN + 0.27) ) {\n\t\t\t\ty = 2.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 1.2316 <= x < 1.7316\n\t\t\telse if ( x >= (YMIN - 0.27) ) {\n\t\t\t\ty = x - TC;\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0.9 < x < 1.2316\n\t\t\telse {\n\t\t\t\ty = x - 1.0;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t}\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 0:\n\t\t\tz = y * y;\n\t\t\tp1 = A1C + (z*polyvalA1( z ));\n\t\t\tp2 = z * (A2C + (z*polyvalA2( z )));\n\t\t\tp = (y*p1) + p2;\n\t\t\tr += ( p - (0.5*y) );\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tz = y * y;\n\t\t\tw = z * y;\n\t\t\tp1 = T1C + (w*polyvalT1( w ));\n\t\t\tp2 = T2C + (w*polyvalT2( w ));\n\t\t\tp3 = T3C + (w*polyvalT3( w ));\n\t\t\tp = (z*p1) - (TT - (w*(p2+(y*p3))));\n\t\t\tr += ( TF + p );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tp1 = y * (UC + (y*polyvalU( y )));\n\t\t\tp2 = VC + (y*polyvalV( y ));\n\t\t\tr += (-0.5*y) + (p1/p2);\n\t\t\tbreak;\n\t\t}\n\t}\n\t// 2 <= x < 8\n\telse if ( x < 8.0 ) {\n\t\tflg = trunc( x );\n\t\ty = x - flg;\n\t\tp = y * (SC + (y*polyvalS( y )));\n\t\tq = RC + (y*polyvalR( y ));\n\t\tr = (0.5*y) + (p/q);\n\t\tz = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 7:\n\t\t\tz *= y + 6.0;\n\n\t\t\t/* Falls through */\n\t\tcase 6:\n\t\t\tz *= y + 5.0;\n\n\t\t\t/* Falls through */\n\t\tcase 5:\n\t\t\tz *= y + 4.0;\n\n\t\t\t/* Falls through */\n\t\tcase 4:\n\t\t\tz *= y + 3.0;\n\n\t\t\t/* Falls through */\n\t\tcase 3:\n\t\t\tz *= y + 2.0;\n\t\t\tr += ln( z );\n\t\t}\n\t}\n\t// 8 <= x < 2**58\n\telse if ( x < TWO58 ) {\n\t\tt = ln( x );\n\t\tz = 1.0 / x;\n\t\ty = z * z;\n\t\tw = WC + (z*polyvalW( y ));\n\t\tr = ((x-0.5)*(t-1.0)) + w;\n\t}\n\t// 2**58 <= x <= Inf\n\telse {\n\t\tr = x * ( ln(x)-1.0 );\n\t}\n\tif ( isNegative ) {\n\t\tr = nadj - r;\n\t}\n\treturn r;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gammaln;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}