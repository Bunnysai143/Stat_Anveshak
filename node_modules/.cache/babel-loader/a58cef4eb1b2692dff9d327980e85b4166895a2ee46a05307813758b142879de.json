{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces(n) {\n  var out = '';\n  var i;\n  for (i = 0; i < n; i++) {\n    out += ' ';\n  }\n  return out;\n}\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad(str, width, right) {\n  var pad = width - str.length;\n  if (pad < 0) {\n    return str;\n  }\n  str = right ? str + spaces(pad) : spaces(pad) + str;\n  return str;\n}\n\n// EXPORTS //\n\nmodule.exports = spacePad;","map":{"version":3,"names":["spaces","n","out","i","spacePad","str","width","right","pad","length","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = spacePad;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAMA,CAAEC,CAAC,EAAG;EACpB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,CAAC;EACL,KAAMA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAG;IACzBD,GAAG,IAAI,GAAG;EACX;EACA,OAAOA,GAAG;AACX;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,QAAQA,CAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAG;EACtC,IAAIC,GAAG,GAAGF,KAAK,GAAGD,GAAG,CAACI,MAAM;EAC5B,IAAKD,GAAG,GAAG,CAAC,EAAG;IACd,OAAOH,GAAG;EACX;EACAA,GAAG,GAAKE,KAAK,GACZF,GAAG,GAAGL,MAAM,CAAEQ,GAAI,CAAC,GACnBR,MAAM,CAAEQ,GAAI,CAAC,GAAGH,GAAG;EACpB,OAAOA,GAAG;AACX;;AAGA;;AAEAK,MAAM,CAACC,OAAO,GAAGP,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}