{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = require('./is_number.js');\nvar zeroPad = require('./zero_pad.js');\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger(token) {\n  var base;\n  var out;\n  var i;\n  switch (token.specifier) {\n    case 'b':\n      // Case: %b (binary)\n      base = 2;\n      break;\n    case 'o':\n      // Case: %o (octal)\n      base = 8;\n      break;\n    case 'x':\n    case 'X':\n      // Case: %x, %X (hexadecimal)\n      base = 16;\n      break;\n    case 'd':\n    case 'i':\n    case 'u':\n    default:\n      // Case: %d, %i, %u (decimal)\n      base = 10;\n      break;\n  }\n  out = token.arg;\n  i = parseInt(out, 10);\n  if (!isFinite(i)) {\n    // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n    if (!isNumber(out)) {\n      throw new Error('invalid integer. Value: ' + out);\n    }\n    i = 0;\n  }\n  if (i < 0 && (token.specifier === 'u' || base !== 10)) {\n    i = 0xffffffff + i + 1;\n  }\n  if (i < 0) {\n    out = (-i).toString(base);\n    if (token.precision) {\n      out = zeroPad(out, token.precision, token.padRight);\n    }\n    out = '-' + out;\n  } else {\n    out = i.toString(base);\n    if (!i && !token.precision) {\n      out = '';\n    } else if (token.precision) {\n      out = zeroPad(out, token.precision, token.padRight);\n    }\n    if (token.sign) {\n      out = token.sign + out;\n    }\n  }\n  if (base === 16) {\n    if (token.alternate) {\n      out = '0x' + out;\n    }\n    out = token.specifier === uppercase.call(token.specifier) ? uppercase.call(out) : lowercase.call(out);\n  }\n  if (base === 8) {\n    if (token.alternate && out.charAt(0) !== '0') {\n      out = '0' + out;\n    }\n  }\n  return out;\n}\n\n// EXPORTS //\n\nmodule.exports = formatInteger;","map":{"version":3,"names":["isNumber","require","zeroPad","lowercase","String","prototype","toLowerCase","uppercase","toUpperCase","formatInteger","token","base","out","i","specifier","arg","parseInt","isFinite","Error","toString","precision","padRight","sign","alternate","call","charAt","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( './is_number.js' );\nvar zeroPad = require( './zero_pad.js' );\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = formatInteger;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}