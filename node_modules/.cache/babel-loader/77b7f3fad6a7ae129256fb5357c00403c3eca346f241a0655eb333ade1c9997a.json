{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\durga\\\\Downloads\\\\stat-anv\\\\stat\\\\src\\\\components\\\\InferentialStatistics.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Line, Bar, Scatter } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nconst InferentialStatisticsVisualiser = ({\n  data,\n  columnHeaders\n}) => {\n  _s();\n  const [selectedCategory, setSelectedCategory] = useState('TotalMatches'); // Default to a column name (e.g., TotalMatches)\n  const [sampleSize, setSampleSize] = useState(5); // Default sample size\n  const [sampleData, setSampleData] = useState([]);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'category',\n        // Use column names as x-axis\n        labels: columnHeaders // Column names on x-axis\n      },\n      y: {\n        type: 'linear'\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    }\n  };\n\n  // Handle sample size change\n  const handleSampleSizeChange = e => {\n    const newSampleSize = Number(e.target.value);\n    setSampleSize(newSampleSize);\n    updateSampleData(newSampleSize);\n  };\n\n  // Dynamically fetch the sample data for the selected column and sample size\n  const updateSampleData = size => {\n    const selectedColumnIndex = columnHeaders.indexOf(selectedCategory);\n    const newSampleData = data.slice(0, size).map(item => item[selectedColumnIndex]);\n    setSampleData(newSampleData);\n  };\n\n  // Update data when user selects a different category\n  const handleCategoryChange = e => {\n    setSelectedCategory(e.target.value);\n    updateSampleData(sampleSize); // Update sample data based on new category\n  };\n\n  // Chart data object\n  const chartData = {\n    labels: columnHeaders,\n    // Use column names as x-axis labels\n    datasets: [{\n      label: `${selectedCategory} Sample Visualization`,\n      data: sampleData,\n      // Dynamic data based on sample size and selected category\n      backgroundColor: 'rgba(75, 192, 192, 0.5)',\n      borderColor: 'rgb(75, 192, 192)',\n      fill: false,\n      tension: 0.4\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto p-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: \"Inferential Statistics Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCategory,\n        onChange: handleCategoryChange,\n        className: \"px-4 py-2 border rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"TotalMatches\",\n          children: \"Total Matches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"TotalRuns\",\n          children: \"Total Runs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Total4s\",\n          children: \"Total 4s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Total6s\",\n          children: \"Total 6s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"TotalWickets\",\n          children: \"Total Wickets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: sampleSize,\n        onChange: handleSampleSizeChange,\n        min: \"1\",\n        max: data.length,\n        className: \"mt-4 px-4 py-2 border rounded-md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2\",\n        children: [\"Showing \", sampleSize, \" sample(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: [selectedCategory, \" Visualization\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '300px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(InferentialStatisticsVisualiser, \"RU0Pdo1UcvFrb7FAM3KLuQGXRhQ=\");\n_c = InferentialStatisticsVisualiser;\nexport default InferentialStatisticsVisualiser;\nvar _c;\n$RefreshReg$(_c, \"InferentialStatisticsVisualiser\");","map":{"version":3,"names":["React","useState","Line","Bar","Scatter","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","InferentialStatisticsVisualiser","data","columnHeaders","_s","selectedCategory","setSelectedCategory","sampleSize","setSampleSize","sampleData","setSampleData","options","responsive","maintainAspectRatio","scales","x","type","labels","y","plugins","legend","position","tooltip","mode","intersect","handleSampleSizeChange","e","newSampleSize","Number","target","value","updateSampleData","size","selectedColumnIndex","indexOf","newSampleData","slice","map","item","handleCategoryChange","chartData","datasets","label","backgroundColor","borderColor","fill","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","min","max","length","style","height","_c","$RefreshReg$"],"sources":["C:/Users/durga/Downloads/stat-anv/stat/src/components/InferentialStatistics.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Line, Bar, Scatter } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst InferentialStatisticsVisualiser = ({ data, columnHeaders }) => {\r\n  const [selectedCategory, setSelectedCategory] = useState('TotalMatches'); // Default to a column name (e.g., TotalMatches)\r\n  const [sampleSize, setSampleSize] = useState(5); // Default sample size\r\n  const [sampleData, setSampleData] = useState([]);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        type: 'category', // Use column names as x-axis\r\n        labels: columnHeaders, // Column names on x-axis\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      tooltip: {\r\n        mode: 'index',\r\n        intersect: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Handle sample size change\r\n  const handleSampleSizeChange = (e) => {\r\n    const newSampleSize = Number(e.target.value);\r\n    setSampleSize(newSampleSize);\r\n    updateSampleData(newSampleSize);\r\n  };\r\n\r\n  // Dynamically fetch the sample data for the selected column and sample size\r\n  const updateSampleData = (size) => {\r\n    const selectedColumnIndex = columnHeaders.indexOf(selectedCategory);\r\n    const newSampleData = data.slice(0, size).map(item => item[selectedColumnIndex]);\r\n    setSampleData(newSampleData);\r\n  };\r\n\r\n  // Update data when user selects a different category\r\n  const handleCategoryChange = (e) => {\r\n    setSelectedCategory(e.target.value);\r\n    updateSampleData(sampleSize); // Update sample data based on new category\r\n  };\r\n\r\n  // Chart data object\r\n  const chartData = {\r\n    labels: columnHeaders, // Use column names as x-axis labels\r\n    datasets: [\r\n      {\r\n        label: `${selectedCategory} Sample Visualization`,\r\n        data: sampleData, // Dynamic data based on sample size and selected category\r\n        backgroundColor: 'rgba(75, 192, 192, 0.5)',\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        fill: false,\r\n        tension: 0.4,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\r\n      <div className=\"text-center space-y-4\">\r\n        <h1 className=\"text-2xl font-bold\">Inferential Statistics Visualization</h1>\r\n        \r\n        {/* Dropdown for selecting column (e.g., TotalMatches, TotalRuns, etc.) */}\r\n        <select\r\n          value={selectedCategory}\r\n          onChange={handleCategoryChange}\r\n          className=\"px-4 py-2 border rounded-md\"\r\n        >\r\n          <option value=\"TotalMatches\">Total Matches</option>\r\n          <option value=\"TotalRuns\">Total Runs</option>\r\n          <option value=\"Total4s\">Total 4s</option>\r\n          <option value=\"Total6s\">Total 6s</option>\r\n          <option value=\"TotalWickets\">Total Wickets</option>\r\n        </select>\r\n\r\n        {/* Input for selecting number of samples to visualize */}\r\n        <input\r\n          type=\"number\"\r\n          value={sampleSize}\r\n          onChange={handleSampleSizeChange}\r\n          min=\"1\"\r\n          max={data.length}\r\n          className=\"mt-4 px-4 py-2 border rounded-md\"\r\n        />\r\n        <p className=\"mt-2\">Showing {sampleSize} sample(s)</p>\r\n      </div>\r\n\r\n      {/* Chart rendering based on selected category and sample size */}\r\n      <div className=\"bg-white p-6 rounded-lg shadow\">\r\n        <h2 className=\"text-xl font-bold mb-4\">{selectedCategory} Visualization</h2>\r\n        <div style={{ height: '300px' }}>\r\n          <Line data={chartData} options={options} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InferentialStatisticsVisualiser;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}