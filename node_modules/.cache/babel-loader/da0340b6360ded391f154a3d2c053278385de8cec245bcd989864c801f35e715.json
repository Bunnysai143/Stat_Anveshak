{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar ABS_MASK = require('@stdlib/constants-float64-high-word-abs-mask');\nvar EXPONENT_MASK = require('@stdlib/constants-float64-high-word-exponent-mask');\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\nvar kernelCos = require('@stdlib/math-base-special-kernel-cos');\nvar kernelSin = require('@stdlib/math-base-special-kernel-sin');\nvar rempio2 = require('@stdlib/math-base-special-rempio2');\n\n// VARIABLES //\n\n// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb | 0; // asm type annotation\n\n// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272\nvar SMALL_HIGH_WORD = 0x3e500000 | 0; // asm type annotation\n\n// Array for storing remainder elements:\nvar Y = [0.0, 0.0];\n\n// MAIN //\n\n/**\n* Computes the sine of a number.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |   S    |   C    |    T   |\n*     | 1 |   C    |  -S    |  -1/T  |\n*     | 2 |  -S    |  -C    |    T   |\n*     | 3 |  -C    |   S    |  -1/T  |\n*\n* @param {number} x - input value (in radians)\n* @returns {number} sine\n*\n* @example\n* var v = sin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = sin( 3.141592653589793/2.0 );\n* // returns ~1.0\n*\n* @example\n* var v = sin( -3.141592653589793/6.0 );\n* // returns ~-0.5\n*\n* @example\n* var v = sin( NaN );\n* // returns NaN\n*/\nfunction sin(x) {\n  var ix;\n  var n;\n  ix = getHighWord(x);\n  ix &= ABS_MASK;\n\n  // Case: |x| ~< π/4\n  if (ix <= PIO4_HIGH_WORD) {\n    // Case: |x| ~< 2^-26\n    if (ix < SMALL_HIGH_WORD) {\n      return x;\n    }\n    return kernelSin(x, 0.0);\n  }\n  // Case: x is NaN or infinity\n  if (ix >= EXPONENT_MASK) {\n    return NaN;\n  }\n  // Argument reduction...\n  n = rempio2(x, Y);\n  switch (n & 3) {\n    case 0:\n      return kernelSin(Y[0], Y[1]);\n    case 1:\n      return kernelCos(Y[0], Y[1]);\n    case 2:\n      return -kernelSin(Y[0], Y[1]);\n    default:\n      return -kernelCos(Y[0], Y[1]);\n  }\n}\n\n// EXPORTS //\n\nmodule.exports = sin;","map":{"version":3,"names":["ABS_MASK","require","EXPONENT_MASK","getHighWord","kernelCos","kernelSin","rempio2","PIO4_HIGH_WORD","SMALL_HIGH_WORD","Y","sin","x","ix","n","NaN","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-sin/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\nvar EXPONENT_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar kernelCos = require( '@stdlib/math-base-special-kernel-cos' );\nvar kernelSin = require( '@stdlib/math-base-special-kernel-sin' );\nvar rempio2 = require( '@stdlib/math-base-special-rempio2' );\n\n\n// VARIABLES //\n\n// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272\nvar SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation\n\n// Array for storing remainder elements:\nvar Y = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the sine of a number.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |   S    |   C    |    T   |\n*     | 1 |   C    |  -S    |  -1/T  |\n*     | 2 |  -S    |  -C    |    T   |\n*     | 3 |  -C    |   S    |  -1/T  |\n*\n* @param {number} x - input value (in radians)\n* @returns {number} sine\n*\n* @example\n* var v = sin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = sin( 3.141592653589793/2.0 );\n* // returns ~1.0\n*\n* @example\n* var v = sin( -3.141592653589793/6.0 );\n* // returns ~-0.5\n*\n* @example\n* var v = sin( NaN );\n* // returns NaN\n*/\nfunction sin( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= ABS_MASK;\n\n\t// Case: |x| ~< π/4\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~< 2^-26\n\t\tif ( ix < SMALL_HIGH_WORD ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn kernelSin( x, 0.0 );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction...\n\tn = rempio2( x, Y );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelSin( Y[ 0 ], Y[ 1 ] );\n\tcase 1:\n\t\treturn kernelCos( Y[ 0 ], Y[ 1 ] );\n\tcase 2:\n\t\treturn -kernelSin( Y[ 0 ], Y[ 1 ] );\n\tdefault:\n\t\treturn -kernelCos( Y[ 0 ], Y[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = sin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAE,8CAA+C,CAAC;AACxE,IAAIC,aAAa,GAAGD,OAAO,CAAE,mDAAoD,CAAC;AAClF,IAAIE,WAAW,GAAGF,OAAO,CAAE,2CAA4C,CAAC;AACxE,IAAIG,SAAS,GAAGH,OAAO,CAAE,sCAAuC,CAAC;AACjE,IAAII,SAAS,GAAGJ,OAAO,CAAE,sCAAuC,CAAC;AACjE,IAAIK,OAAO,GAAGL,OAAO,CAAE,mCAAoC,CAAC;;AAG5D;;AAEA;AACA,IAAIM,cAAc,GAAG,UAAU,GAAC,CAAC,CAAC,CAAC;;AAEnC;AACA,IAAIC,eAAe,GAAG,UAAU,GAAC,CAAC,CAAC,CAAC;;AAEpC;AACA,IAAIC,CAAC,GAAG,CAAE,GAAG,EAAE,GAAG,CAAE;;AAGpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAAEC,CAAC,EAAG;EACjB,IAAIC,EAAE;EACN,IAAIC,CAAC;EAELD,EAAE,GAAGT,WAAW,CAAEQ,CAAE,CAAC;EACrBC,EAAE,IAAIZ,QAAQ;;EAEd;EACA,IAAKY,EAAE,IAAIL,cAAc,EAAG;IAC3B;IACA,IAAKK,EAAE,GAAGJ,eAAe,EAAG;MAC3B,OAAOG,CAAC;IACT;IACA,OAAON,SAAS,CAAEM,CAAC,EAAE,GAAI,CAAC;EAC3B;EACA;EACA,IAAKC,EAAE,IAAIV,aAAa,EAAG;IAC1B,OAAOY,GAAG;EACX;EACA;EACAD,CAAC,GAAGP,OAAO,CAAEK,CAAC,EAAEF,CAAE,CAAC;EACnB,QAASI,CAAC,GAAG,CAAC;IACd,KAAK,CAAC;MACL,OAAOR,SAAS,CAAEI,CAAC,CAAE,CAAC,CAAE,EAAEA,CAAC,CAAE,CAAC,CAAG,CAAC;IACnC,KAAK,CAAC;MACL,OAAOL,SAAS,CAAEK,CAAC,CAAE,CAAC,CAAE,EAAEA,CAAC,CAAE,CAAC,CAAG,CAAC;IACnC,KAAK,CAAC;MACL,OAAO,CAACJ,SAAS,CAAEI,CAAC,CAAE,CAAC,CAAE,EAAEA,CAAC,CAAE,CAAC,CAAG,CAAC;IACpC;MACC,OAAO,CAACL,SAAS,CAAEK,CAAC,CAAE,CAAC,CAAE,EAAEA,CAAC,CAAE,CAAC,CAAG,CAAC;EACpC;AACD;;AAGA;;AAEAM,MAAM,CAACC,OAAO,GAAGN,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}