{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\nvar setHighWord = require('@stdlib/number-float64-base-set-high-word');\nvar setLowWord = require('@stdlib/number-float64-base-set-low-word');\nvar uint32ToInt32 = require('@stdlib/number-uint32-base-to-int32');\nvar ldexp = require('@stdlib/math-base-special-ldexp');\nvar LN2 = require('@stdlib/constants-float64-ln-two');\nvar BIAS = require('@stdlib/constants-float64-exponent-bias');\nvar ABS_MASK = require('@stdlib/constants-float64-high-word-abs-mask');\nvar HIGH_SIGNIFICAND_MASK = require('@stdlib/constants-float64-high-word-significand-mask');\nvar polyvalP = require('./polyval_p.js');\n\n// VARIABLES //\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000 | 0; // asm type annotation\n\n// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_BIASED_EXP_NEG_1 = 0x3fe00000 | 0; // asm type annotation\n\n// TODO: consider making into an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20 | 0; // asm type annotation\n\n// High: LN2\nvar LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000\n\n// Low: LN2\nvar LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39\n\n// MAIN //\n\n/**\n* Computes \\\\(2^{\\mathrm{hp} + \\mathrm{lp}\\\\).\n*\n* @private\n* @param {number} j - high word of `hp + lp`\n* @param {number} hp - first power summand\n* @param {number} lp - second power summand\n* @returns {number} function value\n*\n* @example\n* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );\n* // returns ~0.79\n*/\nfunction pow2(j, hp, lp) {\n  var tmp;\n  var t1;\n  var t;\n  var r;\n  var u;\n  var v;\n  var w;\n  var z;\n  var n;\n  var i;\n  var k;\n  i = j & ABS_MASK | 0; // asm type annotation\n  k = (i >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS | 0; // asm type annotation\n  n = 0;\n\n  // `|z| > 0.5`, set `n = z+0.5`\n  if (i > HIGH_BIASED_EXP_NEG_1) {\n    n = j + (HIGH_MIN_NORMAL_EXP >> k + 1) >>> 0; // asm type annotation\n    k = ((n & ABS_MASK) >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS | 0; // new k for n\n    tmp = (n & ~(HIGH_SIGNIFICAND_MASK >> k)) >>> 0; // asm type annotation\n    t = setHighWord(0.0, tmp);\n    n = (n & HIGH_SIGNIFICAND_MASK | HIGH_MIN_NORMAL_EXP) >> HIGH_NUM_SIGNIFICAND_BITS - k >>> 0; // eslint-disable-line max-len\n    if (j < 0) {\n      n = -n;\n    }\n    hp -= t;\n  }\n  t = lp + hp;\n  t = setLowWord(t, 0);\n  u = t * LN2_HI;\n  v = (lp - (t - hp)) * LN2 + t * LN2_LO;\n  z = u + v;\n  w = v - (z - u);\n  t = z * z;\n  t1 = z - t * polyvalP(t);\n  r = z * t1 / (t1 - 2.0) - (w + z * w);\n  z = 1.0 - (r - z);\n  j = getHighWord(z);\n  j = uint32ToInt32(j);\n  j += n << HIGH_NUM_SIGNIFICAND_BITS >>> 0; // asm type annotation\n\n  // Check for subnormal output...\n  if (j >> HIGH_NUM_SIGNIFICAND_BITS <= 0) {\n    z = ldexp(z, n);\n  } else {\n    z = setHighWord(z, j);\n  }\n  return z;\n}\n\n// EXPORTS //\n\nmodule.exports = pow2;","map":{"version":3,"names":["getHighWord","require","setHighWord","setLowWord","uint32ToInt32","ldexp","LN2","BIAS","ABS_MASK","HIGH_SIGNIFICAND_MASK","polyvalP","HIGH_MIN_NORMAL_EXP","HIGH_BIASED_EXP_NEG_1","HIGH_NUM_SIGNIFICAND_BITS","LN2_HI","LN2_LO","pow2","j","hp","lp","tmp","t1","t","r","u","v","w","z","n","i","k","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-pow/lib/pow2.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\nvar setLowWord = require( '@stdlib/number-float64-base-set-low-word' );\nvar uint32ToInt32 = require( '@stdlib/number-uint32-base-to-int32' );\nvar ldexp = require( '@stdlib/math-base-special-ldexp' );\nvar LN2 = require( '@stdlib/constants-float64-ln-two' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\nvar HIGH_SIGNIFICAND_MASK = require( '@stdlib/constants-float64-high-word-significand-mask' );\nvar polyvalP = require( './polyval_p.js' );\n\n\n// VARIABLES //\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation\n\n// TODO: consider making into an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\n// High: LN2\nvar LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000\n\n// Low: LN2\nvar LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39\n\n\n// MAIN //\n\n/**\n* Computes \\\\(2^{\\mathrm{hp} + \\mathrm{lp}\\\\).\n*\n* @private\n* @param {number} j - high word of `hp + lp`\n* @param {number} hp - first power summand\n* @param {number} lp - second power summand\n* @returns {number} function value\n*\n* @example\n* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );\n* // returns ~0.79\n*/\nfunction pow2( j, hp, lp ) {\n\tvar tmp;\n\tvar t1;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar z;\n\tvar n;\n\tvar i;\n\tvar k;\n\n\ti = (j & ABS_MASK)|0; // asm type annotation\n\tk = ((i>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\tn = 0;\n\n\t// `|z| > 0.5`, set `n = z+0.5`\n\tif ( i > HIGH_BIASED_EXP_NEG_1 ) {\n\t\tn = (j + (HIGH_MIN_NORMAL_EXP>>(k+1)))>>>0; // asm type annotation\n\t\tk = (((n & ABS_MASK)>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // new k for n\n\t\ttmp = ((n & ~(HIGH_SIGNIFICAND_MASK >> k)))>>>0; // asm type annotation\n\t\tt = setHighWord( 0.0, tmp );\n\t\tn = (((n & HIGH_SIGNIFICAND_MASK)|HIGH_MIN_NORMAL_EXP) >> (HIGH_NUM_SIGNIFICAND_BITS-k))>>>0; // eslint-disable-line max-len\n\t\tif ( j < 0 ) {\n\t\t\tn = -n;\n\t\t}\n\t\thp -= t;\n\t}\n\tt = lp + hp;\n\tt = setLowWord( t, 0 );\n\tu = t * LN2_HI;\n\tv = ( (lp - (t-hp))*LN2 ) + ( t*LN2_LO );\n\tz = u + v;\n\tw = v - (z - u);\n\tt = z * z;\n\tt1 = z - ( t*polyvalP( t ) );\n\tr = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );\n\tz = 1.0 - (r - z);\n\tj = getHighWord( z );\n\tj = uint32ToInt32( j );\n\tj += (n << HIGH_NUM_SIGNIFICAND_BITS)>>>0; // asm type annotation\n\n\t// Check for subnormal output...\n\tif ( (j>>HIGH_NUM_SIGNIFICAND_BITS) <= 0 ) {\n\t\tz = ldexp( z, n );\n\t} else {\n\t\tz = setHighWord( z, j );\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pow2;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}