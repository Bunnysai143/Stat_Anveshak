{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveZero = require('@stdlib/math-base-assert-is-positive-zero');\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar PINF = require('@stdlib/constants-float64-pinf');\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum value\n*\n* @example\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = max( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = max( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction max(x, y) {\n  if (isnan(x) || isnan(y)) {\n    return NaN;\n  }\n  if (x === PINF || y === PINF) {\n    return PINF;\n  }\n  if (x === y && x === 0.0) {\n    if (isPositiveZero(x)) {\n      return x;\n    }\n    return y;\n  }\n  if (x > y) {\n    return x;\n  }\n  return y;\n}\n\n// EXPORTS //\n\nmodule.exports = max;","map":{"version":3,"names":["isPositiveZero","require","isnan","PINF","max","x","y","NaN","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-max/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum value\n*\n* @example\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = max( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = max( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction max( x, y ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === PINF || y === PINF ) {\n\t\treturn PINF;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isPositiveZero( x ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( x > y ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAE,2CAA4C,CAAC;AAC3E,IAAIC,KAAK,GAAGD,OAAO,CAAE,iCAAkC,CAAC;AACxD,IAAIE,IAAI,GAAGF,OAAO,CAAE,gCAAiC,CAAC;;AAGtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,GAAGA,CAAEC,CAAC,EAAEC,CAAC,EAAG;EACpB,IAAKJ,KAAK,CAAEG,CAAE,CAAC,IAAIH,KAAK,CAAEI,CAAE,CAAC,EAAG;IAC/B,OAAOC,GAAG;EACX;EACA,IAAKF,CAAC,KAAKF,IAAI,IAAIG,CAAC,KAAKH,IAAI,EAAG;IAC/B,OAAOA,IAAI;EACZ;EACA,IAAKE,CAAC,KAAKC,CAAC,IAAID,CAAC,KAAK,GAAG,EAAG;IAC3B,IAAKL,cAAc,CAAEK,CAAE,CAAC,EAAG;MAC1B,OAAOA,CAAC;IACT;IACA,OAAOC,CAAC;EACT;EACA,IAAKD,CAAC,GAAGC,CAAC,EAAG;IACZ,OAAOD,CAAC;EACT;EACA,OAAOC,CAAC;AACT;;AAGA;;AAEAE,MAAM,CAACC,OAAO,GAAGL,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}