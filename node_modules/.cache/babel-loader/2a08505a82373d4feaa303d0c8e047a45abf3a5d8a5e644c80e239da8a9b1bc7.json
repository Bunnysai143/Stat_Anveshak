{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai kiran\\\\Desktop\\\\INternship\\\\Stat\\\\src\\\\components\\\\RegCore.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport regression from 'regression';\nimport { correlation, spearmanRankCorrelation } from 'simple-statistics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegressionAndCorrelation = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [xValues, setXValues] = useState([]);\n  const [yValues, setYValues] = useState([]);\n  const [model, setModel] = useState(null);\n  const [pearson, setPearson] = useState(null);\n  const [spearman, setSpearman] = useState(null);\n\n  // Handle file upload (CSV/JSON parsing logic to populate data)\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const text = e.target.result;\n      const rows = text.split(\"\\n\").map(row => row.split(\",\"));\n      const x = rows.map(row => parseFloat(row[0]));\n      const y = rows.map(row => parseFloat(row[1]));\n      setXValues(x);\n      setYValues(y);\n      setData(rows);\n    };\n    reader.readAsText(file);\n  };\n\n  // Perform linear regression\n  const performRegression = () => {\n    const result = regression.linear(data.map(([x, y]) => [parseFloat(x), parseFloat(y)]));\n    setModel(result);\n  };\n\n  // Calculate Correlation\n  const calculateCorrelation = () => {\n    const pearsonCoefficient = correlation(xValues, yValues);\n    const spearmanCoefficient = spearmanRankCorrelation(xValues, yValues);\n    setPearson(pearsonCoefficient);\n    setSpearman(spearmanCoefficient);\n  };\n\n  // Prepare data for scatter plot\n  const scatterData = {\n    labels: xValues,\n    datasets: [{\n      label: 'Data Points',\n      data: xValues.map((x, i) => ({\n        x,\n        y: yValues[i]\n      })),\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }, ...(model ? [{\n      label: 'Regression Line',\n      data: xValues.map(x => ({\n        x,\n        y: model.predict(x)[1]\n      })),\n      backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      borderColor: 'rgba(255, 99, 132, 1)',\n      borderWidth: 1,\n      type: 'line'\n    }] : [])]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Regression and Correlation Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv,.json\",\n        onChange: handleFileUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: performRegression,\n      children: \"Perform Regression\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calculateCorrelation,\n      children: \"Calculate Correlation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n      data: scatterData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), model && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Regression Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Equation: \", model.string]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"R\\xB2 Value: \", model.r2.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), pearson !== null && spearman !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Correlation Coefficients:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Pearson's Correlation: \", pearson.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Spearman's Rank Correlation: \", spearman.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(RegressionAndCorrelation, \"PuUWXIgThB1VGrZzhiGgIYRHbAo=\");\n_c = RegressionAndCorrelation;\nexport default RegressionAndCorrelation;\nvar _c;\n$RefreshReg$(_c, \"RegressionAndCorrelation\");","map":{"version":3,"names":["React","useState","Scatter","regression","correlation","spearmanRankCorrelation","jsxDEV","_jsxDEV","RegressionAndCorrelation","_s","data","setData","xValues","setXValues","yValues","setYValues","model","setModel","pearson","setPearson","spearman","setSpearman","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","text","result","rows","split","map","row","x","parseFloat","y","readAsText","performRegression","linear","calculateCorrelation","pearsonCoefficient","spearmanCoefficient","scatterData","labels","datasets","label","i","backgroundColor","borderColor","borderWidth","predict","type","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","string","r2","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Sai kiran/Desktop/INternship/Stat/src/components/RegCore.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport regression from 'regression';\r\nimport { correlation, spearmanRankCorrelation } from 'simple-statistics';\r\n\r\nconst RegressionAndCorrelation = () => {\r\n  const [data, setData] = useState([]);\r\n  const [xValues, setXValues] = useState([]);\r\n  const [yValues, setYValues] = useState([]);\r\n  const [model, setModel] = useState(null);\r\n  const [pearson, setPearson] = useState(null);\r\n  const [spearman, setSpearman] = useState(null);\r\n\r\n  // Handle file upload (CSV/JSON parsing logic to populate data)\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const text = e.target.result;\r\n      const rows = text.split(\"\\n\").map((row) => row.split(\",\"));\r\n      const x = rows.map((row) => parseFloat(row[0]));\r\n      const y = rows.map((row) => parseFloat(row[1]));\r\n      setXValues(x);\r\n      setYValues(y);\r\n      setData(rows);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Perform linear regression\r\n  const performRegression = () => {\r\n    const result = regression.linear(data.map(([x, y]) => [parseFloat(x), parseFloat(y)]));\r\n    setModel(result);\r\n  };\r\n\r\n  // Calculate Correlation\r\n  const calculateCorrelation = () => {\r\n    const pearsonCoefficient = correlation(xValues, yValues);\r\n    const spearmanCoefficient = spearmanRankCorrelation(xValues, yValues);\r\n    setPearson(pearsonCoefficient);\r\n    setSpearman(spearmanCoefficient);\r\n  };\r\n\r\n  // Prepare data for scatter plot\r\n  const scatterData = {\r\n    labels: xValues,\r\n    datasets: [\r\n      {\r\n        label: 'Data Points',\r\n        data: xValues.map((x, i) => ({ x, y: yValues[i] })),\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n      },\r\n      ...(model\r\n        ? [\r\n            {\r\n              label: 'Regression Line',\r\n              data: xValues.map((x) => ({ x, y: model.predict(x)[1] })),\r\n              backgroundColor: 'rgba(255, 99, 132, 0.6)',\r\n              borderColor: 'rgba(255, 99, 132, 1)',\r\n              borderWidth: 1,\r\n              type: 'line',\r\n            },\r\n          ]\r\n        : []),\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Regression and Correlation Analysis</h1>\r\n      <div>\r\n        <input type=\"file\" accept=\".csv,.json\" onChange={handleFileUpload} />\r\n      </div>\r\n      <button onClick={performRegression}>Perform Regression</button>\r\n      <button onClick={calculateCorrelation}>Calculate Correlation</button>\r\n      <Scatter data={scatterData} />\r\n      {model && (\r\n        <div>\r\n          <h3>Regression Results:</h3>\r\n          <p>Equation: {model.string}</p>\r\n          <p>RÂ² Value: {model.r2.toFixed(2)}</p>\r\n        </div>\r\n      )}\r\n      {pearson !== null && spearman !== null && (\r\n        <div>\r\n          <h3>Correlation Coefficients:</h3>\r\n          <p>Pearson's Correlation: {pearson.toFixed(2)}</p>\r\n          <p>Spearman's Rank Correlation: {spearman.toFixed(2)}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegressionAndCorrelation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}