{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai kiran\\\\Desktop\\\\INternship\\\\Stat\\\\src\\\\components\\\\TimeSeriesAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport * as ss from \"simple-statistics\";\nimport \"../styles/TimeSeriesAnalysis.css\";\n\n// Function to perform a basic stationarity check using rolling mean\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst isStationary = data => {\n  const windowSize = Math.floor(data.length / 2);\n  const rollingMean1 = ss.mean(data.slice(0, windowSize));\n  const rollingMean2 = ss.mean(data.slice(windowSize));\n  return Math.abs(rollingMean1 - rollingMean2) < 1e-2; // Threshold for stationarity\n};\n\n// Utility function to check if a column is relevant to time series analysis\nconst isRelevantColumn = (columnHeader, data) => {\n  const dateFormats = [/^\\d{4}-\\d{2}-\\d{2}$/,\n  // YYYY-MM-DD\n  /^\\d{2}\\/\\d{2}\\/\\d{4}$/,\n  // MM/DD/YYYY\n  /^\\d{4}\\/\\d{2}\\/\\d{2}$/,\n  // YYYY/MM/DD\n  /^\\d{2}-\\d{2}-\\d{4}$/,\n  // DD-MM-YYYY\n  /^\\d{2}\\.\\d{2}\\.\\d{4}$/ // DD.MM.YYYY\n  ];\n  const isDateColumn = data.some(row => dateFormats.some(format => format.test(row[columnHeader])));\n  const isValueColumn = data.every(row => typeof row[columnHeader] === \"number\" && !isNaN(row[columnHeader]));\n  return isDateColumn || isValueColumn;\n};\nconst descriptions = {\n  \"Original Data\": `\n    <b>Original Data:</b> \n    <p><b>Use:</b> Represents the raw time series data without any transformations or smoothing. It is the starting point for any time series analysis, showing the observed values over time.</p>\n\n    <p><b>How it works:</b> \n      - No modifications applied. This is simply the data as it was collected.\n      - Visual Analysis: Helps you see trends, anomalies, outliers, and patterns.\n    </p>\n\n    <p><b>Formula:</b> \n      - There is no formula for the original data itself; it's just the set of data points collected in a time-ordered sequence.\n    </p>\n\n    <p><b>Example:</b> \n      - Stock price history, temperature readings over time, sales figures by day/week/month.\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - You may start by plotting the original data to understand the natural behavior of the dataset before applying any statistical techniques.\n    </p>\n  `,\n  \"Moving Average\": `\n    <b>Moving Average:</b> \n    <p><b>Use:</b> A technique used to smooth the time series data by averaging data points over a specific period. Helps identify trends by reducing noise from random fluctuations.</p>\n\n    <p><b>How it works:</b> \n      - The moving average takes a window size (number of data points) and calculates the average of the points in that window.\n      - As you move the window along the data, you get a new average for each position, which \"smooths\" the fluctuations.\n    </p>\n\n    <p><b>Formula:</b> \n      - **Simple Moving Average (SMA)**:\n\n        <code>MA<sub>t</sub> = (1/N) * Σ(y<sub>i</sub>) where i = t-N+1 to t</code>\n\n        Where:\n        - \\( MA_t \\) is the moving average at time \\( t \\).\n        - \\( N \\) is the number of data points in the window.\n        - \\( y_i \\) is the data point at time \\( i \\).\n    </p>\n\n    <p><b>Example Calculation:</b></p>\n    <p>\n      If the window size is 3, the moving average at time \\( t \\) would be the average of the previous three values:\n\n      <code>MA(3) = (1/3) * (22 + 23 + 21) = 22</code>\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - Used in stock market to determine price trends, identify entry/exit points in trading.\n      - Commonly used to detect trends in sales, economic indicators, etc.\n    </p>\n  `,\n  \"Exponential Moving Average (EMA)\": `\n    <b>Exponential Moving Average (EMA):</b> \n    <p><b>Use:</b> An alternative to the Simple Moving Average (SMA) that gives more weight to recent data points, making it more responsive to changes. Suitable for data where recent changes matter more than past values.</p>\n\n    <p><b>How it works:</b> \n      - Unlike SMA, the EMA assigns exponentially decreasing weights to older data points, making it more sensitive to recent trends.\n      - The smoothing factor (\\( \\alpha \\)) determines how much weight to give to the most recent data point.\n    </p>\n\n    <p><b>Formula:</b> \n      - The recursive formula for EMA is:\n\n        <code>EMA<sub>t</sub> = α * y<sub>t</sub> + (1 - α) * EMA<sub>t-1</sub></code>\n\n        Where:\n        - \\( \\alpha = \\frac{2}{n+1} \\) is the smoothing factor.\n        - \\( y_t \\) is the current data point.\n        - \\( EMA_{t-1} \\) is the previous EMA.\n    </p>\n\n    <p><b>Example Calculation:</b></p>\n    <p>\n      EMA for 2025-01-02 with \\( \\alpha = 0.5 \\):\n\n      <code>EMA(2) = 0.5 * 23 + (1 - 0.5) * 22 = 22.5</code>\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - Used in financial analysis, such as stock trading or sales forecasting, to detect trends more quickly compared to SMA.\n    </p>\n  `,\n  \"Differencing\": `\n    <b>Differencing:</b> \n    <p><b>Use:</b> A technique to make a time series stationary by removing trends and seasonality. Helps make data more suitable for forecasting models that assume stationarity (e.g., ARIMA).</p>\n\n    <p><b>How it works:</b> \n      - Differencing involves subtracting the previous observation from the current observation. This removes the trend component of the data.\n      - A first difference is computed as:\n\n        <code>y<sub>t</sub>' = y<sub>t</sub> - y<sub>t-1</sub></code>\n\n      - Seasonal differencing removes seasonal effects:\n\n        <code>y<sub>t</sub>'' = y<sub>t</sub> - y<sub>t-s</sub></code>\n\n        Where \\(s\\) is the seasonal period.\n    </p>\n\n    <p><b>Formula:</b> \n      - For first-order differencing:\n\n        <code>y<sub>t</sub>' = y<sub>t</sub> - y<sub>t-1</sub></code>\n    </p>\n\n    <p><b>Example Calculation:</b></p>\n    <p>\n      Differencing for 2025-01-02:\n\n      <code>Differencing(2) = 23 - 22 = 1</code>\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - Often used when preparing data for models like ARIMA.\n      - Helps identify if seasonality or trend is present and allows us to focus on the fluctuations (residuals).\n    </p>\n  `,\n  \"Stationarity Test\": `\n    <b>Stationarity Test:</b> \n    <p><b>Use:</b> A statistical test to check if a time series is stationary, meaning its statistical properties like mean and variance do not change over time.</p>\n\n    <p><b>How it works:</b> \n      - A stationary series is required for many forecasting models like ARIMA, as the model assumes constant statistical properties.\n      - The Augmented Dickey-Fuller (ADF) test is commonly used to check for stationarity.\n    </p>\n\n    <p><b>Formula:</b> \n      - The ADF test is based on the equation:\n\n        <code>Δy<sub>t</sub> = α + βt + ρy<sub>t-1</sub> + Σ<sub>i=1</sub><sup>p</sup> φ<sub>i</sub> Δy<sub>t-i</sub> + ε<sub>t</sub></code>\n\n        Where:\n        - \\( Δy_t \\) is the change in the value of the time series.\n        - \\( ρ \\) is the coefficient that tests for a unit root (stationarity).\n        - \\( ε_t \\) is the error term.\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - If the series is non-stationary, transformations (e.g., differencing or log transformation) are applied.\n      - Essential before applying models like ARIMA for accurate forecasting.\n    </p>\n  `,\n  \"Autocorrelation\": `\n    <b>Autocorrelation:</b> \n    <p><b>Use:</b> Measures the correlation of a time series with its own past values at different lags. Helps identify repeating patterns or cycles in data.</p>\n\n    <p><b>How it works:</b> \n      - Autocorrelation looks at how similar a series is to itself at different time lags.\n      - If autocorrelation is high at a certain lag, it indicates that values from earlier time periods have a significant impact on future values.\n    </p>\n\n    <p><b>Formula:</b> \n      - The autocorrelation function (ACF) at lag \\( k \\) is given by:\n\n        <code>ρ(k) = Σ<sub>t=k+1</sub><sup>n</sup> (y<sub>t</sub> - ȳ)(y<sub>t-k</sub> - ȳ) / Σ<sub>t=1</sub><sup>n</sup> (y<sub>t</sub> - ȳ)<sup>2</sup></code>\n\n        Where:\n        - \\( ρ(k) \\) is the autocorrelation at lag \\( k \\).\n        - \\( y_t \\) is the value at time \\( t \\).\n        - \\( ȳ \\) is the mean of the series.\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - Commonly used to detect seasonal effects and cyclical behavior in time series data.\n      - Helps determine how far back in time dependencies exist for predictive modeling.\n    </p>\n  `,\n  \"Trend Line\": `\n    <b>Trend Line:</b> \n    <p><b>Use:</b> A line or curve that represents the general direction (upward, downward, or constant) of the data over time. Useful for identifying the overall movement of the time series data.</p>\n\n    <p><b>How it works:</b> \n      - Trend lines can be linear or non-linear, depending on the type of data and its characteristics.\n      - The line is often determined by fitting a regression model to the data.\n    </p>\n\n    <p><b>Formula:</b> \n      - **Linear Trend Line**: \\( y = mx + c \\)\n\n        Where:\n        - \\( m \\) is the slope (rate of change).\n        - \\( c \\) is the intercept.\n        - \\( x \\) is time.\n    </p>\n\n    <p><b>Example Calculation:</b></p>\n    <p>\n      If the trend line is given by \\( y = 2x + 5 \\), for \\( x = 3 \\), we get:\n\n      <code>y = 2(3) + 5 = 11</code>\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - Used in trend analysis to visualize whether a data series is increasing or decreasing.\n      - Important in stock market analysis, economics, and forecasting.\n    </p>\n  `,\n  \"Forecast\": `\n    <b>Forecasting:</b> \n    <p><b>Use:</b> Predicting future values based on historical data. Useful for decision-making in various industries (e.g., finance, retail, weather).</p>\n\n    <p><b>How it works:</b> \n      - Forecasting models like ARIMA, Holt-Winters, or Prophet take historical data to forecast future points by identifying patterns like trends, seasonality, and cycles.\n    </p>\n\n    <p><b>Formula:</b> \n      - **ARIMA Model**:\n\n        <code>y<sub>t</sub> = μ + φ<sub>1</sub> y<sub>t-1</sub> + θ<sub>1</sub> ε<sub>t-1</sub> + ε<sub>t</sub></code>\n\n        Where:\n        - \\( y_t \\) is the forecasted value.\n        - \\( μ \\) is a constant.\n        - \\( φ_1 \\) is the autoregressive term.\n        - \\( ε_t \\) is the error term.\n    </p>\n\n    <p><b>Use in Practice:</b> \n      - Forecasting is used in demand planning, stock market prediction, weather forecasting, etc.\n    </p>\n  `\n};\nfunction TimeSeriesAnalysis({\n  data,\n  columnHeaders\n}) {\n  _s();\n  const timeSeriesColumns = columnHeaders.filter(header => isRelevantColumn(header, data));\n  const [dateColumn, setDateColumn] = useState(\"\");\n  const [valueColumn, setValueColumn] = useState(\"\");\n  const [chartData, setChartData] = useState(null);\n  const [mae, setMae] = useState(null);\n  const [mse, setMse] = useState(null);\n  const [autocorrelation, setAutocorrelation] = useState(null);\n  const [selectedAnalysis, setSelectedAnalysis] = useState(\"Original Data\");\n  const [trendLine, setTrendLine] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [emaData, setEmaData] = useState(null);\n  const [differencingData, setDifferencingData] = useState(null);\n  const [stationarityTest, setStationarityTest] = useState(null);\n  const [showSelectors, setShowSelectors] = useState(false);\n  useEffect(() => {\n    if (!dateColumn || !valueColumn) return;\n    const formattedData = data.map(row => {\n      const date = row[columnHeaders.indexOf(dateColumn)];\n      const value = row[columnHeaders.indexOf(valueColumn)];\n      return {\n        date,\n        value\n      };\n    }).filter(row => row.date && row.value !== null && row.value !== undefined);\n    if (formattedData.length === 0) {\n      console.error(\"No valid data entries after filtering null or undefined values.\");\n      return;\n    }\n    const values = formattedData.map(row => row.value);\n\n    // Moving Average\n    const movingAverage = values.map((value, index, arr) => {\n      if (index < 4) return null; // Assuming window size of 5\n      const windowData = arr.slice(index - 4, index + 1);\n      return ss.mean(windowData);\n    });\n    const actualValues = values.slice(4);\n    const predictedValues = movingAverage.slice(4);\n\n    // Exponential Moving Average (EMA)\n    const alpha = 2 / (values.length + 1);\n    const ema = values.reduce((acc, value, index) => {\n      if (index === 0) return [value];\n      const prevEma = acc[index - 1];\n      const newEma = alpha * value + (1 - alpha) * prevEma;\n      return [...acc, newEma];\n    }, []);\n\n    // Differencing\n    const differencing = values.map((value, index, arr) => {\n      if (index === 0) return null;\n      return value - arr[index - 1];\n    }).slice(1);\n\n    // Trend Line Calculation\n    const linReg = ss.linearRegression(values.map((value, index) => [index, value]));\n    const linRegLine = ss.linearRegressionLine(linReg);\n    const trendLineData = values.map((_, index) => linRegLine(index));\n\n    // Simple ARIMA-like Forecasting (Using basic trend and seasonality)\n    const forecast = [...values];\n    for (let i = values.length; i < values.length + 12; i++) {\n      const trend = linRegLine(i);\n      const seasonalComponent = values[i % values.length]; // Repeat seasonal pattern\n      forecast.push(trend + seasonalComponent - linRegLine(i % values.length));\n    }\n\n    // Chart Data\n    const newChartData = {\n      labels: formattedData.map(row => row.date).concat(Array.from({\n        length: 12\n      }, (_, i) => `Forecast ${i + 1}`)),\n      datasets: [{\n        label: 'Original Data',\n        data: values,\n        borderColor: 'blue',\n        fill: false\n      }, {\n        label: 'Moving Average',\n        data: movingAverage,\n        borderColor: 'red',\n        fill: false\n      }, {\n        label: 'Trend Line',\n        data: trendLineData,\n        borderColor: 'green',\n        fill: false\n      }, {\n        label: 'Forecast',\n        data: forecast,\n        borderColor: 'purple',\n        fill: false\n      }, {\n        label: 'Exponential Moving Average (EMA)',\n        data: ema,\n        borderColor: 'orange',\n        fill: false\n      }, {\n        label: 'Differencing',\n        data: differencing,\n        borderColor: 'gray',\n        fill: false\n      }]\n    };\n\n    // MAE and MSE Calculation\n    const calculateMAE = (actual, predicted) => {\n      return actual.reduce((sum, value, index) => sum + Math.abs(value - predicted[index]), 0) / actual.length;\n    };\n    const calculateMSE = (actual, predicted) => {\n      return actual.reduce((sum, value, index) => sum + Math.pow(value - predicted[index], 2), 0) / actual.length;\n    };\n    const maeValue = calculateMAE(actualValues, predictedValues);\n    const mseValue = calculateMSE(actualValues, predictedValues);\n\n    // Autocorrelation Calculation\n    const calculateAutocorrelation = (data, lag) => {\n      const mean = ss.mean(data);\n      const variance = ss.variance(data);\n      let autoCovariance = 0;\n      for (let i = 0; i < data.length - lag; i++) {\n        autoCovariance += (data[i] - mean) * (data[i + lag] - mean);\n      }\n      return autoCovariance / (data.length - lag) / variance;\n    };\n    const acf = Array.from({\n      length: 20\n    }, (_, k) => calculateAutocorrelation(values, k + 1));\n\n    // Stationarity Test\n    const stationarity = isStationary(values) ? \"Stationary\" : \"Non-Stationary\";\n    setStationarityTest(stationarity);\n    setChartData(newChartData);\n    setMae(maeValue);\n    setMse(mseValue);\n    setAutocorrelation(acf);\n    setTrendLine(trendLineData);\n    setForecastData(forecast);\n    setEmaData(ema);\n    setDifferencingData(differencing);\n    console.log(\"New Chart Data: \", newChartData);\n  }, [data, dateColumn, valueColumn, columnHeaders]);\n  const handleDateColumnChange = e => setDateColumn(e.target.value);\n  const handleValueColumnChange = e => setValueColumn(e.target.value);\n  const handleAnalysisChange = e => setSelectedAnalysis(e.target.value);\n  const renderSelectedAnalysis = () => {\n    switch (selectedAnalysis) {\n      case \"Original Data\":\n        return /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 20\n        }, this);\n      case \"Moving Average\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              labels: chartData.labels,\n              datasets: [{\n                label: 'Moving Average',\n                data: chartData.datasets[1].data,\n                borderColor: 'red',\n                fill: false\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      case \"Autocorrelation\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              labels: [...Array(20).keys()],\n              datasets: [{\n                label: 'Autocorrelation',\n                data: autocorrelation,\n                borderColor: 'black',\n                fill: false\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      case \"Trend Line\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              labels: chartData.labels,\n              datasets: [{\n                label: 'Trend Line',\n                data: trendLine,\n                borderColor: 'green',\n                fill: false\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      case \"Forecast\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              labels: chartData.labels,\n              datasets: [{\n                label: 'Forecast',\n                data: forecastData,\n                borderColor: 'purple',\n                fill: false\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      case \"Exponential Moving Average (EMA)\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              labels: chartData.labels,\n              datasets: [{\n                label: 'Exponential Moving Average (EMA)',\n                data: emaData,\n                borderColor: 'orange',\n                fill: false\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      case \"Differencing\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              labels: chartData.labels.slice(1),\n              // Adjust labels for differencing\n              datasets: [{\n                label: 'Differencing',\n                data: differencingData,\n                borderColor: 'gray',\n                fill: false\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      case \"Stationarity Test\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: `The series is ${stationarityTest}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 15\n        }, this);\n      case \"All Graphs\":\n        return /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 20\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select an analysis to view.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 20\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-series-analysis\",\n    children: !showSelectors ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Time Series Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"**What is Time Series Analysis?**\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 17\n        }, this), \"Time series analysis is a statistical technique that deals with time-ordered data points. It involves analyzing and interpreting data collected or recorded at specific time intervals to identify patterns, trends, and other meaningful information.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"**Uses of Time Series Analysis:**\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 17\n        }, this), \"Time series analysis is widely used across various fields such as finance, economics, environmental science, healthcare, and more. Some common applications include:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Forecasting:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 23\n            }, this), \" Predicting future values based on past observations (e.g., stock prices, weather conditions).\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Anomaly Detection:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 23\n            }, this), \" Identifying unusual patterns or outliers in the data (e.g., fraud detection, equipment monitoring).\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Seasonal Analysis:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 23\n            }, this), \" Understanding and quantifying seasonal effects in the data (e.g., retail sales, tourism trends).\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"**How Time Series Analysis Works:**\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 17\n        }, this), \"Time series analysis involves several techniques and methods to analyze the data:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Moving Average (MA):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 23\n            }, this), \" Smoothing out short-term fluctuations by averaging a specified number of past data points.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Exponential Moving Average (EMA):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 23\n            }, this), \" Giving more weight to recent data points, making it more responsive to new information.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Differencing:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 23\n            }, this), \" Making a time series stationary by removing trends and seasonality through differencing.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Autocorrelation:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 23\n            }, this), \" Measuring the correlation between a time series and a lagged version of itself to identify patterns and seasonality.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"ARIMA (AutoRegressive Integrated Moving Average):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 23\n            }, this), \" A popular forecasting model that combines autoregression, differencing, and moving average techniques.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: () => setShowSelectors(true),\n        children: \"Start Time Series Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Date Column:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: dateColumn,\n            onChange: handleDateColumnChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 21\n            }, this), columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: header,\n              children: header\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Value Column:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: valueColumn,\n            onChange: handleValueColumnChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 21\n            }, this), columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: header,\n              children: header\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Select Analysis:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedAnalysis,\n            onChange: handleAnalysisChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Original Data\",\n              children: \"Original Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Moving Average\",\n              children: \"Moving Average\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Autocorrelation\",\n              children: \"Autocorrelation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Trend Line\",\n              children: \"Trend Line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Forecast\",\n              children: \"Forecast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Exponential Moving Average (EMA)\",\n              children: \"Exponential Moving Average (EMA)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Differencing\",\n              children: \"Differencing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Stationarity Test\",\n              children: \"Stationarity Test\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"All Graphs\",\n              children: \"All Graphs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metrics\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Mean Absolute Error (MAE):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 20\n          }, this), \" \", mae]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Mean Squared Error (MSE):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 20\n          }, this), \" \", mse]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 15\n      }, this), chartData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: renderSelectedAnalysis()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 19\n        }, this), selectedAnalysis !== \"Original Data\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"description\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            dangerouslySetInnerHTML: {\n              __html: descriptions[selectedAnalysis]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available to plot the graph.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 17\n      }, this), !dateColumn || !valueColumn ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"explanations\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Example Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-container\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 631,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Value (like temperature, sales)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 632,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"2025-01-01\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 637,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"22\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 638,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"2025-01-02\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"23\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 642,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"2025-01-03\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 645,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"21\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 646,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"2025-01-04\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 649,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"25\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 17\n      }, this) : null]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 537,\n    columnNumber: 9\n  }, this);\n}\n_s(TimeSeriesAnalysis, \"Y/Au174J3P54ysWB+eR5RruKUco=\");\n_c = TimeSeriesAnalysis;\nexport default TimeSeriesAnalysis;\nvar _c;\n$RefreshReg$(_c, \"TimeSeriesAnalysis\");","map":{"version":3,"names":["React","useState","useEffect","Line","ss","jsxDEV","_jsxDEV","Fragment","_Fragment","isStationary","data","windowSize","Math","floor","length","rollingMean1","mean","slice","rollingMean2","abs","isRelevantColumn","columnHeader","dateFormats","isDateColumn","some","row","format","test","isValueColumn","every","isNaN","descriptions","TimeSeriesAnalysis","columnHeaders","_s","timeSeriesColumns","filter","header","dateColumn","setDateColumn","valueColumn","setValueColumn","chartData","setChartData","mae","setMae","mse","setMse","autocorrelation","setAutocorrelation","selectedAnalysis","setSelectedAnalysis","trendLine","setTrendLine","forecastData","setForecastData","emaData","setEmaData","differencingData","setDifferencingData","stationarityTest","setStationarityTest","showSelectors","setShowSelectors","formattedData","map","date","indexOf","value","undefined","console","error","values","movingAverage","index","arr","windowData","actualValues","predictedValues","alpha","ema","reduce","acc","prevEma","newEma","differencing","linReg","linearRegression","linRegLine","linearRegressionLine","trendLineData","_","forecast","i","trend","seasonalComponent","push","newChartData","labels","concat","Array","from","datasets","label","borderColor","fill","calculateMAE","actual","predicted","sum","calculateMSE","pow","maeValue","mseValue","calculateAutocorrelation","lag","variance","autoCovariance","acf","k","stationarity","log","handleDateColumnChange","e","target","handleValueColumnChange","handleAnalysisChange","renderSelectedAnalysis","fileName","_jsxFileName","lineNumber","columnNumber","children","keys","className","onClick","onChange","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/Sai kiran/Desktop/INternship/Stat/src/components/TimeSeriesAnalysis.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport * as ss from \"simple-statistics\";\r\nimport \"../styles/TimeSeriesAnalysis.css\";\r\n\r\n// Function to perform a basic stationarity check using rolling mean\r\nconst isStationary = (data) => {\r\n  const windowSize = Math.floor(data.length / 2);\r\n  const rollingMean1 = ss.mean(data.slice(0, windowSize));\r\n  const rollingMean2 = ss.mean(data.slice(windowSize));\r\n  return Math.abs(rollingMean1 - rollingMean2) < 1e-2; // Threshold for stationarity\r\n};\r\n\r\n// Utility function to check if a column is relevant to time series analysis\r\nconst isRelevantColumn = (columnHeader, data) => {\r\n  const dateFormats = [\r\n    /^\\d{4}-\\d{2}-\\d{2}$/,   // YYYY-MM-DD\r\n    /^\\d{2}\\/\\d{2}\\/\\d{4}$/, // MM/DD/YYYY\r\n    /^\\d{4}\\/\\d{2}\\/\\d{2}$/, // YYYY/MM/DD\r\n    /^\\d{2}-\\d{2}-\\d{4}$/,   // DD-MM-YYYY\r\n    /^\\d{2}\\.\\d{2}\\.\\d{4}$/, // DD.MM.YYYY\r\n  ];\r\n\r\n  const isDateColumn = data.some((row) => dateFormats.some((format) => format.test(row[columnHeader])));\r\n\r\n  const isValueColumn = data.every((row) => typeof row[columnHeader] === \"number\" && !isNaN(row[columnHeader]));\r\n\r\n  return isDateColumn || isValueColumn;\r\n};\r\n\r\nconst descriptions = {\r\n  \"Original Data\": `\r\n    <b>Original Data:</b> \r\n    <p><b>Use:</b> Represents the raw time series data without any transformations or smoothing. It is the starting point for any time series analysis, showing the observed values over time.</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - No modifications applied. This is simply the data as it was collected.\r\n      - Visual Analysis: Helps you see trends, anomalies, outliers, and patterns.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - There is no formula for the original data itself; it's just the set of data points collected in a time-ordered sequence.\r\n    </p>\r\n\r\n    <p><b>Example:</b> \r\n      - Stock price history, temperature readings over time, sales figures by day/week/month.\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - You may start by plotting the original data to understand the natural behavior of the dataset before applying any statistical techniques.\r\n    </p>\r\n  `,\r\n  \r\n  \"Moving Average\": `\r\n    <b>Moving Average:</b> \r\n    <p><b>Use:</b> A technique used to smooth the time series data by averaging data points over a specific period. Helps identify trends by reducing noise from random fluctuations.</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - The moving average takes a window size (number of data points) and calculates the average of the points in that window.\r\n      - As you move the window along the data, you get a new average for each position, which \"smooths\" the fluctuations.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - **Simple Moving Average (SMA)**:\r\n\r\n        <code>MA<sub>t</sub> = (1/N) * Σ(y<sub>i</sub>) where i = t-N+1 to t</code>\r\n\r\n        Where:\r\n        - \\( MA_t \\) is the moving average at time \\( t \\).\r\n        - \\( N \\) is the number of data points in the window.\r\n        - \\( y_i \\) is the data point at time \\( i \\).\r\n    </p>\r\n\r\n    <p><b>Example Calculation:</b></p>\r\n    <p>\r\n      If the window size is 3, the moving average at time \\( t \\) would be the average of the previous three values:\r\n\r\n      <code>MA(3) = (1/3) * (22 + 23 + 21) = 22</code>\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - Used in stock market to determine price trends, identify entry/exit points in trading.\r\n      - Commonly used to detect trends in sales, economic indicators, etc.\r\n    </p>\r\n  `,\r\n\r\n  \"Exponential Moving Average (EMA)\": `\r\n    <b>Exponential Moving Average (EMA):</b> \r\n    <p><b>Use:</b> An alternative to the Simple Moving Average (SMA) that gives more weight to recent data points, making it more responsive to changes. Suitable for data where recent changes matter more than past values.</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - Unlike SMA, the EMA assigns exponentially decreasing weights to older data points, making it more sensitive to recent trends.\r\n      - The smoothing factor (\\( \\alpha \\)) determines how much weight to give to the most recent data point.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - The recursive formula for EMA is:\r\n\r\n        <code>EMA<sub>t</sub> = α * y<sub>t</sub> + (1 - α) * EMA<sub>t-1</sub></code>\r\n\r\n        Where:\r\n        - \\( \\alpha = \\frac{2}{n+1} \\) is the smoothing factor.\r\n        - \\( y_t \\) is the current data point.\r\n        - \\( EMA_{t-1} \\) is the previous EMA.\r\n    </p>\r\n\r\n    <p><b>Example Calculation:</b></p>\r\n    <p>\r\n      EMA for 2025-01-02 with \\( \\alpha = 0.5 \\):\r\n\r\n      <code>EMA(2) = 0.5 * 23 + (1 - 0.5) * 22 = 22.5</code>\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - Used in financial analysis, such as stock trading or sales forecasting, to detect trends more quickly compared to SMA.\r\n    </p>\r\n  `,\r\n\r\n  \"Differencing\": `\r\n    <b>Differencing:</b> \r\n    <p><b>Use:</b> A technique to make a time series stationary by removing trends and seasonality. Helps make data more suitable for forecasting models that assume stationarity (e.g., ARIMA).</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - Differencing involves subtracting the previous observation from the current observation. This removes the trend component of the data.\r\n      - A first difference is computed as:\r\n\r\n        <code>y<sub>t</sub>' = y<sub>t</sub> - y<sub>t-1</sub></code>\r\n\r\n      - Seasonal differencing removes seasonal effects:\r\n\r\n        <code>y<sub>t</sub>'' = y<sub>t</sub> - y<sub>t-s</sub></code>\r\n\r\n        Where \\(s\\) is the seasonal period.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - For first-order differencing:\r\n\r\n        <code>y<sub>t</sub>' = y<sub>t</sub> - y<sub>t-1</sub></code>\r\n    </p>\r\n\r\n    <p><b>Example Calculation:</b></p>\r\n    <p>\r\n      Differencing for 2025-01-02:\r\n\r\n      <code>Differencing(2) = 23 - 22 = 1</code>\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - Often used when preparing data for models like ARIMA.\r\n      - Helps identify if seasonality or trend is present and allows us to focus on the fluctuations (residuals).\r\n    </p>\r\n  `,\r\n\r\n  \"Stationarity Test\": `\r\n    <b>Stationarity Test:</b> \r\n    <p><b>Use:</b> A statistical test to check if a time series is stationary, meaning its statistical properties like mean and variance do not change over time.</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - A stationary series is required for many forecasting models like ARIMA, as the model assumes constant statistical properties.\r\n      - The Augmented Dickey-Fuller (ADF) test is commonly used to check for stationarity.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - The ADF test is based on the equation:\r\n\r\n        <code>Δy<sub>t</sub> = α + βt + ρy<sub>t-1</sub> + Σ<sub>i=1</sub><sup>p</sup> φ<sub>i</sub> Δy<sub>t-i</sub> + ε<sub>t</sub></code>\r\n\r\n        Where:\r\n        - \\( Δy_t \\) is the change in the value of the time series.\r\n        - \\( ρ \\) is the coefficient that tests for a unit root (stationarity).\r\n        - \\( ε_t \\) is the error term.\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - If the series is non-stationary, transformations (e.g., differencing or log transformation) are applied.\r\n      - Essential before applying models like ARIMA for accurate forecasting.\r\n    </p>\r\n  `,\r\n\r\n  \"Autocorrelation\": `\r\n    <b>Autocorrelation:</b> \r\n    <p><b>Use:</b> Measures the correlation of a time series with its own past values at different lags. Helps identify repeating patterns or cycles in data.</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - Autocorrelation looks at how similar a series is to itself at different time lags.\r\n      - If autocorrelation is high at a certain lag, it indicates that values from earlier time periods have a significant impact on future values.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - The autocorrelation function (ACF) at lag \\( k \\) is given by:\r\n\r\n        <code>ρ(k) = Σ<sub>t=k+1</sub><sup>n</sup> (y<sub>t</sub> - ȳ)(y<sub>t-k</sub> - ȳ) / Σ<sub>t=1</sub><sup>n</sup> (y<sub>t</sub> - ȳ)<sup>2</sup></code>\r\n\r\n        Where:\r\n        - \\( ρ(k) \\) is the autocorrelation at lag \\( k \\).\r\n        - \\( y_t \\) is the value at time \\( t \\).\r\n        - \\( ȳ \\) is the mean of the series.\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - Commonly used to detect seasonal effects and cyclical behavior in time series data.\r\n      - Helps determine how far back in time dependencies exist for predictive modeling.\r\n    </p>\r\n  `,\r\n\r\n  \"Trend Line\": `\r\n    <b>Trend Line:</b> \r\n    <p><b>Use:</b> A line or curve that represents the general direction (upward, downward, or constant) of the data over time. Useful for identifying the overall movement of the time series data.</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - Trend lines can be linear or non-linear, depending on the type of data and its characteristics.\r\n      - The line is often determined by fitting a regression model to the data.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - **Linear Trend Line**: \\( y = mx + c \\)\r\n\r\n        Where:\r\n        - \\( m \\) is the slope (rate of change).\r\n        - \\( c \\) is the intercept.\r\n        - \\( x \\) is time.\r\n    </p>\r\n\r\n    <p><b>Example Calculation:</b></p>\r\n    <p>\r\n      If the trend line is given by \\( y = 2x + 5 \\), for \\( x = 3 \\), we get:\r\n\r\n      <code>y = 2(3) + 5 = 11</code>\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - Used in trend analysis to visualize whether a data series is increasing or decreasing.\r\n      - Important in stock market analysis, economics, and forecasting.\r\n    </p>\r\n  `,\r\n\r\n  \"Forecast\": `\r\n    <b>Forecasting:</b> \r\n    <p><b>Use:</b> Predicting future values based on historical data. Useful for decision-making in various industries (e.g., finance, retail, weather).</p>\r\n\r\n    <p><b>How it works:</b> \r\n      - Forecasting models like ARIMA, Holt-Winters, or Prophet take historical data to forecast future points by identifying patterns like trends, seasonality, and cycles.\r\n    </p>\r\n\r\n    <p><b>Formula:</b> \r\n      - **ARIMA Model**:\r\n\r\n        <code>y<sub>t</sub> = μ + φ<sub>1</sub> y<sub>t-1</sub> + θ<sub>1</sub> ε<sub>t-1</sub> + ε<sub>t</sub></code>\r\n\r\n        Where:\r\n        - \\( y_t \\) is the forecasted value.\r\n        - \\( μ \\) is a constant.\r\n        - \\( φ_1 \\) is the autoregressive term.\r\n        - \\( ε_t \\) is the error term.\r\n    </p>\r\n\r\n    <p><b>Use in Practice:</b> \r\n      - Forecasting is used in demand planning, stock market prediction, weather forecasting, etc.\r\n    </p>\r\n  `\r\n};\r\n\r\nfunction TimeSeriesAnalysis({ data, columnHeaders }) {\r\n  const timeSeriesColumns = columnHeaders.filter((header) => isRelevantColumn(header, data));\r\n  const [dateColumn, setDateColumn] = useState(\"\");\r\n  const [valueColumn, setValueColumn] = useState(\"\");\r\n  const [chartData, setChartData] = useState(null);\r\n  const [mae, setMae] = useState(null);\r\n  const [mse, setMse] = useState(null);\r\n  const [autocorrelation, setAutocorrelation] = useState(null);\r\n  const [selectedAnalysis, setSelectedAnalysis] = useState(\"Original Data\");\r\n  const [trendLine, setTrendLine] = useState(null);\r\n  const [forecastData, setForecastData] = useState(null);\r\n  const [emaData, setEmaData] = useState(null);\r\n  const [differencingData, setDifferencingData] = useState(null);\r\n  const [stationarityTest, setStationarityTest] = useState(null);\r\n  const [showSelectors, setShowSelectors] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!dateColumn || !valueColumn) return;\r\n\r\n    const formattedData = data\r\n      .map((row) => {\r\n        const date = row[columnHeaders.indexOf(dateColumn)];\r\n        const value = row[columnHeaders.indexOf(valueColumn)];\r\n        return { date, value };\r\n      })\r\n      .filter((row) => row.date && row.value !== null && row.value !== undefined);\r\n\r\n    if (formattedData.length === 0) {\r\n      console.error(\"No valid data entries after filtering null or undefined values.\");\r\n      return;\r\n    }\r\n\r\n    const values = formattedData.map((row) => row.value);\r\n\r\n    // Moving Average\r\n    const movingAverage = values.map((value, index, arr) => {\r\n      if (index < 4) return null; // Assuming window size of 5\r\n      const windowData = arr.slice(index - 4, index + 1);\r\n      return ss.mean(windowData);\r\n    });\r\n\r\n    const actualValues = values.slice(4);\r\n    const predictedValues = movingAverage.slice(4);\r\n\r\n    // Exponential Moving Average (EMA)\r\n    const alpha = 2 / (values.length + 1);\r\n    const ema = values.reduce((acc, value, index) => {\r\n      if (index === 0) return [value];\r\n      const prevEma = acc[index - 1];\r\n      const newEma = alpha * value + (1 - alpha) * prevEma;\r\n      return [...acc, newEma];\r\n    }, []);\r\n\r\n    // Differencing\r\n    const differencing = values.map((value, index, arr) => {\r\n      if (index === 0) return null;\r\n      return value - arr[index - 1];\r\n    }).slice(1);\r\n\r\n    // Trend Line Calculation\r\n    const linReg = ss.linearRegression(values.map((value, index) => [index, value]));\r\n    const linRegLine = ss.linearRegressionLine(linReg);\r\n    const trendLineData = values.map((_, index) => linRegLine(index));\r\n\r\n    // Simple ARIMA-like Forecasting (Using basic trend and seasonality)\r\n    const forecast = [...values];\r\n    for (let i = values.length; i < values.length + 12; i++) {\r\n      const trend = linRegLine(i);\r\n      const seasonalComponent = values[i % values.length]; // Repeat seasonal pattern\r\n      forecast.push(trend + seasonalComponent - linRegLine(i % values.length));\r\n    }\r\n\r\n        // Chart Data\r\n        const newChartData = {\r\n          labels: formattedData.map((row) => row.date).concat(Array.from({ length: 12 }, (_, i) => `Forecast ${i + 1}`)),\r\n          datasets: [\r\n            {\r\n              label: 'Original Data',\r\n              data: values,\r\n              borderColor: 'blue',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: 'Moving Average',\r\n              data: movingAverage,\r\n              borderColor: 'red',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: 'Trend Line',\r\n              data: trendLineData,\r\n              borderColor: 'green',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: 'Forecast',\r\n              data: forecast,\r\n              borderColor: 'purple',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: 'Exponential Moving Average (EMA)',\r\n              data: ema,\r\n              borderColor: 'orange',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: 'Differencing',\r\n              data: differencing,\r\n              borderColor: 'gray',\r\n              fill: false,\r\n            }\r\n          ],\r\n        };\r\n    \r\n        // MAE and MSE Calculation\r\n        const calculateMAE = (actual, predicted) => {\r\n          return actual.reduce((sum, value, index) => sum + Math.abs(value - predicted[index]), 0) / actual.length;\r\n        };\r\n    \r\n        const calculateMSE = (actual, predicted) => {\r\n          return actual.reduce((sum, value, index) => sum + Math.pow(value - predicted[index], 2), 0) / actual.length;\r\n        };\r\n    \r\n        const maeValue = calculateMAE(actualValues, predictedValues);\r\n        const mseValue = calculateMSE(actualValues, predictedValues);\r\n    \r\n        // Autocorrelation Calculation\r\n        const calculateAutocorrelation = (data, lag) => {\r\n          const mean = ss.mean(data);\r\n          const variance = ss.variance(data);\r\n          let autoCovariance = 0;\r\n    \r\n          for (let i = 0; i < data.length - lag; i++) {\r\n            autoCovariance += (data[i] - mean) * (data[i + lag] - mean);\r\n          }\r\n    \r\n          return autoCovariance / (data.length - lag) / variance;\r\n        };\r\n    \r\n        const acf = Array.from({ length: 20 }, (_, k) => calculateAutocorrelation(values, k + 1));\r\n    \r\n        // Stationarity Test\r\n        const stationarity = isStationary(values) ? \"Stationary\" : \"Non-Stationary\";\r\n        setStationarityTest(stationarity);\r\n    \r\n        setChartData(newChartData);\r\n        setMae(maeValue);\r\n        setMse(mseValue);\r\n        setAutocorrelation(acf);\r\n        setTrendLine(trendLineData);\r\n        setForecastData(forecast);\r\n        setEmaData(ema);\r\n        setDifferencingData(differencing);\r\n    \r\n        console.log(\"New Chart Data: \", newChartData);\r\n      }, [data, dateColumn, valueColumn, columnHeaders]);\r\n    \r\n      const handleDateColumnChange = (e) => setDateColumn(e.target.value);\r\n      const handleValueColumnChange = (e) => setValueColumn(e.target.value);\r\n      const handleAnalysisChange = (e) => setSelectedAnalysis(e.target.value);\r\n    \r\n      const renderSelectedAnalysis = () => {\r\n        switch (selectedAnalysis) {\r\n          case \"Original Data\":\r\n            return <Line data={chartData} />;\r\n          case \"Moving Average\":\r\n            return (\r\n              <>\r\n                <Line data={{\r\n                  labels: chartData.labels,\r\n                  datasets: [\r\n                    {\r\n                      label: 'Moving Average',\r\n                      data: chartData.datasets[1].data,\r\n                      borderColor: 'red',\r\n                      fill: false,\r\n                    }\r\n                  ]\r\n                }} />\r\n              </>\r\n            );\r\n          case \"Autocorrelation\":\r\n            return (\r\n              <>\r\n                <Line data={{\r\n                  labels: [...Array(20).keys()],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Autocorrelation',\r\n                      data: autocorrelation,\r\n                      borderColor: 'black',\r\n                      fill: false,\r\n                    }\r\n                  ]\r\n                }} />\r\n              </>\r\n            );\r\n          case \"Trend Line\":\r\n            return (\r\n              <>\r\n                <Line data={{\r\n                  labels: chartData.labels,\r\n                  datasets: [\r\n                    {\r\n                      label: 'Trend Line',\r\n                      data: trendLine,\r\n                      borderColor: 'green',\r\n                      fill: false,\r\n                    }\r\n                  ]\r\n                }} />\r\n              </>\r\n            );\r\n          case \"Forecast\":\r\n            return (\r\n              <>\r\n                <Line data={{\r\n                  labels: chartData.labels,\r\n                  datasets: [\r\n                    {\r\n                      label: 'Forecast',\r\n                      data: forecastData,\r\n                      borderColor: 'purple',\r\n                      fill: false,\r\n                    }\r\n                  ]\r\n                }} />\r\n              </>\r\n            );\r\n          case \"Exponential Moving Average (EMA)\":\r\n            return (\r\n              <>\r\n                <Line data={{\r\n                  labels: chartData.labels,\r\n                  datasets: [\r\n                    {\r\n                      label: 'Exponential Moving Average (EMA)',\r\n                      data: emaData,\r\n                      borderColor: 'orange',\r\n                      fill: false,\r\n                    }\r\n                  ]\r\n                }} />\r\n              </>\r\n            );\r\n          case \"Differencing\":\r\n            return (\r\n              <>\r\n                <Line data={{\r\n                  labels: chartData.labels.slice(1), // Adjust labels for differencing\r\n                  datasets: [\r\n                    {\r\n                      label: 'Differencing',\r\n                      data: differencingData,\r\n                      borderColor: 'gray',\r\n                      fill: false,\r\n                    }\r\n                  ]\r\n                }} />\r\n              </>\r\n            );\r\n          case \"Stationarity Test\":\r\n            return (\r\n              <div>{`The series is ${stationarityTest}`}</div>\r\n            );\r\n          case \"All Graphs\":\r\n            return <Line data={chartData} />;\r\n          default:\r\n            return <p>Select an analysis to view.</p>;\r\n        }\r\n      };\r\n      return (\r\n        <div className=\"time-series-analysis\">\r\n          {!showSelectors ? (\r\n            <>\r\n              <h2>Time Series Analysis</h2>\r\n              <p>\r\n                **What is Time Series Analysis?**\r\n                <br />\r\n                Time series analysis is a statistical technique that deals with time-ordered data points. It involves analyzing and interpreting data collected or recorded at specific time intervals to identify patterns, trends, and other meaningful information.\r\n              </p>\r\n              <p>\r\n                **Uses of Time Series Analysis:**\r\n                <br />\r\n                Time series analysis is widely used across various fields such as finance, economics, environmental science, healthcare, and more. Some common applications include:\r\n                <ul>\r\n                  <li><b>Forecasting:</b> Predicting future values based on past observations (e.g., stock prices, weather conditions).</li>\r\n                  <li><b>Anomaly Detection:</b> Identifying unusual patterns or outliers in the data (e.g., fraud detection, equipment monitoring).</li>\r\n                  <li><b>Seasonal Analysis:</b> Understanding and quantifying seasonal effects in the data (e.g., retail sales, tourism trends).</li>\r\n                </ul>\r\n              </p>\r\n              <p>\r\n                **How Time Series Analysis Works:**\r\n                <br />\r\n                Time series analysis involves several techniques and methods to analyze the data:\r\n                <ul>\r\n                  <li><b>Moving Average (MA):</b> Smoothing out short-term fluctuations by averaging a specified number of past data points.</li>\r\n                  <li><b>Exponential Moving Average (EMA):</b> Giving more weight to recent data points, making it more responsive to new information.</li>\r\n                  <li><b>Differencing:</b> Making a time series stationary by removing trends and seasonality through differencing.</li>\r\n                  <li><b>Autocorrelation:</b> Measuring the correlation between a time series and a lagged version of itself to identify patterns and seasonality.</li>\r\n                  <li><b>ARIMA (AutoRegressive Integrated Moving Average):</b> A popular forecasting model that combines autoregression, differencing, and moving average techniques.</li>\r\n                </ul>\r\n              </p>\r\n              <button className=\"\" onClick={() => setShowSelectors(true)}>Start Time Series Analysis</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"selectors\">\r\n                <label>\r\n                  Date Column:\r\n                  <select value={dateColumn} onChange={handleDateColumnChange}>\r\n                    <option value=\"\">Select</option>\r\n                    {columnHeaders.map((header, index) => (\r\n                      <option key={index} value={header}>{header}</option>\r\n                    ))}\r\n                  </select>\r\n                </label>\r\n                <label>\r\n                  Value Column:\r\n                  <select value={valueColumn} onChange={handleValueColumnChange}>\r\n                    <option value=\"\">Select</option>\r\n                    {columnHeaders.map((header, index) => (\r\n                      <option key={index} value={header}>{header}</option>\r\n                    ))}\r\n                  </select>\r\n                </label>\r\n                <label>\r\n                  Select Analysis:\r\n                  <select value={selectedAnalysis} onChange={handleAnalysisChange}>\r\n                    <option value=\"Original Data\">Original Data</option>\r\n                    <option value=\"Moving Average\">Moving Average</option>\r\n                    <option value=\"Autocorrelation\">Autocorrelation</option>\r\n                    <option value=\"Trend Line\">Trend Line</option>\r\n                    <option value=\"Forecast\">Forecast</option>\r\n                    <option value=\"Exponential Moving Average (EMA)\">Exponential Moving Average (EMA)</option>\r\n                    <option value=\"Differencing\">Differencing</option>\r\n                    <option value=\"Stationarity Test\">Stationarity Test</option>\r\n                    <option value=\"All Graphs\">All Graphs</option>\r\n                  </select>\r\n                </label>\r\n              </div>\r\n              <div className=\"metrics\">\r\n                <p><b>Mean Absolute Error (MAE):</b> {mae}</p>\r\n                <p><b>Mean Squared Error (MSE):</b> {mse}</p>\r\n              </div>\r\n              {chartData ? (\r\n                <>\r\n                  <div className=\"chart-container\">\r\n                    {renderSelectedAnalysis()}\r\n                  </div>\r\n                  {selectedAnalysis !== \"Original Data\" && (\r\n                    <div className=\"description\">\r\n                      <p dangerouslySetInnerHTML={{ __html: descriptions[selectedAnalysis] }} />\r\n                    </div>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <p>No data available to plot the graph.</p>\r\n              )}\r\n              {!dateColumn || !valueColumn ? (\r\n                <div className=\"explanations\">\r\n                  <h3>Example Dataset</h3>\r\n                  <div className=\"table-container\">\r\n                    <table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Date</th>\r\n                          <th>Value (like temperature, sales)</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>2025-01-01</td>\r\n                          <td>22</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>2025-01-02</td>\r\n                          <td>23</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>2025-01-03</td>\r\n                          <td>21</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>2025-01-04</td>\r\n                          <td>25</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n            </>\r\n          )}\r\n        </div>\r\n      );\r\n      \r\n    }\r\n    \r\n\r\nexport default TimeSeriesAnalysis;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,KAAKC,EAAE,MAAM,mBAAmB;AACvC,OAAO,kCAAkC;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAC7B,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;EAC9C,MAAMC,YAAY,GAAGX,EAAE,CAACY,IAAI,CAACN,IAAI,CAACO,KAAK,CAAC,CAAC,EAAEN,UAAU,CAAC,CAAC;EACvD,MAAMO,YAAY,GAAGd,EAAE,CAACY,IAAI,CAACN,IAAI,CAACO,KAAK,CAACN,UAAU,CAAC,CAAC;EACpD,OAAOC,IAAI,CAACO,GAAG,CAACJ,YAAY,GAAGG,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC;AACvD,CAAC;;AAED;AACA,MAAME,gBAAgB,GAAGA,CAACC,YAAY,EAAEX,IAAI,KAAK;EAC/C,MAAMY,WAAW,GAAG,CAClB,qBAAqB;EAAI;EACzB,uBAAuB;EAAE;EACzB,uBAAuB;EAAE;EACzB,qBAAqB;EAAI;EACzB,uBAAuB,CAAE;EAAA,CAC1B;EAED,MAAMC,YAAY,GAAGb,IAAI,CAACc,IAAI,CAAEC,GAAG,IAAKH,WAAW,CAACE,IAAI,CAAEE,MAAM,IAAKA,MAAM,CAACC,IAAI,CAACF,GAAG,CAACJ,YAAY,CAAC,CAAC,CAAC,CAAC;EAErG,MAAMO,aAAa,GAAGlB,IAAI,CAACmB,KAAK,CAAEJ,GAAG,IAAK,OAAOA,GAAG,CAACJ,YAAY,CAAC,KAAK,QAAQ,IAAI,CAACS,KAAK,CAACL,GAAG,CAACJ,YAAY,CAAC,CAAC,CAAC;EAE7G,OAAOE,YAAY,IAAIK,aAAa;AACtC,CAAC;AAED,MAAMG,YAAY,GAAG;EACnB,eAAe,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,gBAAgB,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,kCAAkC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,cAAc,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,mBAAmB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,iBAAiB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,YAAY,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,UAAU,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASC,kBAAkBA,CAAC;EAAEtB,IAAI;EAAEuB;AAAc,CAAC,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}