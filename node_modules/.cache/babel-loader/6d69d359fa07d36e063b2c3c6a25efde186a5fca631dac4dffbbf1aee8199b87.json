{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai kiran\\\\Desktop\\\\INternship\\\\Stat\\\\src\\\\components\\\\FileUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport \"../styles/FileUpload.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FileUploader = ({\n  onFileUpload\n}) => {\n  _s();\n  const [fileData, setFileData] = useState(null); // Store file data\n  const [data, setData] = useState([]);\n  const [columnHeaders, setColumnHeaders] = useState([]);\n  const handleFileUpload = e => {\n    const file = e.target.files[0]; // Get the selected file\n    if (!file) {\n      console.error(\"No file selected.\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        const workbook = XLSX.read(new Uint8Array(event.target.result), {\n          type: \"array\"\n        });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]]; // Get the first sheet\n        const rawData = XLSX.utils.sheet_to_json(sheet, {\n          header: 1\n        }); // Convert the sheet to JSON\n        const columnHeaders = rawData[0]; // First row is the column headers\n        const data = rawData.slice(1); // The rest is the actual data\n\n        setData(data);\n        setColumnHeaders(columnHeaders);\n        setFileData(file); // Store the original file\n        onFileUpload(data, columnHeaders); // Send data to parent component\n      } catch (error) {\n        console.error(\"Error reading the file:\", error);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  // Export modified data as Excel file\n  const handleExport = () => {\n    const ws = XLSX.utils.aoa_to_sheet([columnHeaders, ...data]); // Create sheet from the modified data\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\n\n    // Generate and download the Excel file\n    XLSX.writeFile(wb, \"modified_data.xlsx\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `file-upload-container ${fileData ? \"upload-success\" : \"\"}`,\n    children: [!fileData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"file-upload-link\",\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload\"\n        // accept=\".xlsx,.xls\"\n        ,\n        onChange: handleFileUpload,\n        style: {\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), fileData && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upload-btn\",\n      onClick: handleExport,\n      children: \"Export Modified Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUploader, \"K0+w4XCfrbrkQlU4537Tu/yLZJ8=\");\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","Fragment","_Fragment","FileUploader","onFileUpload","_s","fileData","setFileData","data","setData","columnHeaders","setColumnHeaders","handleFileUpload","e","file","target","files","console","error","reader","FileReader","onload","event","workbook","read","Uint8Array","result","type","sheet","Sheets","SheetNames","rawData","utils","sheet_to_json","header","slice","readAsArrayBuffer","handleExport","ws","aoa_to_sheet","wb","book_new","book_append_sheet","writeFile","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","style","display","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Sai kiran/Desktop/INternship/Stat/src/components/FileUploader.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport \"../styles/FileUpload.css\";\r\n\r\nconst FileUploader = ({ onFileUpload }) => {\r\n  const [fileData, setFileData] = useState(null); // Store file data\r\n  const [data, setData] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0]; // Get the selected file\r\n    if (!file) {\r\n      console.error(\"No file selected.\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      try {\r\n        const workbook = XLSX.read(new Uint8Array(event.target.result), {\r\n          type: \"array\",\r\n        });\r\n        const sheet = workbook.Sheets[workbook.SheetNames[0]]; // Get the first sheet\r\n        const rawData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Convert the sheet to JSON\r\n        const columnHeaders = rawData[0]; // First row is the column headers\r\n        const data = rawData.slice(1); // The rest is the actual data\r\n\r\n        setData(data);\r\n        setColumnHeaders(columnHeaders);\r\n        setFileData(file); // Store the original file\r\n        onFileUpload(data, columnHeaders); // Send data to parent component\r\n      } catch (error) {\r\n        console.error(\"Error reading the file:\", error);\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  // Export modified data as Excel file\r\n  const handleExport = () => {\r\n    const ws = XLSX.utils.aoa_to_sheet([columnHeaders, ...data]); // Create sheet from the modified data\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n\r\n    // Generate and download the Excel file\r\n    XLSX.writeFile(wb, \"modified_data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`file-upload-container ${\r\n        fileData ? \"upload-success\" : \"\"\r\n      }`}\r\n    >\r\n      {/* Conditionally render the upload button */}\r\n      {!fileData && (\r\n        <>\r\n          <label htmlFor=\"file-upload\" className=\"file-upload-link\">\r\n            Upload File\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"file-upload\"\r\n            // accept=\".xlsx,.xls\"\r\n            onChange={handleFileUpload}\r\n            style={{ display: \"none\" }}\r\n          />\r\n        </>\r\n      )}\r\n\r\n      {/* Display the export button when a file is uploaded */}\r\n      {fileData && (\r\n        <button className=\"upload-btn\" onClick={handleExport}>\r\n          Export Modified Data\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}