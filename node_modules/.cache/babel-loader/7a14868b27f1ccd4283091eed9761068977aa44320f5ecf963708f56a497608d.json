{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> sin(-x) = -sin(x)\n*\t=> sin(+n) = +0, where `n` is a positive integer\n*\t=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer\n*\t=> cos(-x) = cos(x)\n*/\n\n// MODULES //\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar isInfinite = require('@stdlib/math-base-assert-is-infinite');\nvar cos = require('@stdlib/math-base-special-cos');\nvar sin = require('@stdlib/math-base-special-sin');\nvar abs = require('@stdlib/math-base-special-abs');\nvar copysign = require('@stdlib/math-base-special-copysign');\nvar PI = require('@stdlib/constants-float64-pi');\n\n// MAIN //\n\n/**\n* Computes the value of `sin(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = sinpi( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = sinpi( 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = sinpi( 0.9 );\n* // returns ~0.309\n*\n* @example\n* var y = sinpi( NaN );\n* // returns NaN\n*/\nfunction sinpi(x) {\n  var ar;\n  var r;\n  if (isnan(x)) {\n    return NaN;\n  }\n  if (isInfinite(x)) {\n    return NaN;\n  }\n  // Argument reduction (reduce to [0,2))...\n  r = x % 2.0; // sign preserving\n  ar = abs(r);\n\n  // If `x` is an integer, the mod is an integer...\n  if (ar === 0.0 || ar === 1.0) {\n    return copysign(0.0, r);\n  }\n  if (ar < 0.25) {\n    return sin(PI * r);\n  }\n  // In each of the following, we further reduce to [-π/4,π/4)...\n  if (ar < 0.75) {\n    ar = 0.5 - ar;\n    return copysign(cos(PI * ar), r);\n  }\n  if (ar < 1.25) {\n    r = copysign(1.0, r) - r;\n    return sin(PI * r);\n  }\n  if (ar < 1.75) {\n    ar -= 1.5;\n    return -copysign(cos(PI * ar), r);\n  }\n  r -= copysign(2.0, r);\n  return sin(PI * r);\n}\n\n// EXPORTS //\n\nmodule.exports = sinpi;","map":{"version":3,"names":["isnan","require","isInfinite","cos","sin","abs","copysign","PI","sinpi","x","ar","r","NaN","module","exports"],"sources":["D:/INTERNSHIP-PROJECT-WORK/stat/node_modules/@stdlib/math-base-special-sinpi/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> sin(-x) = -sin(x)\n*\t=> sin(+n) = +0, where `n` is a positive integer\n*\t=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer\n*\t=> cos(-x) = cos(x)\n*/\n\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar cos = require( '@stdlib/math-base-special-cos' );\nvar sin = require( '@stdlib/math-base-special-sin' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar copysign = require( '@stdlib/math-base-special-copysign' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Computes the value of `sin(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = sinpi( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = sinpi( 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = sinpi( 0.9 );\n* // returns ~0.309\n*\n* @example\n* var y = sinpi( NaN );\n* // returns NaN\n*/\nfunction sinpi( x ) {\n\tvar ar;\n\tvar r;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to [0,2))...\n\tr = x % 2.0; // sign preserving\n\tar = abs( r );\n\n\t// If `x` is an integer, the mod is an integer...\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\treturn copysign( 0.0, r );\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sin( PI*r );\n\t}\n\t// In each of the following, we further reduce to [-π/4,π/4)...\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\treturn copysign( cos( PI*ar ), r );\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\treturn sin( PI*r );\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\treturn -copysign( cos( PI*ar ), r );\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sin( PI*r );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sinpi;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAE,iCAAkC,CAAC;AACxD,IAAIC,UAAU,GAAGD,OAAO,CAAE,sCAAuC,CAAC;AAClE,IAAIE,GAAG,GAAGF,OAAO,CAAE,+BAAgC,CAAC;AACpD,IAAIG,GAAG,GAAGH,OAAO,CAAE,+BAAgC,CAAC;AACpD,IAAII,GAAG,GAAGJ,OAAO,CAAE,+BAAgC,CAAC;AACpD,IAAIK,QAAQ,GAAGL,OAAO,CAAE,oCAAqC,CAAC;AAC9D,IAAIM,EAAE,GAAGN,OAAO,CAAE,8BAA+B,CAAC;;AAGlD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,KAAKA,CAAEC,CAAC,EAAG;EACnB,IAAIC,EAAE;EACN,IAAIC,CAAC;EACL,IAAKX,KAAK,CAAES,CAAE,CAAC,EAAG;IACjB,OAAOG,GAAG;EACX;EACA,IAAKV,UAAU,CAAEO,CAAE,CAAC,EAAG;IACtB,OAAOG,GAAG;EACX;EACA;EACAD,CAAC,GAAGF,CAAC,GAAG,GAAG,CAAC,CAAC;EACbC,EAAE,GAAGL,GAAG,CAAEM,CAAE,CAAC;;EAEb;EACA,IAAKD,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAG;IAC/B,OAAOJ,QAAQ,CAAE,GAAG,EAAEK,CAAE,CAAC;EAC1B;EACA,IAAKD,EAAE,GAAG,IAAI,EAAG;IAChB,OAAON,GAAG,CAAEG,EAAE,GAACI,CAAE,CAAC;EACnB;EACA;EACA,IAAKD,EAAE,GAAG,IAAI,EAAG;IAChBA,EAAE,GAAG,GAAG,GAAGA,EAAE;IACb,OAAOJ,QAAQ,CAAEH,GAAG,CAAEI,EAAE,GAACG,EAAG,CAAC,EAAEC,CAAE,CAAC;EACnC;EACA,IAAKD,EAAE,GAAG,IAAI,EAAG;IAChBC,CAAC,GAAGL,QAAQ,CAAE,GAAG,EAAEK,CAAE,CAAC,GAAGA,CAAC;IAC1B,OAAOP,GAAG,CAAEG,EAAE,GAACI,CAAE,CAAC;EACnB;EACA,IAAKD,EAAE,GAAG,IAAI,EAAG;IAChBA,EAAE,IAAI,GAAG;IACT,OAAO,CAACJ,QAAQ,CAAEH,GAAG,CAAEI,EAAE,GAACG,EAAG,CAAC,EAAEC,CAAE,CAAC;EACpC;EACAA,CAAC,IAAIL,QAAQ,CAAE,GAAG,EAAEK,CAAE,CAAC;EACvB,OAAOP,GAAG,CAAEG,EAAE,GAACI,CAAE,CAAC;AACnB;;AAGA;;AAEAE,MAAM,CAACC,OAAO,GAAGN,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}